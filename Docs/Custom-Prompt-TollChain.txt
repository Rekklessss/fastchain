Directory structure:
└── namay26-eth-fasttag/
    ├── README.md
    ├── assets/
    ├── contracts/
    │   ├── README.md
    │   ├── foundry.toml
    │   ├── abi/
    │   │   ├── UserWallet.json
    │   │   └── WalletManager.json
    │   ├── lib/
    │   │   └── forge-std/
    │   │     
    │   ├── src/
    │   │   ├── Paymaster.sol
    │   │   ├── UserWallet.sol
    │   │   └── WalletManager.sol
    │   
    ├── frontend/
    │   ├── App.js
    │   ├── app.json
    │   ├── index.js
    │   ├── package.json
    │   ├── queries.js
    │   ├── tailwind.config.js
    │   ├── .DS_Store
    │   ├── .gitignore
    │   ├── assets/
    │   ├── components/
    │   │   ├── Fastag.js
    │   │   ├── Home.js
    │   │   ├── Login.js
    │   │   ├── Page1.js
    │   │   ├── Page2.js
    │   │   ├── Page3.js
    │   │   ├── Profile.js
    │   │   └── .DS_Store
    │   └── constants/
    │       └── index.js
    ├── web-nfc/
    │   ├── README.md
    │   ├── CONTRIBUTING.md
    │   ├── LICENCE
    │   ├── package-lock.json
    │   ├── package.json
    │   ├── vercel.json
    │   ├── yarn.lock
    │   ├── .gitignore
    │   ├── .gitmodules
    │   ├── .lintstagedrc.js
    │   ├── .yarnrc.yml
    │   ├── packages/
    │   │   ├── core/
    │   │   │   ├── LICENSE
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── yarn.lock
    │   │   │   ├── .gitignore
    │   │   │   ├── .yarnrc.yml
    │   │   │   ├── src/
    │   │   │   │   ├── constants.ts
    │   │   │   │   ├── core.ts
    │   │   │   │   ├── hash.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── input-generator.ts
    │   │   │   │   ├── prover.ts
    │   │   │   │   └── types.ts
    │   │   │   └── .yarn/
    │   │   │       └── install-state.gz
    │   │   ├── foundry/
    │   │   │   ├── README.md
    │   │   │   ├── Makefile
    │   │   │   ├── foundry.toml
    │   │   │   ├── package.json
    │   │   │   ├── remappings.txt
    │   │   │   ├── .env.example
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettier.json
    │   │   │   ├── contracts/
    │   │   │   │   ├── UserWallet.sol
    │   │   │   │   └── WalletManager.sol
    │   │   │   ├── deployments/
    │   │   │   │   └── .gitignore
    │   │   │   |
    │   │   │   ├── script/
    │   │   │   │   ├── Deploy.s.sol
    │   │   │   │   ├── DeployHelpers.s.sol
    │   │   │   │   ├── DeployYourContract.s.sol
    │   │   │   │   └── VerifyAll.s.sol
    │   │   │   ├── scripts-js/
    │   │   │   │   ├── ListAccount.js
    │   │   │   │   └── generateTsAbis.js
    │   │   │   └── test/
    │   │   │       └── .gitkeep
    │   │   └── nextjs/
    │   │       ├── next-env.d.ts
    │   │       ├── next.config.js
    │   │       ├── package.json
    │   │       ├── postcss.config.js
    │   │       ├── scaffold.config.ts
    │   │       ├── tailwind.config.js
    │   │       ├── tsconfig.json
    │   │       ├── .env.example
    │   │       ├── .eslintignore
    │   │       ├── .eslintrc.json
    │   │       ├── .gitignore
    │   │       ├── .prettierrc.js
    │   │       ├── app/
    │   │       │   ├── constants.ts
    │   │       │   ├── layout.tsx
    │   │       │   ├── page.tsx
    │   │       │   ├── reader.tsx
    │   │       │   ├── add/
    │   │       │   │   ├── page.tsx
    │   │       │   │   └── reveal-selectors.json
    │   │       │   ├── blockexplorer/
    │   │       │   │   ├── layout.tsx
    │   │       │   │   ├── page.tsx
    │   │       │   │   ├── _components/
    │   │       │   │   │   ├── AddressCodeTab.tsx
    │   │       │   │   │   ├── AddressComponent.tsx
    │   │       │   │   │   ├── AddressLogsTab.tsx
    │   │       │   │   │   ├── AddressStorageTab.tsx
    │   │       │   │   │   ├── BackButton.tsx
    │   │       │   │   │   ├── ContractTabs.tsx
    │   │       │   │   │   ├── PaginationButton.tsx
    │   │       │   │   │   ├── SearchBar.tsx
    │   │       │   │   │   ├── TransactionHash.tsx
    │   │       │   │   │   ├── TransactionsTable.tsx
    │   │       │   │   │   └── index.tsx
    │   │       │   │   ├── address/
    │   │       │   │   │   └── [address]/
    │   │       │   │   │       └── page.tsx
    │   │       │   │   └── transaction/
    │   │       │   │       ├── [txHash]/
    │   │       │   │       │   └── page.tsx
    │   │       │   │       └── _components/
    │   │       │   │           └── TransactionComp.tsx
    │   │       │   ├── digilocker/
    │   │       │   │   ├── page.tsx
    │   │       │   │   └── reveal-selectors.json
    │   │       │   ├── fastags/
    │   │       │   │   ├── page.tsx
    │   │       │   │   ├── [carId]/
    │   │       │   │   │   ├── page.tsx
    │   │       │   │   │   └── TransactionCard/
    │   │       │   │   │       └── index.tsx
    │   │       │   │   └── components/
    │   │       │   │       └── FastagCard.tsx
    │   │       │   ├── home/
    │   │       │   │   └── page.tsx
    │   │       │   ├── profile/
    │   │       │   │   └── page.tsx
    │   │       │   └── scanner/
    │   │       │       └── page.tsx
    │   │       ├── components/
    │   │       │   ├── Footer.tsx
    │   │       │   ├── Header.tsx
    │   │       │   ├── NFCReader.tsx
    │   │       │   ├── ScaffoldEthAppWithProviders.tsx
    │   │       │   ├── SwitchTheme.tsx
    │   │       │   ├── ThemeProvider.tsx
    │   │       │   ├── assets/
    │   │       │   │   └── BuidlGuidlLogo.tsx
    │   │       │   └── scaffold-eth/
    │   │       │       ├── Balance.tsx
    │   │       │       ├── BlockieAvatar.tsx
    │   │       │       ├── Faucet.tsx
    │   │       │       ├── FaucetButton.tsx
    │   │       │       ├── index.tsx
    │   │       │       ├── Address/
    │   │       │       │   ├── Address.tsx
    │   │       │       │   ├── AddressCopyIcon.tsx
    │   │       │       │   └── AddressLinkWrapper.tsx
    │   │       │       ├── Input/
    │   │       │       │   ├── AddressInput.tsx
    │   │       │       │   ├── Bytes32Input.tsx
    │   │       │       │   ├── BytesInput.tsx
    │   │       │       │   ├── EtherInput.tsx
    │   │       │       │   ├── InputBase.tsx
    │   │       │       │   ├── IntegerInput.tsx
    │   │       │       │   ├── index.ts
    │   │       │       │   └── utils.ts
    │   │       │       └── RainbowKitCustomConnectButton/
    │   │       │           ├── AddressInfoDropdown.tsx
    │   │       │           ├── AddressQRCodeModal.tsx
    │   │       │           ├── NetworkOptions.tsx
    │   │       │           ├── WrongNetworkDropdown.tsx
    │   │       │           └── index.tsx
    │   │       ├── constants/
    │   │       │   └── index.ts
    │   │       ├── contexts/
    │   │       │   └── actions.ts
    │   │       ├── contracts/
    │   │       │   ├── deployedContracts.ts
    │   │       │   └── externalContracts.ts
    │   │       ├── hooks/
    │   │       │   ├── nfc/
    │   │       │   │   ├── index.ts
    │   │       │   │   └── useNFC.ts
    │   │       │   └── scaffold-eth/
    │   │       │       ├── index.ts
    │   │       │       ├── useAnimationConfig.ts
    │   │       │       ├── useContractLogs.ts
    │   │       │       ├── useDeployedContractInfo.ts
    │   │       │       ├── useDisplayUsdMode.ts
    │   │       │       ├── useFetchBlocks.ts
    │   │       │       ├── useInitializeNativeCurrencyPrice.ts
    │   │       │       ├── useNetworkColor.ts
    │   │       │       ├── useOutsideClick.ts
    │   │       │       ├── useScaffoldContract.ts
    │   │       │       ├── useScaffoldEventHistory.ts
    │   │       │       ├── useScaffoldReadContract.ts
    │   │       │       ├── useScaffoldWatchContractEvent.ts
    │   │       │       ├── useScaffoldWriteContract.ts
    │   │       │       ├── useTargetNetwork.ts
    │   │       │       ├── useTransactor.tsx
    │   │       │       └── useWatchBalance.ts
    │   │       ├── public/
    │   │       ├── services/
    │   │       │   ├── store/
    │   │       │   │   └── store.ts
    │   │       │   └── web3/
    │   │       │       ├── wagmiConfig.tsx
    │   │       │       └── wagmiConnectors.tsx
    │   │       ├── styles/
    │   │       │   └── globals.css
    │   │       ├── types/
    │   │       │   ├── abitype/
    │   │       │   │   └── abi.d.ts
    │   │       │   └── react-copy-to-clipboard/
    │   │       │       └── react-copy-to-clipboard.d.ts
    │   │       └── utils/
    │   │           ├── contracts.js
    │   │           ├── contractwagmi.js
    │   │           ├── executeWalletTx.ts
    │   │           └── scaffold-eth/
    │   │               ├── block.ts
    │   │               ├── common.ts
    │   │               ├── contract.ts
    │   │               ├── contractsData.ts
    │   │               ├── decodeTxData.ts
    │   │               ├── fetchPriceFromUniswap.ts
    │   │               ├── getMetadata.ts
    │   │               ├── getParsedError.ts
    │   │               ├── index.ts
    │   │               ├── networks.ts
    │   │               └── notification.tsx
    │   ├── .github/
    │   │   └── workflows/
    │   │       └── lint.yaml
    │   ├── .husky/
    │   │   └── pre-commit
    │   └── .yarn/
    │       └── releases/
    │           └── yarn-4.5.3.cjs
    └── webviews/
        ├── README.md
        ├── next.config.mjs
        ├── package-lock.json
        ├── package.json
        ├── tsconfig.json
        ├── .gitignore
        ├── public/
        └── src/
            ├── app/
            │   ├── globals.css
            │   ├── layout.tsx
            │   ├── page.module.css
            │   ├── page.tsx
            │   ├── close/
            │   │   └── page.tsx
            │   └── fonts/
            │       ├── GeistMonoVF.woff
            │       └── GeistVF.woff
            └── components/
                ├── index.ts
                └── providers/
                    └── AnonProvider.tsx


================================================
File: README.md
================================================
# TollChain

![logo](assets/tollchain-logo.png)

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href="#about-the-project">About The Project</a>
      <ul>
        <li><a href="#built-with">Built With</a></li>
      </ul>
    </li>
    <li><a href="#constituents">Constituents</a></li>
    <li><a href="#problems-we-solve">Problems We Solve</a></li>
  </ol>
</details>

## About The Project

![cover](assets/cover.jpeg)

TollChain is a blockchain-based reimagining of FASTag that combines RFID technology with blockchain security. Users authenticate using [Anon-Aadhaar](https://pse.dev/en/projects/anon-aadhaar) and receive an account abstraction wallet mapped to their VehicleID. When a vehicle approaches a toll plaza, its RFID tag is scanned, triggering a smart contract that processes the payment automatically from the linked wallet. This system ensures privacy through anonymous authentication while maintaining transparency through blockchain's immutable ledger. The solution eliminates manual intervention and provides secure, automated toll collection with real-time balance updates. This helps in private user onboarding as user doesn’t have to share their aadhaar details completely.

<p align="right">(<a href="#readme-top">back to top</a>)</p>

### Built With

[Next.js]: https://img.shields.io/badge/Next.js-black?style=for-the-badge&logo=next.js
[React.js]: https://img.shields.io/badge/React-blue?style=for-the-badge&logo=react
[Next-url]: https://nextjs.org/
[React-url]: https://reactjs.org/

- [![Next][Next.js]][Next-url]
- [![React][React.js]][React-url]
- [Foundry](https://hardhat.org/)
- [Scaffold-ETH 2](https://scaffoldeth.io/)
- [Anon-Aadhaar](https://pse.dev/en/projects/anon-aadhaar)
- [Coinbase Developer Platform](https://www.coinbase.com/en-ar/developer-platform)

<p align="right">(<a href="#readme-top">back to top</a>)</p>

## Constituents

TollChain is made up of following components:

- **[web-nfc](https://github.com/namay26/eth-fasttag/tree/main/web-nfc)** - The UI for TollChain that allows users to create different FASTags and handle them smoothly.
  - [Anon-Aadhaar](https://pse.dev/projects/anon-aadhaar) - Aadhaar based verification for Indian users
  - [RFID-card](https://en.wikipedia.org/wiki/Radio-frequency_identification) - RFID card based scanner, for automated transaction.
- **[contracts](https://github.com/namay26/eth-fasttag/tree/main/contracts)** - Contains two contracts : One is the UserWallet - which is the account abstraction wallet , and Second is the WalletManager - which generates and maps these wallets to the user and the cars.

## Problems We Solve

1. **Security and Fraud Prevention** :

- Problem : Traditional systems face issues with unauthorized or double payments and cyber attacks
- Solution: TollChain uses blockchain's immutable ledger and smart contracts to prevent transaction tampering and ensure payment authenticity

2. **Privacy Concerns** :

- Problem : Current systems expose user data and vehicle tracking information
- Solution : TollChain implements anon-aadhaar for anonymous authentication and transactions are stored on chain , hence preserve user’s privacy

3. **Technical Failures** :

- Problem : Server downtime and hardware issues at toll plazas lead to delays and payment failures
- Solution : Decentralized blockchain architecture eliminates single points of failure and ensures continuous operation

4.  **Payment Reconciliation** :

- Problem : Disputes between operators and complex settlement processes cause delays
- Solution : Smart contracts helps to provide a record of ownership and Blockchain serves as proof of the historic transactions

<p align="right">(<a href="#readme-top">back to top</a>)</p>

## User Flow / Architecture

![Project Architecture](assets/tollchain.png "Architecture Diagram")

## Contract Addresses

### Base Sepolia Testnet

- UserWallet.sol : `0x74e397BB2bC5FcDc15afe3184dEDd340d64712BC`
- WalletManager.sol : `0x33C6A4E07AFa99ff74648C4305C82349836D3615`
- Paymaster.sol: `0x972DA3a7cB9939e58d816E712624db2FD4392092`

================================================
File: contracts/README.md
================================================
WalletManager.sol deployed on Base Sepolia : 0x33C6A4E07AFa99ff74648C4305C82349836D3615 (updated!!)


================================================
File: contracts/foundry.toml
================================================
[profile.default]
src = "src"
out = "out"
libs = ["lib"]

# See more config options https://github.com/foundry-rs/foundry/blob/master/crates/config/README.md#all-options


================================================
File: contracts/abi/UserWallet.json
================================================
[
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "entryPoint",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "ECDSAInvalidSignature",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "length",
                "type": "uint256"
            }
        ],
        "name": "ECDSAInvalidSignatureLength",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "s",
                "type": "bytes32"
            }
        ],
        "name": "ECDSAInvalidSignatureS",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "",
                "type": "bytes"
            }
        ],
        "name": "MinimalAccount__CallFailed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "MinimalAccount__OnlyEntryPointAllowed",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "MinimalAccount__OnlyEntryPointOrOwnerAllowed",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "dest",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            },
            {
                "internalType": "bytes",
                "name": "functionData",
                "type": "bytes"
            }
        ],
        "name": "execute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "nonce",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "initCode",
                        "type": "bytes"
                    },
                    {
                        "internalType": "bytes",
                        "name": "callData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "accountGasLimits",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "preVerificationGas",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "gasFees",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "paymasterAndData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "internalType": "struct PackedUserOperation",
                "name": "userOp",
                "type": "tuple"
            },
            {
                "internalType": "bytes32",
                "name": "userOpHash",
                "type": "bytes32"
            },
            {
                "internalType": "uint256",
                "name": "missingAccountFunds",
                "type": "uint256"
            }
        ],
        "name": "validateUserOp",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "validationData",
                "type": "uint256"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "stateMutability": "payable",
        "type": "receive"
    }
]

================================================
File: contracts/abi/WalletManager.json
================================================
[
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_entryPoint",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "WalletAlreadyExists",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "bytes",
                "name": "user",
                "type": "bytes"
            },
            {
                "indexed": true,
                "internalType": "string",
                "name": "carId",
                "type": "string"
            },
            {
                "indexed": false,
                "internalType": "address",
                "name": "wallet",
                "type": "address"
            }
        ],
        "name": "WalletCreated",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "name": "carIdToWallet",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "userProof",
                "type": "bytes"
            },
            {
                "internalType": "string",
                "name": "carId",
                "type": "string"
            }
        ],
        "name": "createWalletForCar",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "userProof",
                "type": "bytes"
            }
        ],
        "name": "getProfile",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "gender",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "city",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "pincode",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct WalletManager.Person",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "user",
                "type": "bytes"
            }
        ],
        "name": "getUserCars",
        "outputs": [
            {
                "internalType": "string[]",
                "name": "",
                "type": "string[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "carId",
                "type": "string"
            }
        ],
        "name": "getWalletForCar",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "userProof",
                "type": "bytes"
            },
            {
                "internalType": "string",
                "name": "_name",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "_gender",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "_city",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "_pincode",
                "type": "uint256"
            }
        ],
        "name": "setProfile",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes",
                "name": "",
                "type": "bytes"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "userCars",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

================================================
File: contracts/src/Paymaster.sol
================================================
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import {IPaymaster} from "../lib/account-abstraction/contracts/interfaces/IPaymaster.sol";
import {PackedUserOperation} from "../lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol";


contract Paymaster is IPaymaster {
    address public immutable i_entryPoint;
    address public immutable i_owner;


    constructor(address anEntryPoint) {
        i_entryPoint = anEntryPoint;
        i_owner = msg.sender;
    }

    modifier onlyEntryPoint() {
        require(msg.sender == i_entryPoint, "only entry point");
        _;
    }
    

    function validatePaymasterUserOp(
        PackedUserOperation calldata userOp,
        bytes32 userOpHash,
        uint256 maxCost
    )
        external
        view
        onlyEntryPoint
        returns (bytes memory context, uint256 validationData)
    {
        context = new bytes(0);
        validationData = 0;
        return (context, validationData);
    }

    function postOp(
        PostOpMode mode,
        bytes calldata context,
        uint256 actualGasCost,
        uint256 actualUserOpFeePerGas
    ) external{}
}

================================================
File: contracts/src/UserWallet.sol
================================================
// SPDX-License-Identifier:MIT

pragma solidity ^0.8.25;

import {IAccount} from "../lib/account-abstraction/contracts/interfaces/IAccount.sol";
import {PackedUserOperation} from "../lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol";
import {Ownable} from "../lib/openzeppelin-contracts/contracts/Access/Ownable.sol";
import {MessageHashUtils} from "../lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol";
import {ECDSA} from "../lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
import {SIG_VALIDATION_FAILED,SIG_VALIDATION_SUCCESS} from "../lib/account-abstraction/contracts/core/Helpers.sol";
import {IEntryPoint} from "../lib/account-abstraction/contracts/interfaces/IEntryPoint.sol";

contract UserWallet is IAccount , Ownable{

    mapping(address _contract => bool isWhitelisted) private whitelisted;
    
    IEntryPoint private immutable i_entryPoint;

    error UserWallet__OnlyEntryPointAllowed();
    error UserWallet__OnlyEntryPointOrOwnerAllowed();
    error UserWallet__CallFailed(bytes);
    error UserWallet__OnlyOwnerAllowed();

    modifier onlyEntryPoint {
        if(msg.sender != address(i_entryPoint)){
            revert UserWallet__OnlyEntryPointAllowed();
        }
        _;
    }

    modifier onlyEntryPointOrOwner{
        if((msg.sender != address(i_entryPoint)) && (msg.sender != owner())){
            revert UserWallet__OnlyEntryPointOrOwnerAllowed();
        }
        _;
    }

    modifier onlyOwnerUserWallet{
        if(msg.sender != owner()){
            revert UserWallet__OnlyOwnerAllowed();
        }
        _;
    }

    constructor(address entryPoint) Ownable(msg.sender){
        i_entryPoint = IEntryPoint(entryPoint);
    }

    function validateUserOp(
        PackedUserOperation calldata userOp,
        bytes32 userOpHash,
        uint256 missingAccountFunds
    ) external onlyEntryPoint returns (uint256 validationData){
        validationData = _validateSignature(userOp,userOpHash); 
        _payPrefund(missingAccountFunds); 
        
    }

    function _validateSignature(PackedUserOperation calldata userOp,bytes32 userOpHash) internal view returns(uint256 validationData){
        uint256 isSuccess;

        bytes32 ethSignedMessageHash = MessageHashUtils.toEthSignedMessageHash(userOpHash);
        address signer = ECDSA.recover(ethSignedMessageHash , userOp.signature);
        if(signer!=owner()){
            isSuccess =  SIG_VALIDATION_FAILED;
        }
        else{
            isSuccess = SIG_VALIDATION_SUCCESS;
        }
        return SIG_VALIDATION_SUCCESS;
    }

    function _payPrefund(uint256 missingAccountFunds) internal{
        if(missingAccountFunds>0){
            (bool success ,) = payable(msg.sender).call{value : missingAccountFunds , gas: type(uint256).max}("");
            require(success);
        }
    }

    receive() external payable{}
     
    /*//////////////////////////////////////////////////////////////
                           EXTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/


    function execute(address dest , uint256 value , bytes calldata functionData) onlyEntryPointOrOwner external {
        (bool success , bytes memory result) = dest.call{value : value}(functionData);
        if(!success){
            revert UserWallet__CallFailed(result);
        }
    }


                                                     
    /*//////////////////////////////////////////////////////////////
                              WHITELISTING
    //////////////////////////////////////////////////////////////*/

    function isWhitelisted(address _add) public view returns(bool){
        return whitelisted[_add];
    }

    function addToWhitelist(address _add) public onlyOwner{
        whitelisted[_add] = true;
    }

    function withdrawToll(address from , uint256 amount) external{
        require(isWhitelisted(from) , "Cannot Withdraw if not whitelisted");
        (bool success ,) = payable(from).call{value : amount}("");
        require(success);
    }

}

================================================
File: contracts/src/WalletManager.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.25;

import {UserWallet} from "./UserWallet.sol";
import {IEntryPoint} from "../lib/account-abstraction/contracts/interfaces/IEntryPoint.sol";

contract WalletManager{
    struct Person{
        string name;
        string gender;
        string city;
        uint256 pincode;
    }

    error WalletManager__WalletAlreadyExists();
    error WalletManager__NotOwner();

    address owner;

    mapping(string => address) private carIdToWallet;
    mapping(bytes => string[]) private userCars;
    mapping(bytes userProof => Person) private userToProfile;
    IEntryPoint private immutable i_entryPoint;

    modifier onlyOwner {
        if(owner!= msg.sender){
            revert WalletManager__NotOwner();
        }
        _;
    }
    
    event WalletCreated(bytes indexed user, string indexed carId, address wallet);
    
    
    constructor(address _entryPoint) {
        i_entryPoint = IEntryPoint(_entryPoint);
        owner = msg.sender;
    }
    
    function createWalletForCar(bytes memory userProof ,string memory carId) external returns (address) {
        if(carIdToWallet[carId] != address(0)) {
            revert WalletManager__WalletAlreadyExists();
        }
        
        UserWallet newWallet = new UserWallet(address(i_entryPoint));
        newWallet.transferOwnership(msg.sender);
        carIdToWallet[carId] = address(newWallet);
        userCars[userProof].push(carId);
        
        emit WalletCreated(userProof, carId, address(newWallet));
        return address(newWallet);
    }
    
    function getWalletForCar(string memory carId) external view returns (address) {
        return carIdToWallet[carId];
    }
    
    function getUserCars(bytes memory user) external view returns (string[] memory) {
        return userCars[user];
    }


    /*//////////////////////////////////////////////////////////////
                           PROFILE FUNCTIONS
    //////////////////////////////////////////////////////////////*/


    function setProfile(bytes memory userProof ,string memory _name ,string memory _gender ,string memory _city ,uint256 _pincode) public {
        Person memory newPerson = Person({
            name: _name,
            gender : _gender ,
            city: _city ,
            pincode: _pincode
            });
        userToProfile[userProof] = newPerson;
    }

    function getProfile(bytes memory userProof) public view returns(Person memory){
        return userToProfile[userProof];
    }

                                                     
    /*//////////////////////////////////////////////////////////////
                              WHITELISTING
    //////////////////////////////////////////////////////////////*/


    function addToWhitelist_UserWallet(address[] memory addresses , string memory carId) public onlyOwner{
        address carWallet = carIdToWallet[carId];
        UserWallet wallet = UserWallet(payable(carWallet));
        uint256 len = addresses.length;
        for(uint i =0;i<len;i++){
            wallet.addToWhitelist(addresses[i]);
        }
    }

}

================================================
File: contracts/.github/workflows/test.yml
================================================
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge fmt
        run: |
          forge fmt --check
        id: fmt

      - name: Run Forge build
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test


================================================
File: frontend/App.js
================================================
import React from 'react';
import { StyleSheet, View, TouchableOpacity } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import Ionicons from 'react-native-vector-icons/Ionicons'; // Install if not already added

import Home from "./components/Home";
import Page1 from "./components/Page1";
import Page2 from "./components/Page2";
import Profile from "./components/Profile";

import { WagmiProvider, useReadContract } from "wagmi";
import { mainnet, polygon, arbitrum, baseSepolia } from "@wagmi/core/chains";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import {
  createAppKit,
  defaultWagmiConfig,
  AppKit,
  AppKitButton,
} from "@reown/appkit-wagmi-react-native";
import { base } from "viem/chains";

const Tab = createBottomTabNavigator();

const queryClient = new QueryClient();

// 1. Get projectId at https://cloud.reown.com
const projectId = "dcbf2a6e29a6a4d4c6244da31c308764";

// 2. Create config
const metadata = {
  name: "AppKit RN",
  description: "AppKit RN Example",
  url: "https://reown.com/appkit",
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
    universal: "YOUR_APP_UNIVERSAL_LINK.com",
  },
};

const chains = [mainnet, polygon, arbitrum, baseSepolia];

const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata });

// 3. Create modal
createAppKit({
  projectId,
  wagmiConfig,
  defaultChain: mainnet, // Optional
  enableAnalytics: true, // Optional - defaults to your Cloud configuration
});

const CustomTabBar = ({ state, descriptors, navigation }) => {
  return (
    <View style={styles.main_container}>
        <View style={styles.tabBarContainer}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label = 
          options.tabBarLabel !== undefined 
            ? options.tabBarLabel 
            : options.title !== undefined 
            ? options.title 
            : route.name;

        const isFocused = state.index === index;

        let iconName;
        if (route.name === 'Home') {
          iconName = 'home-outline';
        } else if (route.name === 'Search') {
          iconName = 'search-outline';
        } else if (route.name === 'Notifications') {
          iconName = 'notifications-outline';
        } else if (route.name === 'Profile') {
          iconName = 'person-outline';
        }

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };

        return (
          <TouchableOpacity
            key={index}
            onPress={onPress}
            style={styles.iconContainer}
          >
            <Ionicons
              name={iconName}
              size={20}
              color={isFocused ? 'white' : 'grey'}
            />
          </TouchableOpacity>
        );
      })}
    </View>
    </View>
  );
};

const App = () => {
  return (
    <WagmiProvider config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>
    <NavigationContainer>
      <Tab.Navigator screenOptions={{ headerShown: false }} tabBar={(props) => <CustomTabBar {...props}  />}>
        <Tab.Screen name="Home" component={Home} options={{ headerShown: false, tabBarStyle: { display: 'none' } }}  />
        <Tab.Screen name="Search" component={Page1} options={{ headerShown: false, tabBarStyle: { display: 'none' } }}  />
        <Tab.Screen name="Notifications" component={Page2}  options={{ headerShown: false, tabBarStyle: { display: 'none' } }} />
        <Tab.Screen name="Profile" component={Profile} options={{ headerShown: false, tabBarStyle: { display: 'none' } }}  />
      </Tab.Navigator>
    </NavigationContainer>
    <AppKit />
      </QueryClientProvider>
    </WagmiProvider>
  );
};

const styles = StyleSheet.create({
  main_container: {
    marginLeft:20.425,
    marginRight:20.425,
    alignItems: 'center',
    backgroundColor: '',
   
  },
  tabBarContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'black',
    height: 130,
    width:352.15,
    borderRadius: 15,
     // Adjust as needed
  },
  iconContainer: {
    marginBottom: 40,
    width: 64.517, // Size of the square
    height: 64.517, // Size of the square
    backgroundColor: '#191919', // Square color
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 10, // Space between squares
    borderRadius: 10, // Optional for rounded corners
},

});

export default App;

================================================
File: frontend/app.json
================================================
{
  "expo": {
    "name": "MyReactNativeApp",
    "slug": "MyReactNativeApp",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./src/assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./src/assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./src/assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./src/assets/favicon.png"
    },
    "plugins": ["./queries.js"]
  }
}


================================================
File: frontend/index.js
================================================
import { registerRootComponent } from 'expo';


import Login from './components/Login';
import Home from './components/Home';
import App from './App';

registerRootComponent(App);


================================================
File: frontend/package.json
================================================
{
  "name": "myreactnativeapp",
  "license": "0BSD",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@babel/preset-env": "^7.26.0",
    "@coinbase/onchainkit": "^0.35.8",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-native-community/masked-view": "^0.1.11",
    "@react-native-vector-icons/ionicons": "^7.4.0",
    "@react-native-community/netinfo": "11.4.1",
    "@react-navigation/bottom-tabs": "^7.1.3",
    "@react-navigation/native": "^7.0.13",
    "@reown/appkit-wagmi-react-native": "^1.0.2",
    "@tanstack/react-query": "^5.62.3",
    "@walletconnect/react-native-compat": "^2.17.2",
    "babel-preset-expo": "^12.0.3",
    "expo": "~52.0.15",
    "expo-application": "~6.0.1",
    "expo-status-bar": "~2.0.0",
    "metro-react-native-babel-preset": "^0.77.0",
    "nativewind": "^4.1.23",
    "react": "18.3.1",
    "react-native": "0.76.3",
    "react-native-gesture-handler": "^2.21.2",
    "react-native-get-random-values": "~1.11.0",
    "react-native-modal": "^13.0.1",
    "react-native-reanimated": "^3.16.3",
    "react-native-safe-area-context": "^4.14.0",
    "react-native-screens": "^4.3.0",
    "react-native-svg": "^15.10.1",
    "react-native-webview": "^13.12.5",
    "tailwindcss": "^3.4.16",
    "viem": "^2.21.54",
    "wagmi": "^2.13.4"
  },
  "devDependencies": {
    "@babel/core": "^7.26.0",
    "@babel/plugin-transform-class-properties": "^7.25.9",
    "@babel/plugin-transform-private-methods": "^7.25.9",
    "@babel/plugin-transform-private-property-in-object": "^7.25.9",
    "postcss": "^8.4.49"
  },
  "private": true
}


================================================
File: frontend/queries.js
================================================
// based on https://github.com/expo/config-plugins/issues/123#issuecomment-1746757954

const {
  AndroidConfig,
  withAndroidManifest,
  createRunOncePlugin,
} = require("expo/config-plugins");

const queries = {
  package: [
    { $: { "android:name": "com.wallet.crypto.trustapp" } },
    { $: { "android:name": "io.metamask" } },
    { $: { "android:name": "me.rainbow" } },
    { $: { "android:name": "io.zerion.android" } },
    { $: { "android:name": "io.gnosis.safe" } },
    { $: { "android:name": "com.uniswap.mobile" } },
    // Add other wallet package names here
  ],
};

/**
 * @param {import('@expo/config-plugins').ExportedConfig} config
 */
const withAndroidManifestService = (config) => {
  return withAndroidManifest(config, (config) => {
    config.modResults.manifest = {
      ...config.modResults.manifest,
      queries,
    };

    return config;
  });
};

module.exports = createRunOncePlugin(
  withAndroidManifestService,
  "withAndroidManifestService",
  "1.0.0"
);


================================================
File: frontend/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  // NOTE: Update this to include the paths to all of your component files.
  content: ["./app/**/*.{js,jsx,ts,tsx}","./Frontend/**/*.{js,jsx,ts,tsx}"],
  presets: [require("nativewind/preset")],
  theme: {
    extend: {},
  },
  plugins: [],
}

================================================
File: frontend/.gitignore
================================================
node_modules

================================================
File: frontend/components/Fastag.js
================================================
import React from 'react';
import { StyleSheet, TextInput, TouchableOpacity, Button, View, Text, Alert } from 'react-native';
import Svg, { Path } from 'react-native-svg';
export default function Fastag() {
  return (
    <>
      <View style={styles.main_container}>

        <View style={styles.container1}>
          <View style={styles.container1_1}></View>
          <View style={styles.container1_2}>
            <View style={styles.container1_2_1}>
            <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 28 28" fill="none">
                <Path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M12.2498 2.3335C10.6685 2.33363 9.11015 2.71192 7.70477 3.43681C6.2994 4.16169 5.08775 5.21215 4.17092 6.50054C3.25408 7.78893 2.65865 9.2779 2.4343 10.8432C2.20995 12.4085 2.36318 14.0048 2.88122 15.4988C3.39925 16.9929 4.26706 18.3414 5.41225 19.4318C6.55744 20.5223 7.9468 21.3231 9.46441 21.7674C10.982 22.2117 12.5839 22.2866 14.1363 21.9859C15.6888 21.6852 17.1468 21.0176 18.3888 20.0388L22.6495 24.2995C22.8695 24.512 23.1642 24.6296 23.4701 24.6269C23.776 24.6243 24.0686 24.5016 24.2849 24.2853C24.5012 24.069 24.6239 23.7764 24.6266 23.4705C24.6292 23.1646 24.5117 22.8699 24.2991 22.6498L20.0385 18.3892C21.1911 16.9269 21.9088 15.1696 22.1094 13.3185C22.31 11.4674 21.9854 9.59719 21.1727 7.92194C20.3601 6.24669 19.0922 4.83408 17.5142 3.84577C15.9361 2.85745 14.1118 2.33337 12.2498 2.3335ZM4.66647 12.2502C4.66647 10.2389 5.46543 8.31009 6.88758 6.88794C8.30973 5.46579 10.2386 4.66683 12.2498 4.66683C14.261 4.66683 16.1899 5.46579 17.612 6.88794C19.0342 8.31009 19.8331 10.2389 19.8331 12.2502C19.8331 14.2614 19.0342 16.1902 17.612 17.6124C16.1899 19.0345 14.261 19.8335 12.2498 19.8335C10.2386 19.8335 8.30973 19.0345 6.88758 17.6124C5.46543 16.1902 4.66647 14.2614 4.66647 12.2502Z"
                  fill="white"
                  fillOpacity={0.4}
                />
              </Svg>
            </View>
            <Text style={styles.container1_2_text}>  Search</Text>
          </View>
          <View style={styles.container1_3}></View>
        </View>




        <Text style={styles.container2_2}>  FASTags</Text>




        <View style={styles.container2}>


          <View style={styles.container2_1}>
            <View style={styles.container2_1_text}>
              <Text style={styles.container2_1_text1}>ID - 8387123010</Text>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Volkswagen Polo :</Text>
                <Text style={styles.container2_1_text3}>MH 03 SM2536</Text>
              </View>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Current Balance :</Text>
                <Text style={styles.container2_1_text4}>0.05634 ETH</Text>
              </View>
            </View>
            <View style={styles.container2_1_button}>
              <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
                <Text style={styles.buttonText}>Add Amount</Text>
              </TouchableOpacity>
            </View>
          </View>
          <View style={styles.container2_1}>
            <View style={styles.container2_1_text}>
              <Text style={styles.container2_1_text1}>ID - 8387123010</Text>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Volkswagen Polo :</Text>
                <Text style={styles.container2_1_text3}>MH 03 SM2536</Text>
              </View>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Current Balance :</Text>
                <Text style={styles.container2_1_text4}>0.05634 ETH</Text>
              </View>
            </View>
            <View style={styles.container2_1_button}>
              <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
                <Text style={styles.buttonText}>Add Amount</Text>
              </TouchableOpacity>
            </View>
          </View>
          <View style={styles.container2_1}>
            <View style={styles.container2_1_text}>
              <Text style={styles.container2_1_text1}>ID - 8387123010</Text>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Volkswagen Polo :</Text>
                <Text style={styles.container2_1_text3}>MH 03 SM2536</Text>
              </View>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Current Balance :</Text>
                <Text style={styles.container2_1_text4}>0.05634 ETH</Text>
              </View>
            </View>
            <View style={styles.container2_1_button}>
              <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
                <Text style={styles.buttonText}>Add Amount</Text>
              </TouchableOpacity>
            </View>
          </View>
          





          





         






        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    flex: 1,
    alignItems: "center",
    backgroundColor: "black",
    gap: 28.024,
  },
  container1: {
    display: "flex",
    width: 356.302,
    flexDirection: "row",
    alignItems: "center",
    gap: 13.34, // React Native doesn't support 'gap', see note below
  },
  container1_1: {
    width: 37.37,
    height: 37.37,
    backgroundColor: "#191919",
    borderRadius: 28,
  },
  container1_2: {
    paddingLeft: 12,
    width: 256.885,
    height: 36.031,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#191919",
    borderRadius: 8.007,
  },
  container1_2_1: {
    width: 18.683,
    height: 18.683,
    backgroundColor: "#000000",
  },

  container1_2_text: {
    color: "rgba(255, 255, 255, 0.40)",
    fontFamily: "Poppins", // Make sure the font is loaded or available
    fontSize: 14.679,
    fontStyle: "normal",
    fontWeight: "400",
    lineHeight: 28.024,
  },
  container1_3: {},
  container2: {
    gap: 13.34,
  },
  container2_1: {
    paddingLeft: 16.68,
    width: 352.966,
    height: 190.825,
    borderRadius: 10.622,
    backgroundColor: "#191919",
    flexDirection: "row",
    gap: 55,
    alignItems: "center",
  },
  container2_1_text: {},
  container2_1_: {
    gap: -7.37,
  },
  container2_1_text1: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 14.747,
    fontStyle: "normal",
    fontWeight: "700",
    lineHeight: 34.409,
  },
  container2_1_text2: {
    color: "#919191",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 14.747,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 34.409,
  },
  container2_1_text3: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 19.662,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 39.324,
  },
  container2_1_text4: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 24.02,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 34.409,
  },
  container2_1_button: {
    height: 169.66,
    marginTop: 10,
    flexDirection: "column-reverse",
  },
  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 120.433,
    height: 36.031,
    backgroundColor: "#191919", // Button color
    backgroundColor: "#FFFFFF", // Button color
    paddingVertical: 10, // Vertical padding
    paddingHorizontal: 20, // Horizontal padding
    borderRadius: 8, // Rounded corners
    alignItems: "center", // Center the text inside the button
    justifyContent: "center", // Center vertically
  },
  buttonText: {
    color: "#000000",
    fontFamily: "Poppins", // Text color
    fontSize: 13.345,
    fontWeight: "500", // Text weight
  },

  container2_2: {
    width: 352.966,
    lineheight: 37.365,
    fontSize: 18.683,
    fontWeight: "bold",
    color: "white",
  },
  container2_3: {
    paddingLeft: 9.34,
    paddingTop: 14.68,
    width: 356.302,
    height: 121.436,
    borderRadius: 10.622,
    backgroundColor: "#191919",
    gap: 7.34,
  },
  container2_3_1: {
    flexDirection: "row",
    gap: 13,
  },
  container2_3_circle: {
    width: 45.372,
    height: 45.372,
    backgroundColor: "#757575",
    borderRadius: 400,
  },

  container2_3_text: {
    gap: 4.5,
  },
  container2_3_text1: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is linked
    fontSize: 14.679,
    fontStyle: "normal",
    fontWeight: "500",
    lineHeight: 20.422,
  },
  container2_3_text2: {
    color: "rgba(255, 255, 255, 0.70)",
    fontFamily: "Poppins", // Ensure Poppins font is linked
    fontSize: 13.345,
    fontStyle: "normal",
    fontWeight: "400",
    lineHeight: 18.851,
  },

  container2_3_text3: {
    color: "#FFF",
    fontFamily: "Poppins", // Make sure Poppins font is loaded or available
    fontSize: 18.683,
    fontStyle: "normal",
    fontWeight: "500",
    lineHeight: 28.277,
  },
  container2_3_2: {
    flexDirection: "row",
    alignItems: "center",
    gap: 210.31,
  },
  container2_3_Text: {
    color: "rgba(255, 255, 255, 0.40)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 10.676,
    fontStyle: "normal",
    fontWeight: "500",
    lineHeight: 14, // React Native doesn't support 'normal', so use a numeric value
  },
  webViewContainer: {
    position: "absolute",
    zIndex: 1000000,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },

});


================================================
File: frontend/components/Home.js
================================================
import React from "react";
import {
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Button,
  View,
  Text,
  Alert,
  ScrollView,
} from "react-native";

import Svg, { Path } from 'react-native-svg';
import { WebView } from "react-native-webview";
import { useState } from "react";
import "@walletconnect/react-native-compat";
import { useAccount, useReadContract, useWriteContract } from "wagmi";

import { AppKitButton } from "@reown/appkit-wagmi-react-native";
import { walletManager } from "../constants";

import { stringToBytes, stringToHex, toBytes } from "viem";

const IPAddress = "10.100.17.206";

export default function Home() {
  const [showWebView, setShowWebView] = useState(false);
  const [anonAadhaar, setAnonAadhaar] = useState({});

  const { address } = useAccount();

  const { data } = useReadContract({
    abi: walletManager.abi,
    address: walletManager.address,
    functionName: "getWalletForCar",
    args: ["MJ03SM2536"],
  });

  const { data: userCars } = useReadContract({
    abi: walletManager.abi,
    address: walletManager.address,
    functionName: "getUserCars",
    args: [
      stringToHex(
        "14517253733069349235333669871336408150595731506407507345889184041886486997053"
      ),
    ],
  });

  // fetch balance of contract "0x15E41209168cC2cfac67983DF6a480dCC9343113"

  const { data: balance } = useReadContract({
    address: "0x15E41209168cC2cfac67983DF6a480dCC9343113",
    abi: [
      {
        inputs: [],
        name: "balanceOf",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
      },
    ],
    functionName: "balanceOf",
    args: ["0x15E41209168cC2cfac67983DF6a480dCC9343113"],
  });

  console.log("balance", balance);

  const { writeContractAsync, isSuccess } = useWriteContract();
  // read WalletCreated event after wallet creation

  console.log("anon nullifier", data);

  const handleProofGeneration = (event) => {
    // const data = JSON.parse(event.nativeEvent);
    console.log(event.nativeEvent.data);
    // setAnonAadhaar(data.data);
    // setShowWebView(false);
  };

  console.log("connected Wallet address", address);
  const createUserWallet = async () => {
    try {
      if (!address) return;

      const data = await writeContractAsync({
        address: walletManager.address,
        abi: walletManager.abi,
        functionName: "createWalletForCar",
        args: [
          stringToHex(
            "14517253733069349235333669871336408150595731506407507345889184041886486997053"
          ),
          "MJ03SM2536",
        ],
      });
      console.log(data);
    } catch (err) {
      console.log(err);
    }
  };

  const transferEth = async () => {
    try {
      if (!address) return;

      const tx = await writeContractAsync({
        address: "0x74C855b83cB6fCc5fDf29aFbDfBfB2f5cAeDaD8",
        abi: [
          {
            inputs: [
              { internalType: "address", name: "_to", type: "address" },
              { internalType: "uint256", name: "_value", type: "uint256" },
            ],
            name: "transfer",
            outputs: [{ internalType: "bool", name: "", type: "bool" }],
            stateMutability: "nonpayable",
            type: "function",
          },
        ],
        functionName: "transfer",
        args: ["0x15E41209168cC2cfac67983DF6a480dCC9343113", "0.1"],
      });
      console.log(tx);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <ScrollView>
      <AppKitButton />

      <TouchableOpacity
        style={styles.button}
        onPress={() => {
          createUserWallet();
        }}
      >
        <Text style={styles.buttonText}>Create User Wallet</Text>
      </TouchableOpacity>
      <View style={styles.main_container}>
        <View style={styles.container1}>
          <View style={styles.container1_1}>


          </View>
          <View style={styles.container1_2}>
            <View>
              <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 28 28" fill="none">
                <Path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M12.2498 2.3335C10.6685 2.33363 9.11015 2.71192 7.70477 3.43681C6.2994 4.16169 5.08775 5.21215 4.17092 6.50054C3.25408 7.78893 2.65865 9.2779 2.4343 10.8432C2.20995 12.4085 2.36318 14.0048 2.88122 15.4988C3.39925 16.9929 4.26706 18.3414 5.41225 19.4318C6.55744 20.5223 7.9468 21.3231 9.46441 21.7674C10.982 22.2117 12.5839 22.2866 14.1363 21.9859C15.6888 21.6852 17.1468 21.0176 18.3888 20.0388L22.6495 24.2995C22.8695 24.512 23.1642 24.6296 23.4701 24.6269C23.776 24.6243 24.0686 24.5016 24.2849 24.2853C24.5012 24.069 24.6239 23.7764 24.6266 23.4705C24.6292 23.1646 24.5117 22.8699 24.2991 22.6498L20.0385 18.3892C21.1911 16.9269 21.9088 15.1696 22.1094 13.3185C22.31 11.4674 21.9854 9.59719 21.1727 7.92194C20.3601 6.24669 19.0922 4.83408 17.5142 3.84577C15.9361 2.85745 14.1118 2.33337 12.2498 2.3335ZM4.66647 12.2502C4.66647 10.2389 5.46543 8.31009 6.88758 6.88794C8.30973 5.46579 10.2386 4.66683 12.2498 4.66683C14.261 4.66683 16.1899 5.46579 17.612 6.88794C19.0342 8.31009 19.8331 10.2389 19.8331 12.2502C19.8331 14.2614 19.0342 16.1902 17.612 17.6124C16.1899 19.0345 14.261 19.8335 12.2498 19.8335C10.2386 19.8335 8.30973 19.0345 6.88758 17.6124C5.46543 16.1902 4.66647 14.2614 4.66647 12.2502Z"
                  fill="white"
                  fillOpacity={0.4}
                />
              </Svg>
            </View>
            <Text style={styles.container1_2_text}> Search</Text>
          </View>
          <View style={styles.container1_3}></View>
        </View>
        <View style={styles.container2}>
          <View style={styles.container2_1}>
            <View style={styles.container2_1_text}>
              <Text style={styles.container2_1_text1}>ID - 8387123010</Text>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Volkswagen Polo :</Text>
                <Text style={styles.container2_1_text3}>MH 03 SM2536</Text>
              </View>
              <View style={styles.container2_1_}>
                <Text style={styles.container2_1_text2}>Current Balance :</Text>
                <Text style={styles.container2_1_text4}>0.05634 ETH</Text>
              </View>
            </View>
            {!showWebView ? (
              <View style={styles.container2_1_button}>
                <TouchableOpacity
                  style={styles.button}
                  onPress={() => {
                    setShowWebView(true);
                  }}
                >
                  <Text style={styles.buttonText}>Add Amount</Text>
                </TouchableOpacity>
              </View>
            ) : (
              <View style={styles.webViewContainer}>
                <WebView
                  source={{ uri: `http://${IPAddress}:3000` }}
                  style={styles.webView}
                  onNavigationStateChange={(navState) => {
                    if (navState.url === `http://${IPAddress}:3000/close`) {
                      setShowWebView(false); // Close WebView on specific URL
                    }
                  }}
                  onMessage={handleProofGeneration}
                />
              </View>
            )}
          </View>

          <Text style={styles.container2_2}> Trasnactions</Text>

          <View style={styles.container2_3}>
            <View style={styles.container2_3_1}>
              <View style={styles.container2_3_circle}></View>
              <View style={styles.container2_3_text}>
                <Text style={styles.container2_3_text1}>Toll plaza </Text>
                <Text style={styles.container2_3_text2}>National highway </Text>
                <Text style={styles.container2_3_text3}>
                  Toll Amount: 0.0054ETH{" "}
                </Text>
              </View>
            </View>
            <View style={styles.container2_3_2}>
              <Text style={styles.container2_3_Text}>18 August 2020</Text>
              <Text style={styles.container2_3_Text}>4:45pm</Text>
            </View>
          </View><View style={styles.container2_3}>
            <View style={styles.container2_3_1}>
              <View style={styles.container2_3_circle}></View>
              <View style={styles.container2_3_text}>
                <Text style={styles.container2_3_text1}>Toll plaza </Text>
                <Text style={styles.container2_3_text2}>National highway </Text>
                <Text style={styles.container2_3_text3}>
                  Toll Amount: 0.0054ETH{" "}
                </Text>
              </View>
            </View>
            <View style={styles.container2_3_2}>
              <Text style={styles.container2_3_Text}>18 August 2020</Text>
              <Text style={styles.container2_3_Text}>4:45pm</Text>
            </View>
          </View><View style={styles.container2_3}>
            <View style={styles.container2_3_1}>
              <View style={styles.container2_3_circle}></View>
              <View style={styles.container2_3_text}>
                <Text style={styles.container2_3_text1}>Toll plaza </Text>
                <Text style={styles.container2_3_text2}>National highway </Text>
                <Text style={styles.container2_3_text3}>
                  Toll Amount: 0.0054ETH{" "}
                </Text>
              </View>
            </View>
            <View style={styles.container2_3_2}>
              <Text style={styles.container2_3_Text}>18 August 2020</Text>
              <Text style={styles.container2_3_Text}>4:45pm</Text>
            </View>
          </View>
          <View style={styles.container2_3}>
            <View style={styles.container2_3_1}>
              <View style={styles.container2_3_circle}></View>
              <View style={styles.container2_3_text}>
                <Text style={styles.container2_3_text1}>Toll plaza </Text>
                <Text style={styles.container2_3_text2}>National highway </Text>
                <Text style={styles.container2_3_text3}>
                  Toll Amount: 0.0054ETH{" "}
                </Text>
              </View>
            </View>
            <View style={styles.container2_3_2}>
              <Text style={styles.container2_3_Text}>18 August 2020</Text>
              <Text style={styles.container2_3_Text}>4:45pm</Text>
            </View>
          </View>
        </View>

        <TouchableOpacity
          style={styles.button2}
          onPress={() => console.log("Button pressed")}
        >
          <Text style={styles.buttonText2}>continue</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    flex: 1,
    alignItems: "center",
    backgroundColor: "black",
    gap: 28.024,
  },
  container1: {
    display: "flex",
    width: 356.302,
    flexDirection: "row",
    alignItems: "center",
    gap: 13.34, // React Native doesn't support 'gap', see note below
  },
  container1_1: {
    width: 37.37,
    height: 37.37,
    backgroundColor: "#191919",
    borderRadius: 28,
  },
  container1_2: {
    paddingLeft: 12,
    width: 256.885,
    height: 36.031,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#191919",
    borderRadius: 8.007,
  },
  container1_2_1: {
    width: 18.683,
    height: 18.683,
    backgroundColor: "#000000",
  },

  container1_2_text: {
    color: "rgba(255, 255, 255, 0.40)",
    fontFamily: "Poppins", // Make sure the font is loaded or available
    fontSize: 14.679,
    fontStyle: "normal",
    fontWeight: "400",
    lineHeight: 28.024,
  },
  container1_3: {},
  container2: {
    gap: 13.34,
  },
  container2_1: {
    paddingLeft: 16.68,
    width: 352.966,
    height: 190.825,
    borderRadius: 10.622,
    backgroundColor: "#191919",
    flexDirection: "row",
    gap: 55,
    alignItems: "center",
  },
  container2_1_text: {},
  container2_1_: {
    gap: -7.37,
  },
  container2_1_text1: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 14.747,
    fontStyle: "normal",
    fontWeight: "700",
    lineHeight: 34.409,
  },
  container2_1_text2: {
    color: "#919191",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 14.747,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 34.409,
  },
  container2_1_text3: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 19.662,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 39.324,
  },
  container2_1_text4: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 24.02,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 34.409,
  },
  container2_1_button: {
    height: 169.66,
    marginTop: 10,
    flexDirection: "column-reverse",
  },
  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 120.433,
    height: 36.031,
    backgroundColor: "#191919", // Button color
    backgroundColor: "#FFFFFF", // Button color
    paddingVertical: 10, // Vertical padding
    paddingHorizontal: 20, // Horizontal padding
    borderRadius: 8, // Rounded corners
    alignItems: "center", // Center the text inside the button
    justifyContent: "center", // Center vertically
  },
  buttonText: {
    color: "#000000",
    fontFamily: "Poppins", // Text color
    fontSize: 13.345,
    fontWeight: "500", // Text weight
  },

  container2_2: {
    width: 352.966,
    lineheight: 37.365,
    fontSize: 18.683,
    fontWeight: "bold",
    color: "white",
  },
  container2_3: {
    paddingLeft: 9.34,
    paddingTop: 14.68,
    width: 356.302,
    height: 121.436,
    borderRadius: 10.622,
    backgroundColor: "#191919",
    gap: 7.34,
  },
  container2_3_1: {
    flexDirection: "row",
    gap: 13,
  },
  container2_3_circle: {
    width: 45.372,
    height: 45.372,
    backgroundColor: "#757575",
    borderRadius: 400,
  },

  container2_3_text: {
    gap: 4.5,
  },
  container2_3_text1: {
    color: "rgba(255, 255, 255, 0.90)",
    fontFamily: "Poppins", // Ensure Poppins font is linked
    fontSize: 14.679,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 20.422,
  },
  container2_3_text2: {
    color: "rgba(255, 255, 255, 0.70)",
    fontFamily: "Poppins", // Ensure Poppins font is linked
    fontSize: 13.345,
    fontStyle: "normal",
    fontWeight: "400",
    lineHeight: 18.851,
  },

  container2_3_text3: {
    color: "#FFF",
    fontFamily: "Poppins", // Make sure Poppins font is loaded or available
    fontSize: 18.683,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 28.277,
  },
  container2_3_2: {
    flexDirection: "row",
    alignItems: "center",
    gap: 210.31,
  },
  container2_3_Text: {
    color: "rgba(255, 255, 255, 0.40)",
    fontFamily: "Poppins", // Ensure Poppins font is loaded or available
    fontSize: 10.676,
    fontStyle: "normal",
    fontWeight: "600",
    lineHeight: 14, // React Native doesn't support 'normal', so use a numeric value
  },
  webViewContainer: {
    position: "absolute",
    zIndex: 1000000,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
});


================================================
File: frontend/components/Login.js
================================================
import React from "react";
import {
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Button,
  View,
  Text,
  Alert,
  ScrollView,
} from "react-native";
import { WebView } from "react-native-webview";
import { useState } from "react";

const IPAddress = "10.100.17.206";

export default function Logic() {
  const [showWebView, setShowWebView] = useState(false);
  const [anonAadhaar, setAnonAadhaar] = useState({});

  console.log(anonAadhaar);

  const handleProofGeneration = (event) => {
    // const data = JSON.parse(event.nativeEvent);
    console.log(event.nativeEvent.data);
    // setAnonAadhaar(data.data);
    // setShowWebView(false);
  };

  return (
    <ScrollView>
      <View style={styles.main_container}>
     
         
            
            {!showWebView ? (
              <View style={styles.container2_1_button}>
                <TouchableOpacity
                  style={styles.button}
                  onPress={() => {
                    setShowWebView(true);
                  }}
                >
                  <Text style={styles.buttonText}>Add Amount</Text>
                </TouchableOpacity>
              </View>
            ) : (
              <View style={styles.webViewContainer}>
                <WebView
                  source={{ uri: `http://${IPAddress}:3000` }}
                  style={styles.webView}
                  onNavigationStateChange={(navState) => {
                    if (navState.url === `http://${IPAddress}:3000/close`) {
                      setShowWebView(false); // Close WebView on specific URL
                    }
                  }}
                  onMessage={handleProofGeneration}
                />
              </View>
            )}
         

          

        

        <TouchableOpacity
          style={styles.button2}
          onPress={() => console.log("Button pressed")}
        >
          <Text style={styles.buttonText2}>continue</Text>
        </TouchableOpacity>
      </View>
     
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    width: 393,
    height: 850.49,
    alignItems: "center",
    justifyContent: "center",

    backgroundColor: "black",
    gap: 28.024,
  },

  container2_1: {
    paddingLeft: 16.68,
    width: 393,
    height: 850.49,
    borderRadius: 10.622,
    backgroundColor: "#191919",
    

    
  },
  


  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 326.277,
    height: 44.037,
    backgroundColor: '#191919', // Button color
    backgroundColor: '#ffffff', // Button color
    paddingVertical: 10,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText: {
    color: '#000000',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  },
  
  webViewContainer: {
    position: "absolute",
    zIndex: 1000000,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
});


================================================
File: frontend/components/Page1.js
================================================
import React from 'react';
import { StyleSheet, TextInput, TouchableOpacity, Button, View, Text, Alert } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons'; // Install if not already added
import Svg, { Path } from 'react-native-svg';
export default function page1() {
  return (
    <>
      <View style={styles.main_container}>

        <View style={styles.container4}>
        <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 24 24" fill="none">
        <Path
          d="M22.5 10.5H5.74501L13.065 3.17999C13.65 2.59499 13.65 1.63499 13.065 1.04999C12.9262 0.910938 12.7614 0.800617 12.5799 0.725345C12.3985 0.650073 12.204 0.611328 12.0075 0.611328C11.8111 0.611328 11.6165 0.650073 11.4351 0.725345C11.2536 0.800617 11.0888 0.910938 10.95 1.04999L1.06501 10.935C0.925954 11.0738 0.815632 11.2386 0.74036 11.4201C0.665088 11.6015 0.626343 11.796 0.626343 11.9925C0.626343 12.1889 0.665088 12.3835 0.74036 12.5649C0.815632 12.7464 0.925954 12.9112 1.06501 13.05L10.95 22.935C11.0889 23.0739 11.2537 23.184 11.4352 23.2592C11.6166 23.3343 11.8111 23.373 12.0075 23.373C12.2039 23.373 12.3984 23.3343 12.5798 23.2592C12.7613 23.184 12.9261 23.0739 13.065 22.935C13.2039 22.7961 13.314 22.6313 13.3892 22.4498C13.4644 22.2684 13.503 22.0739 13.503 21.8775C13.503 21.6811 13.4644 21.4866 13.3892 21.3052C13.314 21.1237 13.2039 20.9589 13.065 20.82L5.74501 13.5H22.5C23.325 13.5 24 12.825 24 12C24 11.175 23.325 10.5 22.5 10.5Z"
          fill="white"
        />
      </Svg>
        </View>


        <View style={styles.container1}>



          <Text style={styles.container1_headtext}>New FASTag</Text>




          <View style={styles.container}>
            <View style={styles.box}>
              <Text>Box 1</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 2</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 3</Text>
            </View>
          </View>




          <View style={styles.container1_details}>
            <Text style={styles.container1_details_text1}>Upload Documents</Text>
            <Text style={styles.container1_details_text2}>Please Upload you ID proof Which are {'\n'}updated with latest details</Text>
          </View>



        </View>



        <View style={styles.container2}>

        <View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}>Application Name</Text>
              <TextInput
                style={styles.small_text_box}
                placeholder="Samay Raina"
              ></TextInput>
            </View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}>Mobile Number</Text>
              <TextInput
                style={styles.small_text_box}
                placeholder="Samay Raina"
              ></TextInput>
            </View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}>Email Id</Text>
              <TextInput
                style={styles.small_text_box}
                placeholder="lasan34@gmail.com"
              ></TextInput>
            </View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}>Date of Birth</Text>
              <TextInput
                style={styles.small_text_box}
                placeholder="DDMMYYYY"
              ></TextInput>
            </View>
          </View >
          <View>
            <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
            <Text style={styles.buttonText}>continue</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.button2} onPress={() => console.log('Button pressed')}>
            <Text style={styles.buttonText2}>back</Text>
          </TouchableOpacity>
          </View>










        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#000000',
    gap: 28.024,
  },

  container4: {
    marginTop: 36.44,
    marginBottom: 28,
    width: 332,
    marginRight: '0',
  },
  whiteBox: {
    width: 24,
    height: 24,
    backgroundColor: 'white',
    borderWidth: 1, // Optional: To make the box's border visible
    borderColor: '#ddd', // Optional: Light border color
  },
  container1: {

    gap: 33,
  },

  container1_headtext: {

    color: '#FFF', // Hex color
    fontFamily: 'Poppins', // Ensure the Poppins font is installed and linked
    fontSize: 24.02, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '700', // Medium font weight
    lineHeight: 24.02, // Line height in dp
     // Default value
  },
  container: {
    flexDirection: 'row', // Aligns items horizontally
    justifyContent: 'space-between', // Spaces the boxes evenly
    gap: 10,
  },
  box: {
    backgroundColor: 'white', // White background for each box
    borderWidth: 1, // Border to define the box
    borderColor: 'gray', // Border color
    width: 104, // Width of each box
    height: 4, // Height of each box
    justifyContent: 'center', // Center content vertically
    alignItems: 'center', // Center content horizontally
    borderRadius: 5,

  },
  container1_details: {

  },
  container1_details_text1: {

    marginTop: 4,
    marginBottom: 4,
    color: '#FFF', // White color in hex
    fontFamily: 'Poppins', // Ensure Poppins is linked properly
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '600', // Medium weight
    lineHeight: 28.024, // Line height in dp
  },
  container1_details_text2: {
    width: 317.6,
    marginTop: 6.67,
    marginBottom: 6.67,
    color: 'rgba(255, 255, 255, 0.68)', // RGBA color for transparency
    fontFamily: 'Poppins', // Ensure the Poppins font is properly installed and linked
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '400', // Regular font weight
    lineHeight: 22.686, // Line height in dp
  },












  //css for text boxs
  container2: {

    gap: 8,
  },
  small_box: {
    flexDirection: 'column', // Aligns children vertically
    width: 325.609, // Width in dp
    alignItems: 'center' // Aligns children to the start of the container
  },
  small_text_box: {

    paddingLeft: 12, //
    width: 326.277,
    height: 36.031,
    borderRadius: 8.007,
    backgroundColor: '#191919',
    color: '#919191',

  },
  small_text: {
    width: 312,
    padding: '6.67',
    color: 'rgba(255, 255, 255, 0.90)', // Use the RGBA value directly
    fontFamily: 'Poppins', // Ensure Poppins is properly linked in your project
    fontSize: 13.345,
    fontStyle: 'normal', // Default value, can be omitted if not changing
    fontWeight: '600',
    lineHeight: 36.502, // Line height in dp
  },
  container5: {
    flexDirection: 'row',  // Align children in a row
    justifyContent: 'space-between',  // Distribute boxes evenly
    gap: 24.02,
  },
  box2: {
    width: 146.791,  // Set the width of the box
    height: 146.791,  // Set the height of the box
    backgroundColor: '#1F1F1F',  // Set the box color to white
    borderWidth: 1,  // Optional: add a border to make the boxes visible

    borderRadius: 10, // Optional:
  },




  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 326.277,
    height: 44.037,
    backgroundColor: '#191919', // Button color
    backgroundColor: '#ffffff', // Button color
    paddingVertical: 10,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText: {
    color: '#000000',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  },
  button2: {
    width: 326.277,
    height: 44.037,
    backgroundColor: '#1F1F1F', // Button color
    paddingVertical: 12,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText2: {
    color: '#FFFFFF',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  }
});


================================================
File: frontend/components/Page2.js
================================================
import React from 'react';
import { StyleSheet, TextInput, TouchableOpacity, Button, View, Text, Alert } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons'; // Install if not already added
import Svg, { Path } from 'react-native-svg';
export default function page1() {
  return (
    <>
      <View style={styles.main_container}>

        <View style={styles.container4}>
        <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 24 24" fill="none">
        <Path
          d="M22.5 10.5H5.74501L13.065 3.17999C13.65 2.59499 13.65 1.63499 13.065 1.04999C12.9262 0.910938 12.7614 0.800617 12.5799 0.725345C12.3985 0.650073 12.204 0.611328 12.0075 0.611328C11.8111 0.611328 11.6165 0.650073 11.4351 0.725345C11.2536 0.800617 11.0888 0.910938 10.95 1.04999L1.06501 10.935C0.925954 11.0738 0.815632 11.2386 0.74036 11.4201C0.665088 11.6015 0.626343 11.796 0.626343 11.9925C0.626343 12.1889 0.665088 12.3835 0.74036 12.5649C0.815632 12.7464 0.925954 12.9112 1.06501 13.05L10.95 22.935C11.0889 23.0739 11.2537 23.184 11.4352 23.2592C11.6166 23.3343 11.8111 23.373 12.0075 23.373C12.2039 23.373 12.3984 23.3343 12.5798 23.2592C12.7613 23.184 12.9261 23.0739 13.065 22.935C13.2039 22.7961 13.314 22.6313 13.3892 22.4498C13.4644 22.2684 13.503 22.0739 13.503 21.8775C13.503 21.6811 13.4644 21.4866 13.3892 21.3052C13.314 21.1237 13.2039 20.9589 13.065 20.82L5.74501 13.5H22.5C23.325 13.5 24 12.825 24 12C24 11.175 23.325 10.5 22.5 10.5Z"
          fill="white"
        />
      </Svg>
        </View>


        <View style={styles.container1}>



          <Text style={styles.container1_headtext}>New FASTag</Text>




          <View style={styles.container}>
            <View style={styles.box}>
              <Text>Box 1</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 2</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 3</Text>
            </View>
          </View>




          <View style={styles.container1_details}>
            <Text style={styles.container1_details_text1}>Upload Documents</Text>
            <Text style={styles.container1_details_text2}>Please Upload you ID proof Which are {'\n'}updated with latest details</Text>
          </View>



        </View>



        <View style={styles.container2}>


        <View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}> ID Proof</Text>
              <View style={styles.container5}>
                <View style={styles.box2}></View>
                <View style={styles.box2}></View>
              </View>

            </View>

          </View >
          <View>
            <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
              <Text style={styles.buttonText}>continue</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.button2} onPress={() => console.log('Button pressed')}>
              <Text style={styles.buttonText2}>back</Text>
            </TouchableOpacity>
          </View>


        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#000000',
    gap: 28.024,
  },

  container4: {
    marginTop: 36.44,
    marginBottom: 28,
    width: 332,
    marginRight: '0',
  },
  whiteBox: {
    width: 24,
    height: 24,
    backgroundColor: 'white',
    borderWidth: 1, // Optional: To make the box's border visible
    borderColor: '#ddd', // Optional: Light border color
  },
  container1: {

    gap: 33,
  },

  container1_headtext: {

    color: '#FFF', // Hex color
    fontFamily: 'Poppins', // Ensure the Poppins font is installed and linked
    fontSize: 24.02, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '700', // Medium font weight
    lineHeight: 24.02, // Line height in dp
     // Default value
  },
  container: {
    flexDirection: 'row', // Aligns items horizontally
    justifyContent: 'space-between', // Spaces the boxes evenly
    gap: 10,
  },
  box: {
    backgroundColor: 'white', // White background for each box
    borderWidth: 1, // Border to define the box
    borderColor: 'gray', // Border color
    width: 104, // Width of each box
    height: 4, // Height of each box
    justifyContent: 'center', // Center content vertically
    alignItems: 'center', // Center content horizontally
    borderRadius: 5,

  },
  container1_details: {

  },
  container1_details_text1: {

    marginTop: 4,
    marginBottom: 4,
    color: '#FFF', // White color in hex
    fontFamily: 'Poppins', // Ensure Poppins is linked properly
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '600', // Medium weight
    lineHeight: 28.024, // Line height in dp
  },
  container1_details_text2: {
    width: 317.6,
    marginTop: 6.67,
    marginBottom: 6.67,
    color: 'rgba(255, 255, 255, 0.68)', // RGBA color for transparency
    fontFamily: 'Poppins', // Ensure the Poppins font is properly installed and linked
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '400', // Regular font weight
    lineHeight: 22.686, // Line height in dp
  },












  //css for text boxs
  container2: {

    gap: 8,
  },
  small_box: {
    flexDirection: 'column', // Aligns children vertically
    width: 325.609, // Width in dp
    alignItems: 'center' // Aligns children to the start of the container
  },
  small_text_box: {

    paddingLeft: 12, //
    width: 326.277,
    height: 36.031,
    borderRadius: 8.007,
    backgroundColor: '#191919',
    color: '#919191',

  },
  small_text: {
    width: 312,
    padding: '6.67',
    color: 'rgba(255, 255, 255, 0.90)', // Use the RGBA value directly
    fontFamily: 'Poppins', // Ensure Poppins is properly linked in your project
    fontSize: 13.345,
    fontStyle: 'normal', // Default value, can be omitted if not changing
    fontWeight: '600',
    lineHeight: 36.502, // Line height in dp
  },
  container5: {
    flexDirection: 'row',  // Align children in a row
    justifyContent: 'space-between',  // Distribute boxes evenly
    gap: 24.02,
  },
  box2: {
    width: 146.791,  // Set the width of the box
    height: 146.791,  // Set the height of the box
    backgroundColor: '#1F1F1F',  // Set the box color to white
    borderWidth: 1,  // Optional: add a border to make the boxes visible

    borderRadius: 10, // Optional:
  },




  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 326.277,
    height: 44.037,
    backgroundColor: '#191919', // Button color
    backgroundColor: '#ffffff', // Button color
    paddingVertical: 10,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText: {
    color: '#000000',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  },
  button2: {
    width: 326.277,
    height: 44.037,
    backgroundColor: '#1F1F1F', // Button color
    paddingVertical: 12,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText2: {
    color: '#FFFFFF',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  }
});


================================================
File: frontend/components/Page3.js
================================================
import React from 'react';
import { StyleSheet, TextInput, TouchableOpacity, Button, View, Text, Alert } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons'; // Install if not already added
import Svg, { Path } from 'react-native-svg';
export default function page1() {
  return (
    <>
      <View style={styles.main_container}>

        <View style={styles.container4}>
        <View style={styles.container4}>
        <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 24 24" fill="none">
        <Path
          d="M22.5 10.5H5.74501L13.065 3.17999C13.65 2.59499 13.65 1.63499 13.065 1.04999C12.9262 0.910938 12.7614 0.800617 12.5799 0.725345C12.3985 0.650073 12.204 0.611328 12.0075 0.611328C11.8111 0.611328 11.6165 0.650073 11.4351 0.725345C11.2536 0.800617 11.0888 0.910938 10.95 1.04999L1.06501 10.935C0.925954 11.0738 0.815632 11.2386 0.74036 11.4201C0.665088 11.6015 0.626343 11.796 0.626343 11.9925C0.626343 12.1889 0.665088 12.3835 0.74036 12.5649C0.815632 12.7464 0.925954 12.9112 1.06501 13.05L10.95 22.935C11.0889 23.0739 11.2537 23.184 11.4352 23.2592C11.6166 23.3343 11.8111 23.373 12.0075 23.373C12.2039 23.373 12.3984 23.3343 12.5798 23.2592C12.7613 23.184 12.9261 23.0739 13.065 22.935C13.2039 22.7961 13.314 22.6313 13.3892 22.4498C13.4644 22.2684 13.503 22.0739 13.503 21.8775C13.503 21.6811 13.4644 21.4866 13.3892 21.3052C13.314 21.1237 13.2039 20.9589 13.065 20.82L5.74501 13.5H22.5C23.325 13.5 24 12.825 24 12C24 11.175 23.325 10.5 22.5 10.5Z"
          fill="white"
        />
      </Svg>
        </View>
        </View>


        <View style={styles.container1}>



          <Text style={styles.container1_headtext}>New FASTag</Text>




          <View style={styles.container}>
            <View style={styles.box}>
              <Text>Box 1</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 2</Text>
            </View>
            <View style={styles.box}>
              <Text>Box 3</Text>
            </View>
          </View>




          <View style={styles.container1_details}>
            <Text style={styles.container1_details_text1}>Upload Documents</Text>
            <Text style={styles.container1_details_text2}>Please Upload you ID proof Which are {'\n'}updated with latest details</Text>
          </View>



        </View>



        <View style={styles.container2}>

          <View>
            <View style={styles.small_box} >
              <Text style={styles.small_text}> ID Proof</Text>
              <View style={styles.container5}>
                <View style={styles.box2}></View>
                <View style={styles.box2}></View>
              </View>

            </View>

          </View >
          <View>
            <TouchableOpacity style={styles.button} onPress={() => console.log('Button pressed')}>
              <Text style={styles.buttonText}>continue</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.button2} onPress={() => console.log('Button pressed')}>
              <Text style={styles.buttonText2}>back</Text>
            </TouchableOpacity>
          </View>

        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  main_container: {
    paddingTop: 47.44,
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#000000',
    gap: 28.024,
  },

  container4: {
    marginTop: 36.44,
    marginBottom: 28,
    width: 332,
    marginRight: '0',
  },
  whiteBox: {
    width: 24,
    height: 24,
    backgroundColor: 'white',
    borderWidth: 1, // Optional: To make the box's border visible
    borderColor: '#ddd', // Optional: Light border color
  },
  container1: {

    gap: 33,
  },

  container1_headtext: {

    color: '#FFF', // Hex color
    fontFamily: 'Poppins', // Ensure the Poppins font is installed and linked
    fontSize: 24.02, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '600', // Medium font weight
    lineHeight: 24.02, // Line height in dp
  },
  container: {
    flexDirection: 'row', // Aligns items horizontally
    justifyContent: 'space-between', // Spaces the boxes evenly
    gap: 10,
  },
  box: {
    backgroundColor: 'white', // White background for each box
    borderWidth: 1, // Border to define the box
    borderColor: 'gray', // Border color
    width: 104, // Width of each box
    height: 4, // Height of each box
    justifyContent: 'center', // Center content vertically
    alignItems: 'center', // Center content horizontally
    borderRadius: 5,

  },
  container1_details: {

  },
  container1_details_text1: {

    marginTop: 4,
    marginBottom: 4,
    color: '#FFF', // White color in hex
    fontFamily: 'Poppins', // Ensure Poppins is linked properly
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '500', // Medium weight
    lineHeight: 28.024, // Line height in dp
  },
  container1_details_text2: {
    width: 317.6,
    marginTop: 6.67,
    marginBottom: 6.67,
    color: 'rgba(255, 255, 255, 0.68)', // RGBA color for transparency
    fontFamily: 'Poppins', // Ensure the Poppins font is properly installed and linked
    fontSize: 16.014, // Font size in dp
    fontStyle: 'normal', // Default value, can be omitted
    fontWeight: '400', // Regular font weight
    lineHeight: 22.686, // Line height in dp
  },












  //css for text boxs
  container2: {

    gap: 8,
  },
  small_box: {
    flexDirection: 'column', // Aligns children vertically
    width: 325.609, // Width in dp
    alignItems: 'center' // Aligns children to the start of the container
  },
  small_text_box: {

    paddingLeft: 12, //
    width: 326.277,
    height: 36.031,
    borderRadius: 8.007,
    backgroundColor: '#191919',
    color: '#919191',

  },
  small_text: {
    width: 312,
    padding: '6.67',
    color: 'rgba(255, 255, 255, 0.90)', // Use the RGBA value directly
    fontFamily: 'Poppins', // Ensure Poppins is properly linked in your project
    fontSize: 13.345,
    fontStyle: 'normal', // Default value, can be omitted if not changing
    fontWeight: '500',
    lineHeight: 36.502, // Line height in dp
  },
  container5: {
    flexDirection: 'row',  // Align children in a row
    justifyContent: 'space-between',  // Distribute boxes evenly
    gap: 24.02,
  },
  box2: {
    width: 146.791,  // Set the width of the box
    height: 146.791,  // Set the height of the box
    backgroundColor: '#1F1F1F',  // Set the box color to white
    borderWidth: 1,  // Optional: add a border to make the boxes visible

    borderRadius: 10, // Optional:
  },




  button: {
    marginTop: 26,
    marginBottom: 10,
    width: 326.277,
    height: 44.037,
    backgroundColor: '#191919', // Button color
    backgroundColor: '#ffffff', // Button color
    paddingVertical: 10,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText: {
    color: '#000000',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  },
  button2: {
    width: 326.277,
    height: 44.037,
    backgroundColor: '#1F1F1F', // Button color
    paddingVertical: 12,         // Vertical padding
    paddingHorizontal: 20,       // Horizontal padding
    borderRadius: 8,            // Rounded corners
    alignItems: 'center',       // Center the text inside the button
    justifyContent: 'center',   // Center vertically
  },
  buttonText2: {
    color: '#FFFFFF',
    fontFamily: 'Poppins',             // Text color
    fontSize: 16,
    fontWeight: 'Medium',         // Text weight
  }
});


================================================
File: frontend/components/Profile.js
================================================
import React from 'react';
import { StyleSheet, TextInput, TouchableOpacity, Button, View, Text, Alert } from 'react-native';
import Svg, { Path } from 'react-native-svg';
export default function page1() {
    return (
        <>
            <View style={styles.main_container}>

                <View style={styles.container4}>
                    <View>
                    <Svg xmlns="http://www.w3.org/2000/svg" width={20} height={20} viewBox="0 0 24 24" fill="none">
        <Path
          d="M22.5 10.5H5.74501L13.065 3.17999C13.65 2.59499 13.65 1.63499 13.065 1.04999C12.9262 0.910938 12.7614 0.800617 12.5799 0.725345C12.3985 0.650073 12.204 0.611328 12.0075 0.611328C11.8111 0.611328 11.6165 0.650073 11.4351 0.725345C11.2536 0.800617 11.0888 0.910938 10.95 1.04999L1.06501 10.935C0.925954 11.0738 0.815632 11.2386 0.74036 11.4201C0.665088 11.6015 0.626343 11.796 0.626343 11.9925C0.626343 12.1889 0.665088 12.3835 0.74036 12.5649C0.815632 12.7464 0.925954 12.9112 1.06501 13.05L10.95 22.935C11.0889 23.0739 11.2537 23.184 11.4352 23.2592C11.6166 23.3343 11.8111 23.373 12.0075 23.373C12.2039 23.373 12.3984 23.3343 12.5798 23.2592C12.7613 23.184 12.9261 23.0739 13.065 22.935C13.2039 22.7961 13.314 22.6313 13.3892 22.4498C13.4644 22.2684 13.503 22.0739 13.503 21.8775C13.503 21.6811 13.4644 21.4866 13.3892 21.3052C13.314 21.1237 13.2039 20.9589 13.065 20.82L5.74501 13.5H22.5C23.325 13.5 24 12.825 24 12C24 11.175 23.325 10.5 22.5 10.5Z"
          fill="white"
        />
      </Svg>
                    </View>
                </View>
                <View style={styles.profile_thing}>
                <View style={styles.circle} />
                <Text style={styles.circle_text}>Samay raina</Text>
                </View>
               
                <View style={styles.small_} >
                    <View style={styles.small_box} >
                        <Text style={styles.small_text}> Mobile Number</Text>
                        <Text
                            style={styles.small_text_box}
                        >Samay raina</Text>
                    </View>
                    <View style={styles.small_box} >
                        <Text style={styles.small_text}> Address</Text>
                        <Text
                            style={styles.small_text_box}
                        ></Text>
                    </View> 
                    <View style={styles.small_box_}>
                        <View style={styles.small_box_1} >
                            <Text style={styles.small_text_1}> Pin Code</Text>
                            <Text
                                style={styles.small_text_box_1}
                            ></Text>
                        </View>
                        <View style={styles.small_box_1} >
                            <Text style={styles.small_text_1}> City</Text>
                            <Text
                                style={styles.small_text_box_1}
                            ></Text>
                        </View>
                    </View>
                </View>


            </View>

        </>
    );
}

const styles = StyleSheet.create({
    main_container: {
        paddingTop: 47.44,
        flex: 1,
        alignItems: 'center',
        backgroundColor: '#000000',
        gap: 20,
    },

    container4: {
        marginTop: 36.44,
        marginBottom: 28,
        width: 332,
        marginRight: '0',
    },
    whiteBox: {
        width: 24,
        height: 24,
        backgroundColor: 'white',
        borderWidth: 1, // Optional: To make the box's border visible
        borderColor: '#ddd', // Optional: Light border color
    },

    profile_thing:{
        alignItems: 'center',
gap: -6,
    },
    circle: {
        width: 106.757, // Diameter of the circle
        height: 106.757, // Same as width to make it a circle
        borderRadius: 100, // Half of width/height
        backgroundColor: '#191919', // White color for the circle
        borderWidth: 1, // Optional: border for better visibility
        borderColor: 'black', // Optional: color of the border
    },

    circle_text: {
        color: '#FFF', // White text color
        textAlign: 'center', // Center alignment
        fontFamily: 'Lexend', // Font family
        fontSize: 24.02, // Font size
        fontStyle: 'normal', // Font style
        fontWeight: '400', // Font weight
        lineHeight: 61.921, // Line height
      
    },










    //css for text boxs
    container2: {

        gap: 8,
    },
    small_box: {
        flexDirection: 'column', // Aligns children vertically
        width: 325.609, // Width in dp
        alignItems: 'center', // Aligns children to the start of the container
       

    },
    small_text_box: {

        paddingLeft: 12, //
        width: 326.277,
        height: 36.031,
        borderRadius: 8.007,
        backgroundColor: '#191919',
        color: '#919191',


    },
    small_text: {

        width: 328,
        padding: '6.67',
        color: 'rgba(255, 255, 255, 0.90)', // Use the RGBA value directly
        fontFamily: 'Poppins', // Ensure Poppins is properly linked in your project
        fontSize: 14.679,
        fontStyle: 'normal', // Default value, can be omitted if not changing
        fontWeight: '500',
        lineHeight: 36.502, // Line height in dp
    },
    small_text_box_1: {

    },


    small_box_: {
        width: 331.615,
        flexDirection: 'row',
        alignItems: 'center',
        gap: 14,
    },
    small_text_box_1: {

        paddingLeft: 12, //
        width: 155.136,
        height: 36.031,
        borderRadius: 8.007,
        backgroundColor: '#191919',
        color: '#919191',
    },
    small_text_1: {

        width: 155.136,
        padding: '6.67',
        color: 'rgba(255, 255, 255, 0.90)', // Use the RGBA value directly
        fontFamily: 'Poppins', // Ensure Poppins is properly linked in your project
        fontSize: 14.679,
        fontStyle: 'normal', // Default value, can be omitted if not changing
        fontWeight: '500',
        lineHeight: 36.502, // Line height in dp
    },
    small_text_box_1: {
        paddingLeft: 12, //
        width: 155.136,
        height: 36.031,
        borderRadius: 8.007,
        backgroundColor: '#191919',
        color: '#919191',
    },


    button: {
        marginTop: 26,
        marginBottom: 10,
        width: 326.277,
        height: 44.037,
        backgroundColor: '#191919', // Button color
        backgroundColor: '#ffffff', // Button color
        paddingVertical: 10,         // Vertical padding
        paddingHorizontal: 20,       // Horizontal padding
        borderRadius: 8,            // Rounded corners
        alignItems: 'center',       // Center the text inside the button
        justifyContent: 'center',   // Center vertically
    },
    buttonText: {
        color: '#000000',
        fontFamily: 'Poppins',             // Text color
        fontSize: 16,
        fontWeight: 'Medium',         // Text weight
    },
    button2: {
        width: 326.277,
        height: 44.037,
        backgroundColor: '#1F1F1F', // Button color
        paddingVertical: 12,         // Vertical padding
        paddingHorizontal: 20,       // Horizontal padding
        borderRadius: 8,            // Rounded corners
        alignItems: 'center',       // Center the text inside the button
        justifyContent: 'center',   // Center vertically
    },
    buttonText2: {
        color: '#FFFFFF',
        fontFamily: 'Poppins',             // Text color
        fontSize: 16,
        fontWeight: 'Medium',         // Text weight
    }
});


================================================
File: frontend/constants/index.js
================================================
export const walletManager = {
  address: "0x256Bac4CCD510f812efAE680a61e6Ebd6356F5EA",
  abi: [
    {
      inputs: [
        {
          internalType: "address",
          name: "_entryPoint",
          type: "address",
        },
      ],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [],
      name: "WalletAlreadyExists",
      type: "error",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "bytes",
          name: "user",
          type: "bytes",
        },
        {
          indexed: true,
          internalType: "string",
          name: "carId",
          type: "string",
        },
        {
          indexed: false,
          internalType: "address",
          name: "wallet",
          type: "address",
        },
      ],
      name: "WalletCreated",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      name: "carIdToWallet",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "userProof",
          type: "bytes",
        },
        {
          internalType: "string",
          name: "carId",
          type: "string",
        },
      ],
      name: "createWalletForCar",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "userProof",
          type: "bytes",
        },
      ],
      name: "getProfile",
      outputs: [
        {
          components: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "gender",
              type: "string",
            },
            {
              internalType: "string",
              name: "city",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "pincode",
              type: "uint256",
            },
          ],
          internalType: "struct WalletManager.Person",
          name: "",
          type: "tuple",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "user",
          type: "bytes",
        },
      ],
      name: "getUserCars",
      outputs: [
        {
          internalType: "string[]",
          name: "",
          type: "string[]",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "carId",
          type: "string",
        },
      ],
      name: "getWalletForCar",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "userProof",
          type: "bytes",
        },
        {
          internalType: "string",
          name: "_name",
          type: "string",
        },
        {
          internalType: "string",
          name: "_gender",
          type: "string",
        },
        {
          internalType: "string",
          name: "_city",
          type: "string",
        },
        {
          internalType: "uint256",
          name: "_pincode",
          type: "uint256",
        },
      ],
      name: "setProfile",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "",
          type: "bytes",
        },
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      name: "userCars",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
  ],
};

export const userWallet = {
  address: "",
  abi: [
    {
      inputs: [
        {
          internalType: "address",
          name: "entryPoint",
          type: "address",
        },
      ],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [],
      name: "ECDSAInvalidSignature",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "length",
          type: "uint256",
        },
      ],
      name: "ECDSAInvalidSignatureLength",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "bytes32",
          name: "s",
          type: "bytes32",
        },
      ],
      name: "ECDSAInvalidSignatureS",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "",
          type: "bytes",
        },
      ],
      name: "MinimalAccount__CallFailed",
      type: "error",
    },
    {
      inputs: [],
      name: "MinimalAccount__OnlyEntryPointAllowed",
      type: "error",
    },
    {
      inputs: [],
      name: "MinimalAccount__OnlyEntryPointOrOwnerAllowed",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
      ],
      name: "OwnableInvalidOwner",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address",
        },
      ],
      name: "OwnableUnauthorizedAccount",
      type: "error",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "previousOwner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "OwnershipTransferred",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "dest",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "functionData",
          type: "bytes",
        },
      ],
      name: "execute",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "owner",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "renounceOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "transferOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          components: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes",
            },
            {
              internalType: "bytes32",
              name: "accountGasLimits",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "preVerificationGas",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "gasFees",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "paymasterAndData",
              type: "bytes",
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes",
            },
          ],
          internalType: "struct PackedUserOperation",
          name: "userOp",
          type: "tuple",
        },
        {
          internalType: "bytes32",
          name: "userOpHash",
          type: "bytes32",
        },
        {
          internalType: "uint256",
          name: "missingAccountFunds",
          type: "uint256",
        },
      ],
      name: "validateUserOp",
      outputs: [
        {
          internalType: "uint256",
          name: "validationData",
          type: "uint256",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      stateMutability: "payable",
      type: "receive",
    },
  ],
};

================================================
File: web-nfc/README.md
================================================
# 🏗 Scaffold-ETH 2

<h4 align="center">
  <a href="https://docs.scaffoldeth.io">Documentation</a> |
  <a href="https://scaffoldeth.io">Website</a>
</h4>

🧪 An open-source, up-to-date toolkit for building decentralized applications (dapps) on the Ethereum blockchain. It's designed to make it easier for developers to create and deploy smart contracts and build user interfaces that interact with those contracts.

⚙️ Built using NextJS, RainbowKit, Foundry, Wagmi, Viem, and Typescript.

- ✅ **Contract Hot Reload**: Your frontend auto-adapts to your smart contract as you edit it.
- 🪝 **[Custom hooks](https://docs.scaffoldeth.io/hooks/)**: Collection of React hooks wrapper around [wagmi](https://wagmi.sh/) to simplify interactions with smart contracts with typescript autocompletion.
- 🧱 [**Components**](https://docs.scaffoldeth.io/components/): Collection of common web3 components to quickly build your frontend.
- 🔥 **Burner Wallet & Local Faucet**: Quickly test your application with a burner wallet and local faucet.
- 🔐 **Integration with Wallet Providers**: Connect to different wallet providers and interact with the Ethereum network.

![Debug Contracts tab](https://github.com/scaffold-eth/scaffold-eth-2/assets/55535804/b237af0c-5027-4849-a5c1-2e31495cccb1)

## Requirements

Before you begin, you need to install the following tools:

- [Node (>= v18.18)](https://nodejs.org/en/download/)
- Yarn ([v1](https://classic.yarnpkg.com/en/docs/install/) or [v2+](https://yarnpkg.com/getting-started/install))
- [Git](https://git-scm.com/downloads)

## Quickstart

To get started with Scaffold-ETH 2, follow the steps below:

1. Install dependencies if it was skipped in CLI:

```
cd my-dapp-example
yarn install
```

2. Run a local network in the first terminal:

```
yarn chain
```

This command starts a local Ethereum network using Foundry. The network runs on your local machine and can be used for testing and development. You can customize the network configuration in `packages/foundry/foundry.toml`.

3. On a second terminal, deploy the test contract:

```
yarn deploy
```

This command deploys a test smart contract to the local network. The contract is located in `packages/foundry/contracts` and can be modified to suit your needs. The `yarn deploy` command uses the deploy script located in `packages/foundry/script` to deploy the contract to the network. You can also customize the deploy script.

4. On a third terminal, start your NextJS app:

```
yarn start
```

Visit your app on: `http://localhost:3000`. You can interact with your smart contract using the `Debug Contracts` page. You can tweak the app config in `packages/nextjs/scaffold.config.ts`.

Run smart contract test with `yarn foundry:test`

- Edit your smart contracts in `packages/foundry/contracts`
- Edit your frontend homepage at `packages/nextjs/app/page.tsx`. For guidance on [routing](https://nextjs.org/docs/app/building-your-application/routing/defining-routes) and configuring [pages/layouts](https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts) checkout the Next.js documentation.
- Edit your deployment scripts in `packages/foundry/script`


## Documentation

Visit our [docs](https://docs.scaffoldeth.io) to learn how to start building with Scaffold-ETH 2.

To know more about its features, check out our [website](https://scaffoldeth.io).

## Contributing to Scaffold-ETH 2

We welcome contributions to Scaffold-ETH 2!

Please see [CONTRIBUTING.MD](https://github.com/scaffold-eth/scaffold-eth-2/blob/main/CONTRIBUTING.md) for more information and guidelines for contributing to Scaffold-ETH 2.

================================================
File: web-nfc/package.json
================================================
{
  "name": "se-2",
  "version": "0.0.1",
  "private": true,
  "workspaces": {
    "packages": [
      "packages/*"
    ]
  },
  "scripts": {
    "account": "yarn workspace @se-2/foundry account",
    "account:generate": "yarn workspace @se-2/foundry account:generate",
    "account:import": "yarn workspace @se-2/foundry account:import",
    "chain": "yarn workspace @se-2/foundry chain",
    "compile": "yarn workspace @se-2/foundry compile",
    "deploy": "yarn workspace @se-2/foundry deploy",
    "deploy:verify": "yarn workspace @se-2/foundry deploy:verify",
    "flatten": "yarn workspace @se-2/foundry flatten",
    "fork": "yarn workspace @se-2/foundry fork",
    "format": "yarn next:format && yarn foundry:format",
    "foundry:format": "yarn workspace @se-2/foundry format",
    "foundry:lint": "yarn workspace @se-2/foundry lint",
    "foundry:test": "yarn workspace @se-2/foundry test",
    "generate": "yarn account:generate",
    "postinstall": "husky install",
    "next:build": "yarn workspace @se-2/nextjs build",
    "next:check-types": "yarn workspace @se-2/nextjs check-types",
    "next:format": "yarn workspace @se-2/nextjs format",
    "next:lint": "yarn workspace @se-2/nextjs lint",
    "next:serve": "yarn workspace @se-2/nextjs serve",
    "precommit": "lint-staged",
    "start": "yarn workspace @se-2/nextjs dev",
    "test": "yarn foundry:test",
    "vercel": "yarn workspace @se-2/nextjs vercel",
    "vercel:yolo": "yarn workspace @se-2/nextjs vercel:yolo",
    "verify": "yarn workspace @se-2/foundry verify"
  },
  "devDependencies": {
    "husky": "~8.0.3",
    "lint-staged": "~13.2.2"
  },
  "engines": {
    "node": ">=18.18.0"
  },
  "packageManager": "yarn@4.5.3",
  "dependencies": {
    "@next/font": "^14.2.15"
  }
}


================================================
File: web-nfc/vercel.json
================================================
{
  "installCommand": "yarn install --frozen-lockfile",
  "buildCommand": "yarn next:build",
  "outputDirectory": "packages/nextjs/.next",
  "framework": "nextjs"
}

================================================
File: web-nfc/packages/core/package.json
================================================
{
  "name": "@anon-digilocker/core",
  "version": "1.0.0",
  "main": "dist/",
  "license": "MIT",
  "scripts": {
    "build": "tsup src/index.ts",
    "test": "npx ts-mocha test/**/*.test.ts --exit",
    "lint": "eslint --ext .js,.ts .",
    "format": "prettier --ignore-path .prettierignore --write \"**/*.+(js|ts|json)\"",
    "prepare": "cd ../.. && husky install",
    "test-publish": "yarn build && yarn lint && yarn test && npm publish --dry-run",
    "publishtonpm": "yarn build && yarn lint && yarn npm publish",
    "bump-to": "yarn version -i "
  },
  "files": [
    "./artifacts/verification_key.json",
    "./src/*",
    "./dist/*",
    "README.md",
    "LICENSE"
  ],
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org"
  },
  "dependencies": {
    "@anon-aadhaar/core": "^2.4.0",
    "@pcd/pcd-types": "^0.11.2",
    "@zk-email/helpers": "^6.1.2",
    "snarkjs": "^0.7.4",
    "uuid": "^10.0.0",
    "xmldsigjs": "^2.5.1"
  },
  "devDependencies": {
    "@types/chai": "^4.3.5",
    "@types/json-bigint": "^1.0.1",
    "@types/node": "^20.2.3",
    "@types/uuid": "^9.0.1",
    "@typescript-eslint/eslint-plugin": "^5.59.5",
    "@typescript-eslint/parser": "^5.59.5",
    "eslint": "^8.40.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-react": "^7.32.2",
    "prettier": "^2.8.8",
    "tsup": "^7.1.0",
    "typescript": "^5.0.4"
  },
  "packageManager": "yarn@4.5.3"
}


================================================
File: web-nfc/packages/core/tsconfig.json
================================================
{
  "extends": ["@pcd/tsconfig/ts-library.json"],
  "include": [".", "./test"],
  "exclude": ["./dist", "./build", "./node_modules"],
  "compilerOptions": {
    "target": "es2020"
  }
}

================================================
File: web-nfc/packages/core/src/constants.ts
================================================
export const CIRCOM_FIELD_P = BigInt("21888242871839275222246405745257275088548364400416034343698204186575808495617");

export const PUBKEY_HASH = "7159552241047614681013946344274430157054820687880791674287250194862110506098";


================================================
File: web-nfc/packages/core/src/core.ts
================================================
import { DisplayOptions, PCD, PCDPackage, SerializedPCD } from "@pcd/pcd-types";
import { ProverState } from "@anon-aadhaar/core/src/types";
import { convertRevealBigIntToString } from "@anon-aadhaar/core";
import {
  InitArgs,
  AnonDigiLockerTypeName,
  AnonDigiLockerClaim,
  AnonDigiLockerProof,
  AnonDigiLockerArgs,
} from "./types";
import { v4 as uuidv4 } from "uuid";
import { groth16 } from "snarkjs";
import JSONBig from "json-bigint";
import { AnonDigiLockerProver, ProverInferace } from "./prover";
import { PUBKEY_HASH } from "./constants";

export class AnonDigiLockerCore implements PCD<AnonDigiLockerClaim, AnonDigiLockerProof> {
  type = AnonDigiLockerTypeName;
  claim: AnonDigiLockerClaim;
  proof: AnonDigiLockerProof;
  id: string;

  public constructor(id: string, claim: AnonDigiLockerClaim, proof: AnonDigiLockerProof) {
    this.id = id;
    this.claim = claim;
    this.proof = proof;
  }
}

// initial function
let initArgs: InitArgs | undefined = undefined;
export async function init(args: InitArgs): Promise<void> {
  initArgs = args;
}

export async function prove(
  args: AnonDigiLockerArgs,
  updateState?: (state: ProverState) => void,
): Promise<AnonDigiLockerCore> {
  if (!initArgs) {
    throw new Error("cannot make Anon DigiLocker proof: init has not been called yet");
  }

  if (!args.signalHash.value) {
    throw new Error("Invalid signalHash argument");
  }

  const id = uuidv4();

  const prover: ProverInferace = new AnonDigiLockerProver(initArgs.wasmURL, initArgs.zkeyURL);

  const anonDigiLockerProof = await prover.proving(args, updateState);

  const anonDigiLockerClaim: AnonDigiLockerClaim = {
    pubKey: args.pubKey.value!,
    signalHash: args.signalHash.value,
    documentType: convertRevealBigIntToString(anonDigiLockerProof.documentType),
    reveal: convertRevealBigIntToString(anonDigiLockerProof.reveal) || null,
  };

  return new AnonDigiLockerCore(id, anonDigiLockerClaim, anonDigiLockerProof);
}

async function getVerifyKey() {
  if (!initArgs) {
    throw new Error("cannot make Anon DigiLocker proof: init has not been called yet");
  }

  const response = await fetch(initArgs.vkeyURL);
  if (!response.ok) {
    throw new Error(`Failed to fetch the verify key from server`);
  }

  const vk = await response.json();
  return vk;
}

export async function verify(pcd: AnonDigiLockerCore): Promise<boolean> {
  let pubkeyHash = PUBKEY_HASH;

  if (pcd.proof.pubkeyHash !== pubkeyHash) {
    throw new Error("VerificationError: public key mismatch.");
  }

  const vk = await getVerifyKey();

  return groth16.verify(
    vk,
    [
      pcd.proof.pubkeyHash,
      pcd.proof.nullifier,
      pcd.proof.documentType,
      pcd.proof.reveal,
      pcd.proof.nullifierSeed,
      pcd.proof.signalHash,
    ],
    pcd.proof.groth16Proof,
  );
}

export function serialize(pcd: AnonDigiLockerCore): Promise<SerializedPCD<AnonDigiLockerCore>> {
  return Promise.resolve({
    type: AnonDigiLockerTypeName,
    pcd: JSONBig().stringify({
      type: pcd.type,
      id: pcd.id,
      claim: pcd.claim,
      proof: pcd.proof,
    }),
  } as SerializedPCD<AnonDigiLockerCore>);
}

export async function deserialize(serialized: string): Promise<AnonDigiLockerCore> {
  return JSONBig().parse(serialized);
}

export function getDisplayOptions(pcd: AnonDigiLockerCore): DisplayOptions {
  return {
    header: "Anon DigiLocker Signature",
    displayName: "pcd-" + pcd.type,
  };
}

export const AnonDigiLockerCorePackage: PCDPackage<
  AnonDigiLockerClaim,
  AnonDigiLockerProof,
  AnonDigiLockerArgs,
  InitArgs
> = {
  name: AnonDigiLockerTypeName,
  getDisplayOptions,
  prove,
  init,
  verify,
  serialize,
  deserialize,
};


================================================
File: web-nfc/packages/core/src/hash.ts
================================================
import { BigNumber } from "@ethersproject/bignumber";
import { BytesLike, Hexable, zeroPad } from "@ethersproject/bytes";
import { keccak256 } from "@ethersproject/keccak256";
import { NumericString } from "snarkjs";

/**
 * Creates a keccak256 hash of a message compatible with the SNARK scalar modulus.
 * @param message The message to be hashed.
 * @returns The message digest.
 */
export function hash(message: BytesLike | Hexable | number | bigint): NumericString {
  message = BigNumber.from(message).toTwos(256).toHexString();

  message = zeroPad(message, 32);

  return (BigInt(keccak256(message)) >> BigInt(3)).toString() as NumericString;
}


================================================
File: web-nfc/packages/core/src/index.ts
================================================
export * from "./types";
export * from "./core";
export * from "./constants";
export * from "./input-generator";
export * from "./hash";


================================================
File: web-nfc/packages/core/src/input-generator.ts
================================================
// import crypto from "crypto";
import { Application, Parse, SignedXml } from "xmldsigjs";
import { sha256Pad, generatePartialSHA } from "@zk-email/helpers/dist/sha-utils";
import { ArgumentTypeName } from "@pcd/pcd-types";
import { Uint8ArrayToCharArray, bigIntToChunkedBytes } from "@zk-email/helpers/dist/binary-format";
import { CIRCOM_FIELD_P } from "./constants";
import { InputGenerationParams, AnonDigiLockerArgs } from "./types";
import { hash } from "./hash";

Application.setEngine("OpenSSL", globalThis.crypto);

export async function generateInput(xml: string, params: InputGenerationParams) {
  const {
    nullifierSeed,
    revealStart,
    revealEnd,
    maxInputLength = 512 * 3,
    rsaKeyBitsPerChunk = 121,
    rsaKeyNumChunks = 17,
  } = params;

  if (BigInt(nullifierSeed) > CIRCOM_FIELD_P) {
    throw new Error("Nullifier seed is larger than the max field size");
  }

  // Parse XML
  const doc = Parse(xml);
  const signature = doc.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#", "Signature");
  const signedXml = new SignedXml(doc);
  signedXml.LoadXml(signature[0]);

  // Extract public key from the XML
  // @ts-ignore
  const publicKey = (await signedXml.GetPublicKeys())[0];
  const publicKeyJWK = await globalThis.crypto.subtle.exportKey("jwk", publicKey);
  const pubKeyBigInt = BigInt("0x" + Buffer.from(publicKeyJWK.n as string, "base64").toString("hex"));

  // Get the signed data
  const references = signedXml.XmlSignature.SignedInfo.References.GetIterator();
  if (references.length !== 1) {
    throw new Error("XML should have exactly one reference");
  }
  // @ts-ignore
  const signedData: string = signedXml.ApplyTransforms(references[0].Transforms, doc.documentElement);

  // Precompute SHA-256 hash of signed data till <CertificateData> node
  const signedDataUint8 = Uint8Array.from(Buffer.from(signedData));
  const bodySHALength = Math.floor((signedDataUint8.length + 63 + 65) / 64) * 64;
  const [signedDataPadded, signedDataPaddedLength] = sha256Pad(
    signedDataUint8,
    Math.max(maxInputLength, bodySHALength),
  );
  const {
    bodyRemaining: signedDataAfterPrecompute,
    bodyRemainingLength: signedDataAfterPrecomputeLength,
    precomputedSha,
  } = generatePartialSHA({
    body: signedDataPadded,
    bodyLength: signedDataPaddedLength,
    selectorString: "<CertificateData>", // String to split the body
    maxRemainingBodyLength: maxInputLength,
  });

  // Extract SignedInfo node and signature
  // @ts-ignore
  const signedInfo = signedXml.TransformSignedInfo(signedXml);
  // @ts-ignore
  const signatureBuff = Buffer.from(signedXml.signature.SignatureValue);
  const signatureBigInt = BigInt("0x" + signatureBuff.toString("hex"));

  // ----- Local verification
  // Ensure data hash is present in SignedInfo and verify RSA
  // const signedDataHaser = crypto.createHash("sha256");
  // signedDataHaser.update(signedData);
  // const signedDataHash = signedDataHaser.digest("base64");
  const signedDataHash = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(signedData));
  const signedDataHashB64 = Buffer.from(signedDataHash).toString("base64");

  const dataHashIndex = signedInfo.indexOf(signedDataHashB64);
  if (dataHashIndex === -1) {
    throw new Error("Body hash not found SignedInfo");
  }

  // const sha1 = crypto.createHash("sha1");
  // sha1.update(Buffer.from(signedInfo));
  const sha1 = await crypto.subtle.digest("SHA-1", new TextEncoder().encode(signedInfo));

  const ASN1_PREFIX_SHA1 = Buffer.from("3021300906052b0e03021a05000414", "hex");
  const hashWithPrefx = Buffer.concat([ASN1_PREFIX_SHA1, Buffer.from(sha1)]);
  const paddingLength = 256 - hashWithPrefx.length - 3; // = 218; 3 bytes for 0x00 and 0x01 and 0x00
  const paddedMessage = Buffer.concat([
    Buffer.from([0x00, 0x01]),
    Buffer.alloc(paddingLength, 0xff),
    Buffer.from([0x00]),
    hashWithPrefx,
  ]);
  const paddedMessageBigInt = BigInt("0x" + paddedMessage.toString("hex"));
  const exponent = BigInt("0x" + Buffer.from(publicKeyJWK.e!, "base64").toString("hex")); // 65537

  const rsaResult = paddedMessageBigInt === signatureBigInt ** exponent % pubKeyBigInt;
  if (!rsaResult) {
    throw new Error("Local: RSA verification failed");
  }
  // ----- End Local verification

  // Extract <CertificateNode> and <DocumentType>
  const signedDataAfterPrecomputeBuff = Buffer.from(signedDataAfterPrecompute);
  const signedInfoArr = Uint8Array.from(Buffer.from(signedInfo));
  const certificateDataNodeIndex = signedDataAfterPrecomputeBuff.indexOf(Buffer.from("<CertificateData>"));
  const documentTypeNodeIndex = certificateDataNodeIndex + 17 + 1;

  // Data from 17 + 2 to next "space" or ">"
  const documentType = signedDataAfterPrecomputeBuff.subarray(
    documentTypeNodeIndex,
    Math.min(
      signedDataAfterPrecomputeBuff.indexOf(Buffer.from(" "), documentTypeNodeIndex),
      signedDataAfterPrecomputeBuff.indexOf(Buffer.from(">"), documentTypeNodeIndex),
    ),
  );

  let revealStartIndex = 0;
  let revealEndIndex = 0;
  const isRevealEnabled = revealStart && revealEnd ? 1 : 0;

  if (isRevealEnabled) {
    // Index of reveal start from "<CertificateData>"
    revealStartIndex =
      signedDataAfterPrecomputeBuff.indexOf(Buffer.from(revealStart!), certificateDataNodeIndex) -
      certificateDataNodeIndex;

    revealEndIndex =
      signedDataAfterPrecomputeBuff.indexOf(
        Buffer.from(revealEnd!),
        certificateDataNodeIndex + revealStartIndex + revealStart!.length + 1,
      ) - certificateDataNodeIndex;

    if (revealStartIndex < 0) {
      throw new Error("reveal start not found in doc");
    }
  }

  // Set signal to 1 by default if no signal is set
  const signalHash = params.signal ? hash(params.signal) : hash(1);

  // Circuit inputs
  const inputs = {
    dataPadded: Uint8ArrayToCharArray(signedDataAfterPrecompute),
    dataPaddedLength: signedDataAfterPrecomputeLength.toString(),
    signedInfo: Uint8ArrayToCharArray(signedInfoArr),
    precomputedSHA: Uint8ArrayToCharArray(precomputedSha),
    dataHashIndex: dataHashIndex.toString(),
    certificateDataNodeIndex: certificateDataNodeIndex.toString(),
    documentTypeLength: documentType.length.toString(),
    signature: bigIntToChunkedBytes(signatureBigInt, rsaKeyBitsPerChunk, rsaKeyNumChunks),
    pubKey: bigIntToChunkedBytes(pubKeyBigInt, rsaKeyBitsPerChunk, rsaKeyNumChunks),
    isRevealEnabled,
    revealStartIndex: revealStartIndex.toString(),
    revealEndIndex: revealEndIndex.toString(),
    nullifierSeed: nullifierSeed.toString(),
    signalHash: signalHash,
  };

  return inputs;
}

export const generateArgs = async (xml: string, params: InputGenerationParams): Promise<AnonDigiLockerArgs> => {
  const inputs = await generateInput(xml, params);


  const anonDigiLockerArgs: AnonDigiLockerArgs = {
    dataPadded: {
      argumentType: ArgumentTypeName.StringArray,
      value: inputs.dataPadded,
    },
    dataPaddedLength: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.dataPaddedLength,
    },
    signedInfo: {
      argumentType: ArgumentTypeName.StringArray,
      value: inputs.signedInfo,
    },
    precomputedSHA: {
      argumentType: ArgumentTypeName.StringArray,
      value: inputs.precomputedSHA,
    },
    dataHashIndex: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.dataHashIndex,
    },
    certificateDataNodeIndex: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.certificateDataNodeIndex,
    },
    documentTypeLength: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.documentTypeLength,
    },
    signature: {
      argumentType: ArgumentTypeName.StringArray,
      value: inputs.signature,
    },
    pubKey: {
      argumentType: ArgumentTypeName.StringArray,
      value: inputs.pubKey,
    },
    isRevealEnabled: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.isRevealEnabled ? "1" : "0",
    },
    revealStartIndex: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.revealStartIndex,
    },
    revealEndIndex: {
      argumentType: ArgumentTypeName.Number,
      value: inputs.revealEndIndex,
    },
    nullifierSeed: {
      argumentType: ArgumentTypeName.String,
      value: inputs.nullifierSeed,
    },
    signalHash: {
      argumentType: ArgumentTypeName.String,
      value: inputs.signalHash,
    },
  };

  return anonDigiLockerArgs;
};


================================================
File: web-nfc/packages/core/src/prover.ts
================================================
/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { Groth16Proof, PublicSignals, ZKArtifact, groth16 } from "snarkjs";
import { ProverState, retrieveFileExtension } from "@anon-aadhaar/core";
import { AnonDigiLockerArgs, AnonDigiLockerProof } from "./types";

type Witness = AnonDigiLockerArgs;

async function fetchKey(keyURL: string, maxRetries = 3): Promise<ZKArtifact> {
  let attempts = 0;
  while (attempts < maxRetries) {
    try {
      const response = await fetch(keyURL);
      if (!response.ok) {
        throw new Error(
          `Error while fetching ${retrieveFileExtension(keyURL)} artifacts from prover: ${response.statusText}`,
        );
      }

      const data = await response.arrayBuffer();
      return data as Buffer;
    } catch (error) {
      attempts++;
      if (attempts >= maxRetries) {
        throw error;
      }
      await new Promise((resolve) => setTimeout(resolve, 1000 * attempts));
    }
  }
  return keyURL;
}

interface KeyPathInterface {
  keyURL: string;
  getKey: () => Promise<ZKArtifact>;
}

export class KeyPath implements KeyPathInterface {
  keyURL: string;

  constructor(keyURL: string) {
    this.keyURL = keyURL;
  }

  async getKey(): Promise<ZKArtifact> {
    return await fetchKey(this.keyURL);
  }
}

export interface ProverInferace {
  wasm: KeyPath;
  zkey: KeyPath;
  proving: (witness: Witness, updateState?: (state: ProverState) => void) => Promise<AnonDigiLockerProof>;
}

export class AnonDigiLockerProver implements ProverInferace {
  wasm: KeyPath;
  zkey: KeyPath;

  constructor(wasmURL: string, zkey: string) {
    this.wasm = new KeyPath(wasmURL);
    this.zkey = new KeyPath(zkey);
  }

  async proving(witness: Witness, updateState?: (state: ProverState) => void): Promise<AnonDigiLockerProof> {
    if (updateState) updateState(ProverState.FetchingWasm);
    const wasmBuffer = new Uint8Array((await this.wasm.getKey()) as ArrayBuffer);
    if (updateState) updateState(ProverState.FetchingZkey);
    const zkeyBuffer = new Uint8Array((await this.zkey.getKey()) as ArrayBuffer);

    const input = {
      dataPadded: witness.dataPadded.value!,
      dataPaddedLength: witness.dataPaddedLength.value!,
      signedInfo: witness.signedInfo.value!,
      precomputedSHA: witness.precomputedSHA.value!,
      dataHashIndex: witness.dataHashIndex.value!,
      certificateDataNodeIndex: witness.certificateDataNodeIndex.value!,
      documentTypeLength: witness.documentTypeLength.value!,
      isRevealEnabled: witness.isRevealEnabled.value!,
      revealStartIndex: witness.revealStartIndex.value!,
      revealEndIndex: witness.revealEndIndex.value!,
      pubKey: witness.pubKey.value!,
      signalHash: witness.signalHash.value!,
    };

    if (updateState) updateState(ProverState.Proving);
    let result: {
      proof: Groth16Proof;
      publicSignals: PublicSignals;
    };
    try {
      result = await groth16.fullProve(input, wasmBuffer, zkeyBuffer);
    } catch (e) {
      console.error(e);
      if (updateState) updateState(ProverState.Error);
      throw new Error("[AnonAAdhaarProver]: Error while generating the proof");
    }

    const proof = result.proof;
    const publicSignals = result.publicSignals;

    if (updateState) updateState(ProverState.Completed);
    return {
      groth16Proof: proof,
      nullifierSeed: witness.nullifierSeed.value!,
      signalHash: witness.signalHash.value!,
      pubkeyHash: publicSignals[0],
      nullifier: publicSignals[1],
      documentType: publicSignals[2],
      reveal: publicSignals[3],
    };
  }
}


================================================
File: web-nfc/packages/core/src/types.ts
================================================
import { NumberArgument, StringArrayArgument, StringArgument } from "@pcd/pcd-types";
import { Groth16Proof } from "snarkjs";

export type BigNumberish = string | bigint;

export const AnonDigiLockerTypeName = "anon-digilocker";

export type InputGenerationParams = {
  nullifierSeed: number | bigint;
  revealStart?: string;
  revealEnd?: string;
  signal?: string;
  maxInputLength?: number;
  rsaKeyBitsPerChunk?: number;
  rsaKeyNumChunks?: number;
};

/**
 * @dev all the arguments needed to initialize the Core package.
 * You can find these URLs in ./constants.ts
 */
export interface InitArgs {
  wasmURL: string;
  zkeyURL: string;
  vkeyURL: string;
}

/**
 * @dev claim that you have a document signed by pubKey.
 */
export type AnonDigiLockerClaim = {
  pubKey: string[];
  signalHash: string;
  documentType: string;
  reveal: string | null;
};

/**
 * @dev proof of a correct claim
 */
export type AnonDigiLockerProof = {
  groth16Proof: Groth16Proof; // 3 points on curve if we use groth16
  pubkeyHash: string;
  nullifierSeed: string;
  nullifier: string;
  signalHash: string;
  documentType: string;
  reveal: string;
};

/**
 * @dev Arguments needed to compute the witness.
 */
export type AnonDigiLockerArgs = {
  dataPadded: StringArrayArgument;
  dataPaddedLength: NumberArgument;
  signedInfo: StringArrayArgument;
  precomputedSHA: StringArrayArgument;
  dataHashIndex: NumberArgument;
  documentTypeLength: NumberArgument;
  certificateDataNodeIndex: NumberArgument;
  signature: StringArrayArgument;
  pubKey: StringArrayArgument;
  isRevealEnabled: NumberArgument;
  revealStartIndex: NumberArgument;
  revealEndIndex: NumberArgument;
  nullifierSeed: StringArgument;
  signalHash: StringArgument;
};


================================================
File: web-nfc/packages/foundry/README.md
================================================
WalletManager.sol deployed on base sepolia : 0x87D3cD74fAbC9032448c39B9fC27577f453F8cdD

================================================
File: web-nfc/packages/foundry/Makefile
================================================
.PHONY: build deploy generate-abis verify-keystore account chain compile deploy-verify flatten fork format lint test verify

# setup wallet for anvil
setup-anvil-wallet:
    shx rm ~/.foundry/keystores/scaffold-eth-default 2>/dev/null; \
    cast wallet import --private-key 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6 --unsafe-password 'localhost' scaffold-eth-default

# Start local chain
chain: setup-anvil-wallet
    anvil

# Start a fork
fork: setup-anvil-wallet
    anvil --fork-url ${FORK_URL} --chain-id 31337

# Build the project
build:
    forge build --build-info --build-info-path out/build-info/

# Deploy the project
deploy:
    @if [ "$(RPC_URL)" = "localhost" ]; then \
        forge script script/Deploy.s.sol --rpc-url localhost --password localhost --broadcast --legacy --ffi; \
    else \
        forge script script/Deploy.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --ffi; \
    fi

# Build and deploy target
build-and-deploy: build deploy generate-abis

# Generate TypeScript ABIs
generate-abis:
    node scripts-js/generateTsAbis.js

verify-keystore:
    if grep -q "scaffold-eth-default" .env; then \
        cast wallet address --password localhost; \
  else \
        cast wallet address; \
  fi

# List account
account:
    @node scripts-js/ListAccount.js $$(make verify-keystore)

# Generate a new account
account-generate:
    @cast wallet import $(ACCOUNT_NAME) --private-key $$(cast wallet new | grep 'Private key:' | awk '{print $$3}')
    @echo "Please update .env file with ETH_KEYSTORE_ACCOUNT=$(ACCOUNT_NAME)"

# Import an existing account
account-import:
    @cast wallet import ${ACCOUNT_NAME} --interactive

# Compile contracts
compile:
    forge compile

# Deploy and verify
deploy-verify:
    @if [ "$(RPC_URL)" = "localhost" ]; then \
        forge script script/Deploy.s.sol --rpc-url localhost --password localhost --broadcast --legacy --ffi --verify; \
    else \
        forge script script/Deploy.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --ffi --verify; \
    fi
    node scripts-js/generateTsAbis.js

# Flatten contracts
flatten:
    forge flatten

# Format code
format:
    forge fmt && prettier --write ./scripts-js/**/*.js

# Lint code
lint:
    forge fmt --check && prettier --check ./script/**/*.js

# Run tests
test:
    forge test

# Verify contracts
verify:
    forge script script/VerifyAll.s.sol --ffi --rpc-url $(RPC_URL)

build-and-verify: build verify



================================================
File: web-nfc/packages/foundry/foundry.toml
================================================
[profile.default]
src = 'contracts'
out = 'out'
libs = ['lib']
fs_permissions = [{ access = "read-write", path = "./"}]

[rpc_endpoints]
default_network = "http://127.0.0.1:8545"
localhost = "http://127.0.0.1:8545"

mainnet = "https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_API_KEY}"
sepolia = "https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
arbitrum = "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
arbitrumSepolia = "https://arb-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
optimism = "https://opt-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
optimismSepolia = "https://opt-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygon = "https://polygon-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygonMumbai = "https://polygon-mumbai.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygonZkEvm = "https://zkevm-rpc.com"
polygonZkEvmTestnet = "https://rpc.public.zkevm-test.net"
gnosis = "https://rpc.gnosischain.com"
chiado = "https://rpc.chiadochain.net"
base = "https://mainnet.base.org"
baseSepolia = "https://sepolia.base.org"
scrollSepolia = "https://sepolia-rpc.scroll.io"
scroll = "https://rpc.scroll.io"
pgn = "https://rpc.publicgoods.network"
pgnTestnet = "https://sepolia.publicgoods.network"

[etherscan]
polygonMumbai = { key = "${ETHERSCAN_API_KEY}" }
sepolia = { key = "${ETHERSCAN_API_KEY}" }


[fmt]
multiline_func_header = "params_first"
line_length = 80
tab_width = 2
quote_style = "double"
bracket_spacing = true
int_types = "long"

# See more config options https://github.com/foundry-rs/foundry/tree/master/config


================================================
File: web-nfc/packages/foundry/package.json
================================================
{
  "name": "@se-2/foundry",
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "account": "make account",
    "account:generate": "make account-generate ACCOUNT_NAME=${1:-scaffold-eth-custom}",
    "account:import": "make account-import ACCOUNT_NAME=${1:-scaffold-eth-custom}",
    "chain": "make chain",
    "compile": "make compile",
    "deploy": "make build-and-deploy RPC_URL=${1:-localhost}",
    "deploy:verify": "make deploy-verify RPC_URL=${1:-localhost}",
    "flatten": "make flatten",
    "fork": "make fork FORK_URL=${1:-mainnet}",
    "format": "make format",
    "postinstall": "shx cp -n .env.example .env",
    "lint": "make lint",
    "test": "make test",
    "verify": "make build-and-verify RPC_URL=${1:-localhost}",
    "verify-keystore": "make verify-keystore"
  },
  "dependencies": {
    "dotenv": "~16.3.1",
    "envfile": "~6.18.0",
    "ethers": "~5.7.1",
    "prettier": "~2.8.8",
    "qrcode": "~1.5.3",
    "toml": "~3.0.0"
  },
  "devDependencies": {
    "shx": "~0.3.4"
  }
}


================================================
File: web-nfc/packages/foundry/remappings.txt
================================================
@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts


================================================
File: web-nfc/packages/foundry/.env.example
================================================
# Template for foundry environment variables.

# For local development, copy this file, rename it to .env, and fill in the values.

# We provide default values so developers can start prototyping out of the box,
# but we recommend getting your own API Keys for Production Apps.

# DEPLOYER_PRIVATE_KEY is used while deploying contract.
# On anvil chain the value of it can be empty since we use the prefunded account
# which comes with anvil chain to deploy contract.
# NOTE: You don't need to manually change the value of DEPLOYER_PRIVATE_KEY, it should
# be auto filled when run `yarn generate`.

# Alchemy rpc URL is used while deploying the contracts to some testnets/mainnets, checkout `foundry.toml` for it's use.
ALCHEMY_API_KEY=oKxs-03sij-U_N0iOlrSsZFr29-IqbuF
# Etherscan API key is used to verify the contract on etherscan.
ETHERSCAN_API_KEY=DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW
# Default account for localhost / use "scaffold-eth-custom" if you wish to use a generated account or imported account
ETH_KEYSTORE_ACCOUNT=scaffold-eth-default

================================================
File: web-nfc/packages/foundry/contracts/UserWallet.sol
================================================
// SPDX-License-Identifier:MIT

pragma solidity ^0.8.25;

import {IAccount} from "../lib/account-abstraction/contracts/interfaces/IAccount.sol";
import {PackedUserOperation} from "../lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol";
import {Ownable} from "../lib/openzeppelin-contracts/contracts/Access/Ownable.sol";
import {MessageHashUtils} from "../lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol";
import {ECDSA} from "../lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
import {SIG_VALIDATION_FAILED,SIG_VALIDATION_SUCCESS} from "../lib/account-abstraction/contracts/core/Helpers.sol";
import {IEntryPoint} from "../lib/account-abstraction/contracts/interfaces/IEntryPoint.sol";

contract UserWallet is IAccount , Ownable{

    mapping(address _contract => bool isWhitelisted) private whitelisted;
    
    IEntryPoint private immutable i_entryPoint;

    error UserWallet__OnlyEntryPointAllowed();
    error UserWallet__OnlyEntryPointOrOwnerAllowed();
    error UserWallet__CallFailed(bytes);
    error UserWallet__OnlyOwnerAllowed();

    modifier onlyEntryPoint {
        if(msg.sender != address(i_entryPoint)){
            revert UserWallet__OnlyEntryPointAllowed();
        }
        _;
    }

    modifier onlyEntryPointOrOwner{
        if((msg.sender != address(i_entryPoint)) && (msg.sender != owner())){
            revert UserWallet__OnlyEntryPointOrOwnerAllowed();
        }
        _;
    }

    modifier onlyOwnerUserWallet{
        if(msg.sender != owner()){
            revert UserWallet__OnlyOwnerAllowed();
        }
        _;
    }

    constructor(address entryPoint) Ownable(msg.sender){
        i_entryPoint = IEntryPoint(entryPoint);
    }

    function validateUserOp(
        PackedUserOperation calldata userOp,
        bytes32 userOpHash,
        uint256 missingAccountFunds
    ) external onlyEntryPoint returns (uint256 validationData){
        validationData = _validateSignature(userOp,userOpHash); 
        _payPrefund(missingAccountFunds); 
        
    }

    function _validateSignature(PackedUserOperation calldata userOp,bytes32 userOpHash) internal view returns(uint256 validationData){
        uint256 isSuccess;

        bytes32 ethSignedMessageHash = MessageHashUtils.toEthSignedMessageHash(userOpHash);
        address signer = ECDSA.recover(ethSignedMessageHash , userOp.signature);
        if(signer!=owner()){
            isSuccess =  SIG_VALIDATION_FAILED;
        }
        else{
            isSuccess = SIG_VALIDATION_SUCCESS;
        }
        return SIG_VALIDATION_SUCCESS;
    }

    function _payPrefund(uint256 missingAccountFunds) internal{
        if(missingAccountFunds>0){
            (bool success ,) = payable(msg.sender).call{value : missingAccountFunds , gas: type(uint256).max}("");
            require(success);
        }
    }

    receive() external payable{}
     
    /*//////////////////////////////////////////////////////////////
                           EXTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/


    function execute(address dest , uint256 value , bytes calldata functionData) onlyEntryPointOrOwner external {
        (bool success , bytes memory result) = dest.call{value : value}(functionData);
        if(!success){
            revert UserWallet__CallFailed(result);
        }
    }


                                                     
    /*//////////////////////////////////////////////////////////////
                              WHITELISTING
    //////////////////////////////////////////////////////////////*/

    function isWhitelisted(address _add) public view returns(bool){
        return whitelisted[_add];
    }

    function addToWhitelist(address _add) public onlyOwner{
        whitelisted[_add] = true;
    }

    function withdrawToll(address from , uint256 amount) external{
        require(isWhitelisted(from) , "Cannot Withdraw if not whitelisted");
        (bool success ,) = payable(from).call{value : amount}("");
        require(success);
    }

}

================================================
File: web-nfc/packages/foundry/contracts/WalletManager.sol
================================================
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.25;

import {UserWallet} from "./UserWallet.sol";
import {IEntryPoint} from "../lib/account-abstraction/contracts/interfaces/IEntryPoint.sol";

contract WalletManager{
    struct Person{
        string name;
        string gender;
        string city;
        uint256 pincode;
    }

    error WalletManager__WalletAlreadyExists();
    error WalletManager__NotOwner();

    address owner;

    mapping(string => address) private carIdToWallet;
    mapping(bytes => string[]) private userCars;
    mapping(bytes userProof => Person) private userToProfile;
    IEntryPoint private immutable i_entryPoint;

    modifier onlyOwner {
        if(owner!= msg.sender){
            revert WalletManager__NotOwner();
        }
        _;
    }
    
    event WalletCreated(bytes indexed user, string indexed carId, address wallet);
    
    
    constructor(address _entryPoint) {
        i_entryPoint = IEntryPoint(_entryPoint);
        owner = msg.sender;
    }
    
    function createWalletForCar(bytes memory userProof ,string memory carId) external returns (address) {
        if(carIdToWallet[carId] != address(0)) {
            revert WalletManager__WalletAlreadyExists();
        }
        
        UserWallet newWallet = new UserWallet(address(i_entryPoint));
        newWallet.transferOwnership(msg.sender);
        carIdToWallet[carId] = address(newWallet);
        userCars[userProof].push(carId);
        
        emit WalletCreated(userProof, carId, address(newWallet));
        return address(newWallet);
    }
    
    function getWalletForCar(string memory carId) external view returns (address) {
        return carIdToWallet[carId];
    }
    
    function getUserCars(bytes memory user) external view returns (string[] memory) {
        return userCars[user];
    }


    /*//////////////////////////////////////////////////////////////
                           PROFILE FUNCTIONS
    //////////////////////////////////////////////////////////////*/


    function setProfile(bytes memory userProof ,string memory _name ,string memory _gender ,string memory _city ,uint256 _pincode) public {
        Person memory newPerson = Person({
            name: _name,
            gender : _gender ,
            city: _city ,
            pincode: _pincode
            });
        userToProfile[userProof] = newPerson;
    }

    function getProfile(bytes memory userProof) public view returns(Person memory){
        return userToProfile[userProof];
    }

                                                     
    /*//////////////////////////////////////////////////////////////
                              WHITELISTING
    //////////////////////////////////////////////////////////////*/


    function addToWhitelist_UserWallet(address[] memory addresses , string memory carId) public onlyOwner{
        address carWallet = carIdToWallet[carId];
        UserWallet wallet = UserWallet(payable(carWallet));
        uint256 len = addresses.length;
        for(uint i =0;i<len;i++){
            wallet.addToWhitelist(addresses[i]);
        }
    }

}

================================================
File: web-nfc/packages/foundry/script/Deploy.s.sol
================================================
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "./DeployHelpers.s.sol";
import { DeployYourContract } from "./DeployYourContract.s.sol";

contract DeployScript is ScaffoldETHDeploy {
  function run() external {
    DeployYourContract deployYourContract = new DeployYourContract();
    deployYourContract.run();

    // deploy more contracts here
    // DeployMyContract deployMyContract = new DeployMyContract();
    // deployMyContract.run();
  }
}


================================================
File: web-nfc/packages/foundry/script/DeployHelpers.s.sol
================================================
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import { Script, console } from "forge-std/Script.sol";
import { Vm } from "forge-std/Vm.sol";

contract ScaffoldETHDeploy is Script {
  error InvalidChain();
  error DeployerHasNoBalance();
  error InvalidPrivateKey(string);

  event AnvilSetBalance(address account, uint256 amount);
  event FailedAnvilRequest();

  struct Deployment {
    string name;
    address addr;
  }

  string root;
  string path;
  Deployment[] public deployments;
  uint256 constant ANVIL_BASE_BALANCE = 10000 ether;

  /// @notice The deployer address for every run
  address deployer;

  /// @notice Use this modifier on your run() function on your deploy scripts
  modifier ScaffoldEthDeployerRunner() {
    deployer = _startBroadcast();
    if (deployer == address(0)) {
      revert InvalidPrivateKey("Invalid private key");
    }
    _;
    _stopBroadcast();
    exportDeployments();
  }

  function _startBroadcast() internal returns (address) {
    vm.startBroadcast();
    (, address _deployer,) = vm.readCallers();

    if (block.chainid == 31337 && _deployer.balance == 0) {
      try this.anvil_setBalance(_deployer, ANVIL_BASE_BALANCE) {
        emit AnvilSetBalance(_deployer, ANVIL_BASE_BALANCE);
      } catch {
        emit FailedAnvilRequest();
      }
    }
    return _deployer;
  }

  function _stopBroadcast() internal {
    vm.stopBroadcast();
  }

  function exportDeployments() internal {
    // fetch already existing contracts
    root = vm.projectRoot();
    path = string.concat(root, "/deployments/");
    string memory chainIdStr = vm.toString(block.chainid);
    path = string.concat(path, string.concat(chainIdStr, ".json"));

    string memory jsonWrite;

    uint256 len = deployments.length;

    for (uint256 i = 0; i < len; i++) {
      vm.serializeString(
        jsonWrite, vm.toString(deployments[i].addr), deployments[i].name
      );
    }

    string memory chainName;

    try this.getChain() returns (Chain memory chain) {
      chainName = chain.name;
    } catch {
      chainName = findChainName();
    }
    jsonWrite = vm.serializeString(jsonWrite, "networkName", chainName);
    vm.writeJson(jsonWrite, path);
  }

  function getChain() public returns (Chain memory) {
    return getChain(block.chainid);
  }

  function anvil_setBalance(address addr, uint256 amount) public {
    string memory addressString = vm.toString(addr);
    string memory amountString = vm.toString(amount);
    string memory requestPayload = string.concat(
      '{"method":"anvil_setBalance","params":["',
      addressString,
      '","',
      amountString,
      '"],"id":1,"jsonrpc":"2.0"}'
    );

    string[] memory inputs = new string[](8);
    inputs[0] = "curl";
    inputs[1] = "-X";
    inputs[2] = "POST";
    inputs[3] = "http://localhost:8545";
    inputs[4] = "-H";
    inputs[5] = "Content-Type: application/json";
    inputs[6] = "--data";
    inputs[7] = requestPayload;

    vm.ffi(inputs);
  }

  function findChainName() public returns (string memory) {
    uint256 thisChainId = block.chainid;
    string[2][] memory allRpcUrls = vm.rpcUrls();
    for (uint256 i = 0; i < allRpcUrls.length; i++) {
      try vm.createSelectFork(allRpcUrls[i][1]) {
        if (block.chainid == thisChainId) {
          return allRpcUrls[i][0];
        }
      } catch {
        continue;
      }
    }
    revert InvalidChain();
  }
}


================================================
File: web-nfc/packages/foundry/script/DeployYourContract.s.sol
================================================
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "../contracts/WalletManager.sol";
import "./DeployHelpers.s.sol";

contract DeployYourContract is ScaffoldETHDeploy {
    // use `deployer` from `ScaffoldETHDeploy`
    function run() external ScaffoldEthDeployerRunner {
        WalletManager walletManager = new WalletManager(deployer);
        console.logString(
            string.concat(
                "WalletManager deployed at: ",
                vm.toString(address(walletManager))
            )
        );
    }
}


================================================
File: web-nfc/packages/foundry/script/VerifyAll.s.sol
================================================
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Script.sol";
import "forge-std/Vm.sol";
import "solidity-bytes-utils/BytesLib.sol";

/**
 * @dev Temp Vm implementation
 * @notice calls the tryffi function on the Vm contract
 * @notice will be deleted once the forge/std is updated
 */
struct FfiResult {
  int32 exit_code;
  bytes stdout;
  bytes stderr;
}

interface tempVm {
  function tryFfi(
    string[] calldata
  ) external returns (FfiResult memory);
}

contract VerifyAll is Script {
  uint96 currTransactionIdx;

  function run() external {
    string memory root = vm.projectRoot();
    string memory path = string.concat(
      root,
      "/broadcast/Deploy.s.sol/",
      vm.toString(block.chainid),
      "/run-latest.json"
    );
    string memory content = vm.readFile(path);

    while (this.nextTransaction(content)) {
      _verifyIfContractDeployment(content);
      currTransactionIdx++;
    }
  }

  function _verifyIfContractDeployment(
    string memory content
  ) internal {
    string memory txType = abi.decode(
      vm.parseJson(content, searchStr(currTransactionIdx, "transactionType")),
      (string)
    );
    if (keccak256(bytes(txType)) == keccak256(bytes("CREATE"))) {
      _verifyContract(content);
    }
  }

  function _verifyContract(
    string memory content
  ) internal {
    string memory contractName = abi.decode(
      vm.parseJson(content, searchStr(currTransactionIdx, "contractName")),
      (string)
    );
    address contractAddr = abi.decode(
      vm.parseJson(content, searchStr(currTransactionIdx, "contractAddress")),
      (address)
    );
    bytes memory deployedBytecode = abi.decode(
      vm.parseJson(content, searchStr(currTransactionIdx, "transaction.input")),
      (bytes)
    );
    bytes memory compiledBytecode = abi.decode(
      vm.parseJson(_getCompiledBytecode(contractName), ".bytecode.object"),
      (bytes)
    );
    bytes memory constructorArgs = BytesLib.slice(
      deployedBytecode,
      compiledBytecode.length,
      deployedBytecode.length - compiledBytecode.length
    );

    string[] memory inputs = new string[](9);
    inputs[0] = "forge";
    inputs[1] = "verify-contract";
    inputs[2] = vm.toString(contractAddr);
    inputs[3] = contractName;
    inputs[4] = "--chain";
    inputs[5] = vm.toString(block.chainid);
    inputs[6] = "--constructor-args";
    inputs[7] = vm.toString(constructorArgs);
    inputs[8] = "--watch";

    FfiResult memory f = tempVm(address(vm)).tryFfi(inputs);

    if (f.stderr.length != 0) {
      console.logString(
        string.concat(
          "Submitting verification for contract: ", vm.toString(contractAddr)
        )
      );
      console.logString(string(f.stderr));
    } else {
      console.logString(string(f.stdout));
    }
    return;
  }

  function nextTransaction(
    string memory content
  ) external view returns (bool) {
    try this.getTransactionFromRaw(content, currTransactionIdx) {
      return true;
    } catch {
      return false;
    }
  }

  function _getCompiledBytecode(
    string memory contractName
  ) internal view returns (string memory compiledBytecode) {
    string memory root = vm.projectRoot();
    string memory path =
      string.concat(root, "/out/", contractName, ".sol/", contractName, ".json");
    compiledBytecode = vm.readFile(path);
  }

  function getTransactionFromRaw(
    string memory content,
    uint96 idx
  ) external pure {
    abi.decode(vm.parseJson(content, searchStr(idx, "hash")), (bytes32));
  }

  function searchStr(
    uint96 idx,
    string memory searchKey
  ) internal pure returns (string memory) {
    return string.concat(".transactions[", vm.toString(idx), "].", searchKey);
  }
}


================================================
File: web-nfc/packages/foundry/scripts-js/ListAccount.js
================================================
import { config } from "dotenv";
config();
import { join, dirname } from "path";
import { ethers, Wallet } from "ethers";
import { toString } from "qrcode";
import { readFileSync } from "fs";
import { parse } from "toml";
import { fileURLToPath } from "url";

const __dirname = dirname(fileURLToPath(import.meta.url));

const ALCHEMY_API_KEY =
  process.env.ALCHEMY_API_KEY || "oKxs-03sij-U_N0iOlrSsZFr29-IqbuF";

async function getBalanceForEachNetwork(address) {
  try {
    // Read the foundry.toml file
    const foundryTomlPath = join(__dirname, "..", "foundry.toml");
    const tomlString = readFileSync(foundryTomlPath, "utf-8");

    // Parse the tomlString to get the JS object representation
    const parsedToml = parse(tomlString);

    // Extract rpc_endpoints from parsedToml
    const rpcEndpoints = parsedToml.rpc_endpoints;

    // Replace placeholders in the rpc_endpoints section
    function replaceENVAlchemyKey(input) {
      return input.replace("${ALCHEMY_API_KEY}", ALCHEMY_API_KEY);
    }

    for (const networkName in rpcEndpoints) {
      if (networkName === "localhost") continue;

      const networkUrl = replaceENVAlchemyKey(rpcEndpoints[networkName]);

      try {
        const provider = new ethers.providers.JsonRpcProvider(networkUrl);
        const balance = await provider.getBalance(address);
        console.log("--", networkName, "-- 📡");
        console.log("   balance:", +ethers.utils.formatEther(balance));
        console.log(
          "   nonce:",
          +(await provider.getTransactionCount(address))
        );
      } catch (e) {
        console.log("Can't connect to network", networkName);
        console.log();
      }
    }
  } catch (error) {
    console.error("Error reading foundry.toml:", error);
  }
}

function verifyAddressFormat(address) {
  try {
    ethers.utils.getAddress(address);
    return true;
  } catch (e) {
    return false;
  }
}

function findAddressFromArgs(args) {
  return args.find((arg) => arg.startsWith("0x") && arg.length === 42);
}

const DEFAULT_KEYSTORE_ACCOUNT = "scaffold-eth-default";
async function main() {
  const address = findAddressFromArgs(process.argv);

  const isValidAddress = verifyAddressFormat(address);
  const isDefaultAccount =
    process.env.ETH_KEYSTORE_ACCOUNT === DEFAULT_KEYSTORE_ACCOUNT;

  if (!isValidAddress) {
    console.log(
      `\n🚫️ Unable to access keystore account ${process.env.ETH_KEYSTORE_ACCOUNT}`
    );

    if (isDefaultAccount) {
      console.log(
        "\n🏠 It seems you are trying to access the localhost account. Did you forget to update ETH_KEYSTORE_ACCOUNT=scaffold-eth-custom in the .env file?\n"
      );
    }

    console.log(
      "\n💡 If you haven't generated a deployer keystore account yet, please run `yarn account:generate`. Then update the `.env` file with `ETH_KEYSTORE_ACCOUNT=scaffold-eth-custom`"
    );
    return;
  }

  if (isValidAddress && isDefaultAccount) {
    console.log("\n⚠️ Displaying balance for default account");
    console.log(
      "\n❓ Did you forget to update ETH_KEYSTORE_ACCOUNT=scaffold-eth-custom in the .env file?\n"
    );
  }

  console.log(await toString(address, { type: "terminal", small: true }));
  console.log("Public address:", address, "\n");

  await getBalanceForEachNetwork(address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});


================================================
File: web-nfc/packages/foundry/scripts-js/generateTsAbis.js
================================================
import {
  readdirSync,
  statSync,
  readFileSync,
  existsSync,
  mkdirSync,
  writeFileSync,
} from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { format } from "prettier";

const __dirname = dirname(fileURLToPath(import.meta.url));

const generatedContractComment = `
/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
`;

function getDirectories(path) {
  return readdirSync(path).filter(function (file) {
    return statSync(path + "/" + file).isDirectory();
  });
}
function getFiles(path) {
  return readdirSync(path).filter(function (file) {
    return statSync(path + "/" + file).isFile();
  });
}
function getArtifactOfContract(contractName) {
  const current_path_to_artifacts = join(
    __dirname,
    "..",
    `out/${contractName}.sol`
  );
  const artifactJson = JSON.parse(
    readFileSync(`${current_path_to_artifacts}/${contractName}.json`)
  );

  return artifactJson;
}

function getInheritedFromContracts(artifact) {
  let inheritedFromContracts = [];
  if (artifact?.ast) {
    for (const astNode of artifact.ast.nodes) {
      if (astNode.nodeType == "ContractDefinition") {
        if (astNode.baseContracts.length > 0) {
          inheritedFromContracts = astNode.baseContracts.map(
            ({ baseName }) => baseName.name
          );
        }
      }
    }
  }
  return inheritedFromContracts;
}

function getInheritedFunctions(mainArtifact) {
  const inheritedFromContracts = getInheritedFromContracts(mainArtifact);
  const inheritedFunctions = {};
  for (const inheritanceContractName of inheritedFromContracts) {
    const {
      abi,
      ast: { absolutePath },
    } = getArtifactOfContract(inheritanceContractName);
    for (const abiEntry of abi) {
      if (abiEntry.type == "function") {
        inheritedFunctions[abiEntry.name] = absolutePath;
      }
    }
  }
  return inheritedFunctions;
}

function main() {
  const current_path_to_broadcast = join(
    __dirname,
    "..",
    "broadcast/Deploy.s.sol"
  );
  const current_path_to_deployments = join(__dirname, "..", "deployments");

  const chains = getDirectories(current_path_to_broadcast);
  const Deploymentchains = getFiles(current_path_to_deployments);

  const deployments = {};

  Deploymentchains.forEach((chain) => {
    if (!chain.endsWith(".json")) return;
    chain = chain.slice(0, -5);
    var deploymentObject = JSON.parse(
      readFileSync(`${current_path_to_deployments}/${chain}.json`)
    );
    deployments[chain] = deploymentObject;
  });

  const allGeneratedContracts = {};

  chains.forEach((chain) => {
    allGeneratedContracts[chain] = {};
    const broadCastObject = JSON.parse(
      readFileSync(`${current_path_to_broadcast}/${chain}/run-latest.json`)
    );
    const transactionsCreate = broadCastObject.transactions.filter(
      (transaction) => transaction.transactionType == "CREATE"
    );
    transactionsCreate.forEach((transaction) => {
      const artifact = getArtifactOfContract(transaction.contractName);
      allGeneratedContracts[chain][
        deployments[chain][transaction.contractAddress] ||
          transaction.contractName
      ] = {
        address: transaction.contractAddress,
        abi: artifact.abi,
        inheritedFunctions: getInheritedFunctions(artifact),
      };
    });
  });

  const TARGET_DIR = "../nextjs/contracts/";

  const fileContent = Object.entries(allGeneratedContracts).reduce(
    (content, [chainId, chainConfig]) => {
      return `${content}${parseInt(chainId).toFixed(0)}:${JSON.stringify(
        chainConfig,
        null,
        2
      )},`;
    },
    ""
  );

  if (!existsSync(TARGET_DIR)) {
    mkdirSync(TARGET_DIR);
  }
  writeFileSync(
    `${TARGET_DIR}deployedContracts.ts`,
    format(
      `${generatedContractComment} import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract"; \n\n
 const deployedContracts = {${fileContent}} as const; \n\n export default deployedContracts satisfies GenericContractsDeclaration`,
      {
        parser: "typescript",
      }
    )
  );
}

try {
  main();
} catch (error) {
  console.error(error);
  process.exitCode = 1;
}

================================================
File: web-nfc/packages/nextjs/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


================================================
File: web-nfc/packages/nextjs/next.config.js
================================================
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: process.env.NEXT_PUBLIC_IGNORE_BUILD_ERROR === "true",
  },
  webpack: config => {
    config.resolve.fallback = { fs: false, net: false, tls: false };
    config.externals.push("pino-pretty", "lokijs", "encoding");
    return config;
  },
};

module.exports = nextConfig;


================================================
File: web-nfc/packages/nextjs/package.json
================================================
{
  "name": "@se-2/nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "check-types": "tsc --noEmit --incremental",
    "dev": "next dev",
    "format": "prettier --write . '!(node_modules|.next|contracts)/**/*'",
    "lint": "next lint",
    "serve": "next start",
    "start": "next dev",
    "vercel": "vercel",
    "vercel:yolo": "vercel --build-env NEXT_PUBLIC_IGNORE_BUILD_ERROR=true"
  },
  "dependencies": {
    "@anon-aadhaar/core": "^2.4.2",
    "@anon-aadhaar/react": "^2.4.2",
    "@anon-digilocker/core": "workspace:^",
    "@heroicons/react": "~2.1.5",
    "@rainbow-me/rainbowkit": "2.1.6",
    "@tanstack/react-query": "~5.59.15",
    "@uniswap/sdk-core": "~5.8.2",
    "@uniswap/v2-sdk": "~4.6.1",
    "blo": "~1.2.0",
    "burner-connector": "~0.0.8",
    "daisyui": "4.12.10",
    "ethers": "5.7.2",
    "next": "~14.2.11",
    "next-nprogress-bar": "~2.3.13",
    "next-themes": "~0.3.0",
    "prismjs": "1.29.0",
    "qrcode.react": "~4.0.1",
    "react": "~18.3.1",
    "react-copy-to-clipboard": "~5.1.0",
    "react-dom": "~18.3.1",
    "react-hot-toast": "~2.4.0",
    "react-simple-code-editor": "^0.14.1",
    "snarkjs": "0.7.4",
    "usehooks-ts": "~3.1.0",
    "viem": "2.21.32",
    "wagmi": "2.12.23",
    "zustand": "~5.0.0"
  },
  "devDependencies": {
    "@trivago/prettier-plugin-sort-imports": "~4.3.0",
    "@types/node": "~18.19.50",
    "@types/prismjs": "^1",
    "@types/react": "~18.3.5",
    "@types/snarkjs": "^0",
    "@typescript-eslint/eslint-plugin": "~5.40.0",
    "abitype": "1.0.6",
    "autoprefixer": "~10.4.20",
    "eslint": "~8.57.1",
    "eslint-config-next": "~14.2.15",
    "eslint-config-prettier": "~8.10.0",
    "eslint-plugin-prettier": "~5.2.1",
    "postcss": "~8.4.45",
    "prettier": "~3.3.3",
    "tailwindcss": "~3.4.11",
    "type-fest": "~4.26.1",
    "typescript": "<5.6.0",
    "vercel": "~37.4.2"
  },
  "packageManager": "yarn@3.2.3"
}


================================================
File: web-nfc/packages/nextjs/postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


================================================
File: web-nfc/packages/nextjs/scaffold.config.ts
================================================
import * as chains from "viem/chains";

export type ScaffoldConfig = {
  targetNetworks: readonly chains.Chain[];
  pollingInterval: number;
  alchemyApiKey: string;
  walletConnectProjectId: string;
  onlyLocalBurnerWallet: boolean;
};

const scaffoldConfig = {
  // The networks on which your DApp is live
  targetNetworks: [chains.baseSepolia],

  // The interval at which your front-end polls the RPC servers for new data
  // it has no effect if you only target the local network (default is 4000)
  pollingInterval: 30000,

  // This is ours Alchemy's default API key.
  // You can get your own at https://dashboard.alchemyapi.io
  // It's recommended to store it in an env variable:
  // .env.local for local testing, and in the Vercel/system env config for live apps.
  alchemyApiKey: process.env.NEXT_PUBLIC_ALCHEMY_API_KEY || "oKxs-03sij-U_N0iOlrSsZFr29-IqbuF",

  // This is ours WalletConnect's default project ID.
  // You can get your own at https://cloud.walletconnect.com
  // It's recommended to store it in an env variable:
  // .env.local for local testing, and in the Vercel/system env config for live apps.
  walletConnectProjectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID || "3a8170812b534d0ff9d794f19a901d64",

  // Only show the Burner Wallet when running on hardhat network
  onlyLocalBurnerWallet: true,
} as const satisfies ScaffoldConfig;

export default scaffoldConfig;


================================================
File: web-nfc/packages/nextjs/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./app/**/*.{js,ts,jsx,tsx}", "./components/**/*.{js,ts,jsx,tsx}", "./utils/**/*.{js,ts,jsx,tsx}"],
  plugins: [require("daisyui")],
  darkTheme: "dark",
  darkMode: ["selector", "[data-theme='dark']"],
  daisyui: {
    themes: [
      {
        light: {
          primary: "#93BBFB",
          "primary-content": "#212638",
          secondary: "#DAE8FF",
          "secondary-content": "#212638",
          accent: "#93BBFB",
          "accent-content": "#212638",
          neutral: "#212638",
          "neutral-content": "#ffffff",
          "base-100": "#ffffff",
          "base-200": "#f4f8ff",
          "base-300": "#DAE8FF",
          "base-content": "#212638",
          info: "#93BBFB",
          success: "#34EEB6",
          warning: "#FFCF72",
          error: "#FF8863",
          "--rounded-btn": "9999rem",
          ".tooltip": { "--tooltip-tail": "6px" },
          ".link": { textUnderlineOffset: "2px" },
          ".link:hover": { opacity: "80%" },
        },
      },
      {
        dark: {
          primary: "#212638",
          "primary-content": "#F9FBFF",
          secondary: "#323f61",
          "secondary-content": "#F9FBFF",
          accent: "#4969A6",
          "accent-content": "#F9FBFF",
          neutral: "#F9FBFF",
          "neutral-content": "#385183",
          "base-100": "#385183",
          "base-200": "#2A3655",
          "base-300": "#212638",
          "base-content": "#F9FBFF",
          info: "#385183",
          success: "#34EEB6",
          warning: "#FFCF72",
          error: "#FF8863",
          "--rounded-btn": "9999rem",
          ".tooltip": { "--tooltip-tail": "6px", "--tooltip-color": "oklch(var(--p))" },
          ".link": { textUnderlineOffset: "2px" },
          ".link:hover": { opacity: "80%" },
        },
      },
    ],
  },
  theme: {
    extend: {
      boxShadow: { center: "0 0 12px -2px rgb(0 0 0 / 0.05)" },
      animation: { "pulse-fast": "pulse 1s cubic-bezier(0.4, 0, 0.6, 1) infinite" },
    },
  },
};


================================================
File: web-nfc/packages/nextjs/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2020",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "~~/*": [
        "./*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strict": false
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}


================================================
File: web-nfc/packages/nextjs/.env.example
================================================
# Template for NextJS environment variables.

# For local development, copy this file, rename it to .env.local, and fill in the values.
# When deploying live, you'll need to store the vars in Vercel/System config.

# If not set, we provide default values (check `scaffold.config.ts`) so developers can start prototyping out of the box,
# but we recommend getting your own API Keys for Production Apps.

# To access the values stored in this env file you can use: process.env.VARIABLENAME
# You'll need to prefix the variables names with NEXT_PUBLIC_ if you want to access them on the client side.
# More info: https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables
NEXT_PUBLIC_ALCHEMY_API_KEY=4oU9jQ0HLgjlGgbTzvxUO5pLTXA7vQ3s
NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID=


================================================
File: web-nfc/packages/nextjs/app/constants.ts
================================================
export const walletManager = {
    address: "0x256Bac4CCD510f812efAE680a61e6Ebd6356F5EA",
    abi: [
      {
        inputs: [
          {
            internalType: "address",
            name: "_entryPoint",
            type: "address",
          },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
      },
      {
        inputs: [],
        name: "WalletAlreadyExists",
        type: "error",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes",
            name: "user",
            type: "bytes",
          },
          {
            indexed: true,
            internalType: "string",
            name: "carId",
            type: "string",
          },
          {
            indexed: false,
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        name: "WalletCreated",
        type: "event",
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        name: "carIdToWallet",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "userProof",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "carId",
            type: "string",
          },
        ],
        name: "createWalletForCar",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "userProof",
            type: "bytes",
          },
        ],
        name: "getProfile",
        outputs: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "gender",
                type: "string",
              },
              {
                internalType: "string",
                name: "city",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "pincode",
                type: "uint256",
              },
            ],
            internalType: "struct WalletManager.Person",
            name: "",
            type: "tuple",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "user",
            type: "bytes",
          },
        ],
        name: "getUserCars",
        outputs: [
          {
            internalType: "string[]",
            name: "",
            type: "string[]",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "carId",
            type: "string",
          },
        ],
        name: "getWalletForCar",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "userProof",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "_name",
            type: "string",
          },
          {
            internalType: "string",
            name: "_gender",
            type: "string",
          },
          {
            internalType: "string",
            name: "_city",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "_pincode",
            type: "uint256",
          },
        ],
        name: "setProfile",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        name: "userCars",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
    ],
  };
  
  export const userWallet = {
    address: "",
    abi: [
      {
        inputs: [
          {
            internalType: "address",
            name: "entryPoint",
            type: "address",
          },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
      },
      {
        inputs: [],
        name: "ECDSAInvalidSignature",
        type: "error",
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "length",
            type: "uint256",
          },
        ],
        name: "ECDSAInvalidSignatureLength",
        type: "error",
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        name: "ECDSAInvalidSignatureS",
        type: "error",
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes",
          },
        ],
        name: "MinimalAccount__CallFailed",
        type: "error",
      },
      {
        inputs: [],
        name: "MinimalAccount__OnlyEntryPointAllowed",
        type: "error",
      },
      {
        inputs: [],
        name: "MinimalAccount__OnlyEntryPointOrOwnerAllowed",
        type: "error",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        name: "OwnableInvalidOwner",
        type: "error",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
        ],
        name: "OwnableUnauthorizedAccount",
        type: "error",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address",
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address",
          },
        ],
        name: "OwnershipTransferred",
        type: "event",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "dest",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "functionData",
            type: "bytes",
          },
        ],
        name: "execute",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "newOwner",
            type: "address",
          },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "sender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "initCode",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
              {
                internalType: "bytes32",
                name: "accountGasLimits",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "preVerificationGas",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "gasFees",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "paymasterAndData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
              },
            ],
            internalType: "struct PackedUserOperation",
            name: "userOp",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "userOpHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "missingAccountFunds",
            type: "uint256",
          },
        ],
        name: "validateUserOp",
        outputs: [
          {
            internalType: "uint256",
            name: "validationData",
            type: "uint256",
          },
        ],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        stateMutability: "payable",
        type: "receive",
      },
    ],
  };
  

================================================
File: web-nfc/packages/nextjs/app/layout.tsx
================================================
import { Poppins } from "next/font/google";
import "@rainbow-me/rainbowkit/styles.css";
import { ScaffoldEthAppWithProviders } from "~~/components/ScaffoldEthAppWithProviders";
import { ThemeProvider } from "~~/components/ThemeProvider";
import "~~/styles/globals.css";
import { getMetadata } from "~~/utils/scaffold-eth/getMetadata";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-poppins",
});

export const metadata = getMetadata({ title: "Scaffold-ETH 2 App", description: "Built with 🏗 Scaffold-ETH 2" });

const ScaffoldEthApp = ({ children }: { children: React.ReactNode }) => {
  return (
    <html suppressHydrationWarning>
      <body style={{ backgroundColor: "black" }} className={poppins.className}>
        <ThemeProvider enableSystem>
          <ScaffoldEthAppWithProviders>{children}</ScaffoldEthAppWithProviders>
        </ThemeProvider>
      </body>
    </html>
  );
};

export default ScaffoldEthApp;


================================================
File: web-nfc/packages/nextjs/app/page.tsx
================================================
"use client";

import React, { useEffect } from "react";
import { useRouter } from "next/navigation";
import { LogInWithAnonAadhaar, useAnonAadhaar } from "@anon-aadhaar/react";

export default function Reader() {
  const router = useRouter();
  const [anonAadhaar] = useAnonAadhaar();

  useEffect(() => {
    if (anonAadhaar.status == "logged-in") {
      router.push("/fastags");
    }
  }, [anonAadhaar]);

  return (
    <div className="bg-[#13120d] flex flex-col items-center">
      <div className="w-[390px] h-[899px] py-2 bg-[#13120d] flex-col justify-start items-start gap-[9px] inline-flex">
        <div className="self-stretch h-[720.93px] pt-[229px] flex-col justify-start items-center gap-[94.69px] flex">
          <div className=" bg-[url('/logo1.png')] h-[230.80px] flex-col justify-center items-center gap-[12.74px] flex">
            <img src="/logo1.png" className="h-[230.80px] flex-col justify-center items-center gap-[12.74px] flex" />

          </div>
          <div className="self-stretch h-[166.44px] flex-col justify-start items-start gap-[23.84px] flex">
            <div className="self-stretch h-[57.61px] text-center text-white/80 text-[21.19px] font-medium font-['Clash Display'] leading-[29.13px]" style={{ fontFamily: "Poppins, sans-serif" }}>"Revolutionize toll payments <br />with blockchain."</div>
            <div className="self-stretch text-center text-white text-lg font-medium font-['Clash Display'] leading-[85px]" style={{ fontFamily: "Poppins, sans-serif" }}> Start your journey!</div>
          </div>
        </div>
        <div className="self-stretch h-[43.70px] flex-col justify-start items-start flex">
          <div className="self-stretch h-[43.70px] flex-col justify-center items-center flex">
            <div className="w-[323.79px] h-[43.70px] relative" style={{display:"flex", justifyContent:"center"}}>
              <LogInWithAnonAadhaar
                fieldsToReveal={["revealGender", "revealState", "revealPinCode"]}
                nullifierSeed={Number(process.env.NEXT_PUBLIC_SEED) || 1234}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================================================
File: web-nfc/packages/nextjs/app/reader.tsx
================================================
"use client";

import React from "react";
import { LogInWithAnonAadhaar, useAnonAadhaar } from "@anon-aadhaar/react";

export default function Reader() {
  const [anonAadhaar] = useAnonAadhaar();

  const handleLoginSuccess = (response) => {
    console.log("Login successful", response);

    // Send the login response (e.g., nullifier or proof) to your backend for verification
    fetch("/api/verify-login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ proof: response.proof }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          console.log("Authentication successful on server:", data);
          // Redirect or set user session
        } else {
          console.error("Authentication failed on server");
        }
      })
      .catch((error) => console.error("Error during server verification:", error));
  };

  return (
    <div>
      <h1>Log in with Anon Aadhaar</h1>
      <LogInWithAnonAadhaar 
        nullifierSeed="4354" 
        onSuccess={handleLoginSuccess}
        onError={(err) => console.error("Login error", err)}
      />
    </div>
  );
}


================================================
File: web-nfc/packages/nextjs/app/add/page.tsx
================================================
"use client";

import React, { useEffect, useState } from "react";
import revealSelectors from "./reveal-selectors.json";
import { useAnonAadhaar } from "@anon-aadhaar/react";
import { generateInput } from "@anon-digilocker/core/src/input-generator";
import { highlight, languages } from "prismjs/components/prism-core";
import Editor from "react-simple-code-editor";
import { groth16 } from "snarkjs";
import { stringToHex } from "viem";
import { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";

const artifactsUrl = process.env.NEXT_PUBLIC_ARTIFACTS_URL;

export default function Page() {
  const [xmlContent, setXmlContent] = useState("");
  const [vehicleId, setVehicleId] = useState("MJ20CA1343");
  const [status, setStatus] = useState("Create Wallet");
  const [proof, setProof] = useState();
  const [anonAadhaar] = useAnonAadhaar();

  const { writeContractAsync } = useScaffoldWriteContract("walletManager");

  function handleXMLChange(newXml) {
    setXmlContent(newXml);

    const hasMatch = revealSelectors.some(selector => {
      const searchKey = `<CertificateData><${selector.documentType}`;

      if (!newXml.includes(searchKey)) {
        return false;
      }

      return true;
    });
  }

  async function generateProof(e) {
    e.preventDefault();

    try {
      const nullifierSeed = Number(process.env.NEXT_PUBLIC_SEED) || 1234;

      setStatus("Generating input...");

      const cleanXml = xmlContent.replace("\n", "").trim();
      const inputs = await generateInput(cleanXml, {
        nullifierSeed: 1,
      });

      setStatus("Generating proof...");

      const startTime = performance.now();
      const fullProof = await groth16.fullProve(
        inputs,
        `${artifactsUrl}digilocker-verifier.wasm`,
        `${artifactsUrl}circuit_final.zkey`,
        console,
      );
      const result = await groth16.verify(
        await fetch(`${artifactsUrl}vkey.json`).then(res => res.json()),
        fullProof.publicSignals,
        fullProof.proof,
      );
      const endTime = performance.now();
      const duration = Math.round((endTime - startTime) / 1000);

      setStatus(result ? `Proof verified!` : "Proof failed!");

      if (result) {
        setProof(fullProof);
      }

      return result && fullProof;
    } catch (e) {
      console.log(e.message);
      setStatus(`Error: ${e.message}`);
    } finally {
    }
  }

  const createWallet = (e: any) => {
    e.preventDefault();
    try {
      const nullifier = JSON.parse(anonAadhaar.anonAadhaarProofs[0].pcd).proof.nullifier;

      if (true) {
        writeContractAsync({
          functionName: "createWalletForCar",
          args: [stringToHex(nullifier), vehicleId],
        });
      } else {
        setStatus("Proof failed!");
      }
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <div className="w-full flex justify-center items-center bg-[#13120D]">
      <div className="w-[390px] h-[876px] flex-col justify-start items-start gap-[31px] inline-flex">
        <div className="self-stretch h-[796.07px] flex-col justify-start items-start gap-11 flex">
          <div className="self-stretch h-[102.07px] px-8 pt-[83px] pb-1 flex-col justify-start items-start gap-2.5 flex" />
          <div className="w-[391px] h-[650px] flex-col justify-start items-center gap-11 flex">
            <div className="self-stretch h-[650.17px] flex-col justify-center items-center gap-[21.19px] flex">
              <div className="self-stretch h-[203.78px] flex-col justify-start items-center gap-[32.44px] flex">
                <div className="self-stretch px-[33.11px] py-[6.62px] justify-start items-center gap-[8.61px] inline-flex">
                  <div className="text-white/90 text-2xl font-medium font-['Clash Display'] leading-normal">
                    New FASTag
                  </div>
                </div>
                <div className="w-[323.13px] justify-start items-start gap-[9.93px] inline-flex">
                  <div className="w-[103px] h-[2.50px] bg-white rounded-[11px]" />
                  <div className="w-[103px] h-[2.50px] bg-white rounded-[11px]" />
                  <div className="w-[103px] h-[2.50px] bg-[#AEAFAF] rounded-[11px]" />
                </div>
                <div className="self-stretch h-[97.84px] flex-col justify-start items-start flex">
                  <div className="px-[33.11px] py-[6.62px] justify-center items-center gap-[6.62px] inline-flex">
                    <div className="text-white text-base font-medium font-['Clash Display'] leading-7">
                      Upload Vehicle Documents
                    </div>
                  </div>
                  <div className="self-stretch px-[33.11px] py-[6.62px] justify-start items-start gap-[6.62px] inline-flex">
                    <div className="w-[315.18px] text-white/70 text-base font-normal font-['Clash Display'] leading-snug">
                      Please Upload your ID proof which is updated with latest details
                    </div>
                  </div>
                </div>
              </div>
              <form
                className="h-[425.20px] flex-col justify-start items-center gap-[26.49px] flex"
                onSubmit={createWallet}
              >
                <div className="self-stretch h-[89.97px] flex-col justify-center items-center gap-[7.28px] flex">
                  <div className="self-stretch grow shrink basis-0 flex-col justify-start items-start flex">
                    <div className="p-[6.62px] justify-center items-center gap-[6.62px] inline-flex">
                      <div className="text-white/90 text-sm font-medium font-['Clash Display'] leading-9">
                        Vehicle Number
                      </div>
                    </div>
                    <div className="w-[323.12px] h-[39.73px] relative">
                      <input
                        type="text"
                        value={vehicleId}
                        onChange={e => setVehicleId(e.target.value)}
                        className="w-full text-white py-2 px-4 rounded"
                        style={{ backgroundColor: "#191919", color: "gray", fontFamily: "Poppins, sans-serif" }}
                      />
                    </div>
                  </div>
                </div>
                <div className="self-stretch h-[187.58px] flex-col justify-start items-start gap-[7.28px] flex">
                  <div className="self-stretch h-[187.58px] flex-col justify-start items-center gap-[13.90px] flex">
                    <div className="self-stretch px-[5.30px] justify-center items-center gap-[6.62px] inline-flex">
                      <div className="w-[292.67px] text-white text-base font-medium font-['Clash Display'] leading-7">
                        Vehicle ID Proof
                      </div>
                    </div>
                    <Editor
                      value={xmlContent}
                      onValueChange={code => handleXMLChange(code)}
                      highlight={code => highlight(code, languages.text)}
                      padding={10}
                      style={{
                        backgroundColor: "#f5f5f5",
                        fontFamily: '"Fira code", "Fira Mono", monospace',
                        fontSize: 12,
                        height: "400px",
                        width: "90%",
                        overflowY: "scroll",
                        marginTop: "10px",
                      }}
                    />
                  </div>
                </div>
                <div className="self-stretch h-[94.69px] flex-col justify-center items-center gap-[7.28px] flex">
                  <div className="w-[323.79px] h-[43.70px] relative">
                    <div className="w-[323.79px] h-[43.70px] left-0 top-0 absolute bg-[#F8C43B] rounded-lg" />
                    <button
                      className="w-[323.79px] left-0 top-[7.95px] absolute text-center text-black text-base font-medium font-['Clash Display'] leading-7"
                      type="submit"
                    >
                      {status}
                    </button>
                  </div>
                  <div className="w-[323.79px] h-[43.70px] relative">
                    <div className="w-[323.79px] h-[43.70px] left-0 top-0 absolute bg-[#1F1F1F] rounded-lg" />
                    <div className="w-[323.79px] left-0 top-[7.95px] absolute text-center text-[#F5D949] text-base font-medium font-['Clash Display'] leading-7">
                      back
                    </div>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
File: web-nfc/packages/nextjs/app/add/reveal-selectors.json
================================================
[
  {
    "documentType": "PAN",
    "revealStart": "num=\"",
    "revealEnd": "\""
  },
  {
    "documentType": "DrivingLicense",
    "revealStart": "abbreviation=\"",
    "revealEnd": "\""
  }
]


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/layout.tsx
================================================
import { getMetadata } from "~~/utils/scaffold-eth/getMetadata";

export const metadata = getMetadata({
  title: "Block Explorer",
  description: "Block Explorer created with 🏗 Scaffold-ETH 2",
});

const BlockExplorerLayout = ({ children }: { children: React.ReactNode }) => {
  return <>{children}</>;
};

export default BlockExplorerLayout;


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { PaginationButton, SearchBar, TransactionsTable } from "./_components";
import type { NextPage } from "next";
import { hardhat } from "viem/chains";
import { useFetchBlocks } from "~~/hooks/scaffold-eth";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { notification } from "~~/utils/scaffold-eth";

const BlockExplorer: NextPage = () => {
  const { blocks, transactionReceipts, currentPage, totalBlocks, setCurrentPage, error } = useFetchBlocks();
  const { targetNetwork } = useTargetNetwork();
  const [isLocalNetwork, setIsLocalNetwork] = useState(true);
  const [hasError, setHasError] = useState(false);

  useEffect(() => {
    if (targetNetwork.id !== hardhat.id) {
      setIsLocalNetwork(false);
    }
  }, [targetNetwork.id]);

  useEffect(() => {
    if (targetNetwork.id === hardhat.id && error) {
      setHasError(true);
    }
  }, [targetNetwork.id, error]);

  useEffect(() => {
    if (!isLocalNetwork) {
      notification.error(
        <>
          <p className="font-bold mt-0 mb-1">
            <code className="italic bg-base-300 text-base font-bold"> targetNetwork </code> is not localhost
          </p>
          <p className="m-0">
            - You are on <code className="italic bg-base-300 text-base font-bold">{targetNetwork.name}</code> .This
            block explorer is only for <code className="italic bg-base-300 text-base font-bold">localhost</code>.
          </p>
          <p className="mt-1 break-normal">
            - You can use{" "}
            <a className="text-accent" href={targetNetwork.blockExplorers?.default.url}>
              {targetNetwork.blockExplorers?.default.name}
            </a>{" "}
            instead
          </p>
        </>,
      );
    }
  }, [
    isLocalNetwork,
    targetNetwork.blockExplorers?.default.name,
    targetNetwork.blockExplorers?.default.url,
    targetNetwork.name,
  ]);

  useEffect(() => {
    if (hasError) {
      notification.error(
        <>
          <p className="font-bold mt-0 mb-1">Cannot connect to local provider</p>
          <p className="m-0">
            - Did you forget to run <code className="italic bg-base-300 text-base font-bold">yarn chain</code> ?
          </p>
          <p className="mt-1 break-normal">
            - Or you can change <code className="italic bg-base-300 text-base font-bold">targetNetwork</code> in{" "}
            <code className="italic bg-base-300 text-base font-bold">scaffold.config.ts</code>
          </p>
        </>,
      );
    }
  }, [hasError]);

  return (
    <div className="container mx-auto my-10">
      <SearchBar />
      <TransactionsTable blocks={blocks} transactionReceipts={transactionReceipts} />
      <PaginationButton currentPage={currentPage} totalItems={Number(totalBlocks)} setCurrentPage={setCurrentPage} />
    </div>
  );
};

export default BlockExplorer;


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/AddressCodeTab.tsx
================================================
type AddressCodeTabProps = {
  bytecode: string;
  assembly: string;
};

export const AddressCodeTab = ({ bytecode, assembly }: AddressCodeTabProps) => {
  const formattedAssembly = Array.from(assembly.matchAll(/\w+( 0x[a-fA-F0-9]+)?/g))
    .map(it => it[0])
    .join("\n");

  return (
    <div className="flex flex-col gap-3 p-4">
      Bytecode
      <div className="mockup-code -indent-5 overflow-y-auto max-h-[500px]">
        <pre className="px-5">
          <code className="whitespace-pre-wrap overflow-auto break-words">{bytecode}</code>
        </pre>
      </div>
      Opcodes
      <div className="mockup-code -indent-5 overflow-y-auto max-h-[500px]">
        <pre className="px-5">
          <code>{formattedAssembly}</code>
        </pre>
      </div>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/AddressComponent.tsx
================================================
import { BackButton } from "./BackButton";
import { ContractTabs } from "./ContractTabs";
import { Address, Balance } from "~~/components/scaffold-eth";

export const AddressComponent = ({
  address,
  contractData,
}: {
  address: string;
  contractData: { bytecode: string; assembly: string } | null;
}) => {
  return (
    <div className="m-10 mb-20">
      <div className="flex justify-start mb-5">
        <BackButton />
      </div>
      <div className="col-span-5 grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-10">
        <div className="col-span-1 flex flex-col">
          <div className="bg-base-100 border-base-300 border shadow-md shadow-secondary rounded-3xl px-6 lg:px-8 mb-6 space-y-1 py-4 overflow-x-auto">
            <div className="flex">
              <div className="flex flex-col gap-1">
                <Address address={address} format="long" onlyEnsOrAddress />
                <div className="flex gap-1 items-center">
                  <span className="font-bold text-sm">Balance:</span>
                  <Balance address={address} className="text" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <ContractTabs address={address} contractData={contractData} />
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/AddressLogsTab.tsx
================================================
import { Address } from "viem";
import { useContractLogs } from "~~/hooks/scaffold-eth";
import { replacer } from "~~/utils/scaffold-eth/common";

export const AddressLogsTab = ({ address }: { address: Address }) => {
  const contractLogs = useContractLogs(address);

  return (
    <div className="flex flex-col gap-3 p-4">
      <div className="mockup-code overflow-auto max-h-[500px]">
        <pre className="px-5 whitespace-pre-wrap break-words">
          {contractLogs.map((log, i) => (
            <div key={i}>
              <strong>Log:</strong> {JSON.stringify(log, replacer, 2)}
            </div>
          ))}
        </pre>
      </div>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/AddressStorageTab.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { Address, createPublicClient, http, toHex } from "viem";
import { hardhat } from "viem/chains";

const publicClient = createPublicClient({
  chain: hardhat,
  transport: http(),
});

export const AddressStorageTab = ({ address }: { address: Address }) => {
  const [storage, setStorage] = useState<string[]>([]);

  useEffect(() => {
    const fetchStorage = async () => {
      try {
        const storageData = [];
        let idx = 0;

        while (true) {
          const storageAtPosition = await publicClient.getStorageAt({
            address: address,
            slot: toHex(idx),
          });

          if (storageAtPosition === "0x" + "0".repeat(64)) break;

          if (storageAtPosition) {
            storageData.push(storageAtPosition);
          }

          idx++;
        }
        setStorage(storageData);
      } catch (error) {
        console.error("Failed to fetch storage:", error);
      }
    };

    fetchStorage();
  }, [address]);

  return (
    <div className="flex flex-col gap-3 p-4">
      {storage.length > 0 ? (
        <div className="mockup-code overflow-auto max-h-[500px]">
          <pre className="px-5 whitespace-pre-wrap break-words">
            {storage.map((data, i) => (
              <div key={i}>
                <strong>Storage Slot {i}:</strong> {data}
              </div>
            ))}
          </pre>
        </div>
      ) : (
        <div className="text-lg">This contract does not have any variables.</div>
      )}
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/BackButton.tsx
================================================
"use client";

import { useRouter } from "next/navigation";

export const BackButton = () => {
  const router = useRouter();
  return (
    <button className="btn btn-sm btn-primary" onClick={() => router.back()}>
      Back
    </button>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/ContractTabs.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { AddressCodeTab } from "./AddressCodeTab";
import { AddressLogsTab } from "./AddressLogsTab";
import { AddressStorageTab } from "./AddressStorageTab";
import { PaginationButton } from "./PaginationButton";
import { TransactionsTable } from "./TransactionsTable";
import { createPublicClient, http } from "viem";
import { hardhat } from "viem/chains";
import { useFetchBlocks } from "~~/hooks/scaffold-eth";

type AddressCodeTabProps = {
  bytecode: string;
  assembly: string;
};

type PageProps = {
  address: string;
  contractData: AddressCodeTabProps | null;
};

const publicClient = createPublicClient({
  chain: hardhat,
  transport: http(),
});

export const ContractTabs = ({ address, contractData }: PageProps) => {
  const { blocks, transactionReceipts, currentPage, totalBlocks, setCurrentPage } = useFetchBlocks();
  const [activeTab, setActiveTab] = useState("transactions");
  const [isContract, setIsContract] = useState(false);

  useEffect(() => {
    const checkIsContract = async () => {
      const contractCode = await publicClient.getBytecode({ address: address });
      setIsContract(contractCode !== undefined && contractCode !== "0x");
    };

    checkIsContract();
  }, [address]);

  const filteredBlocks = blocks.filter(block =>
    block.transactions.some(tx => {
      if (typeof tx === "string") {
        return false;
      }
      return tx.from.toLowerCase() === address.toLowerCase() || tx.to?.toLowerCase() === address.toLowerCase();
    }),
  );

  return (
    <>
      {isContract && (
        <div className="tabs tabs-lifted w-min">
          <button
            className={`tab ${activeTab === "transactions" ? "tab-active" : ""}`}
            onClick={() => setActiveTab("transactions")}
          >
            Transactions
          </button>
          <button className={`tab ${activeTab === "code" ? "tab-active" : ""}`} onClick={() => setActiveTab("code")}>
            Code
          </button>
          <button
            className={`tab  ${activeTab === "storage" ? "tab-active" : ""}`}
            onClick={() => setActiveTab("storage")}
          >
            Storage
          </button>
          <button className={`tab  ${activeTab === "logs" ? "tab-active" : ""}`} onClick={() => setActiveTab("logs")}>
            Logs
          </button>
        </div>
      )}
      {activeTab === "transactions" && (
        <div className="pt-4">
          <TransactionsTable blocks={filteredBlocks} transactionReceipts={transactionReceipts} />
          <PaginationButton
            currentPage={currentPage}
            totalItems={Number(totalBlocks)}
            setCurrentPage={setCurrentPage}
          />
        </div>
      )}
      {activeTab === "code" && contractData && (
        <AddressCodeTab bytecode={contractData.bytecode} assembly={contractData.assembly} />
      )}
      {activeTab === "storage" && <AddressStorageTab address={address} />}
      {activeTab === "logs" && <AddressLogsTab address={address} />}
    </>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/PaginationButton.tsx
================================================
import { ArrowLeftIcon, ArrowRightIcon } from "@heroicons/react/24/outline";

type PaginationButtonProps = {
  currentPage: number;
  totalItems: number;
  setCurrentPage: (page: number) => void;
};

const ITEMS_PER_PAGE = 20;

export const PaginationButton = ({ currentPage, totalItems, setCurrentPage }: PaginationButtonProps) => {
  const isPrevButtonDisabled = currentPage === 0;
  const isNextButtonDisabled = currentPage + 1 >= Math.ceil(totalItems / ITEMS_PER_PAGE);

  const prevButtonClass = isPrevButtonDisabled ? "btn-disabled cursor-default" : "btn-primary";
  const nextButtonClass = isNextButtonDisabled ? "btn-disabled cursor-default" : "btn-primary";

  if (isNextButtonDisabled && isPrevButtonDisabled) return null;

  return (
    <div className="mt-5 justify-end flex gap-3 mx-5">
      <button
        className={`btn btn-sm ${prevButtonClass}`}
        disabled={isPrevButtonDisabled}
        onClick={() => setCurrentPage(currentPage - 1)}
      >
        <ArrowLeftIcon className="h-4 w-4" />
      </button>
      <span className="self-center text-primary-content font-medium">Page {currentPage + 1}</span>
      <button
        className={`btn btn-sm ${nextButtonClass}`}
        disabled={isNextButtonDisabled}
        onClick={() => setCurrentPage(currentPage + 1)}
      >
        <ArrowRightIcon className="h-4 w-4" />
      </button>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/SearchBar.tsx
================================================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { isAddress, isHex } from "viem";
import { hardhat } from "viem/chains";
import { usePublicClient } from "wagmi";

export const SearchBar = () => {
  const [searchInput, setSearchInput] = useState("");
  const router = useRouter();

  const client = usePublicClient({ chainId: hardhat.id });

  const handleSearch = async (event: React.FormEvent) => {
    event.preventDefault();
    if (isHex(searchInput)) {
      try {
        const tx = await client?.getTransaction({ hash: searchInput });
        if (tx) {
          router.push(`/blockexplorer/transaction/${searchInput}`);
          return;
        }
      } catch (error) {
        console.error("Failed to fetch transaction:", error);
      }
    }

    if (isAddress(searchInput)) {
      router.push(`/blockexplorer/address/${searchInput}`);
      return;
    }
  };

  return (
    <form onSubmit={handleSearch} className="flex items-center justify-end mb-5 space-x-3 mx-5">
      <input
        className="border-primary bg-base-100 text-base-content placeholder:text-base-content/50 p-2 mr-2 w-full md:w-1/2 lg:w-1/3 rounded-md shadow-md focus:outline-none focus:ring-2 focus:ring-accent"
        type="text"
        value={searchInput}
        placeholder="Search by hash or address"
        onChange={e => setSearchInput(e.target.value)}
      />
      <button className="btn btn-sm btn-primary" type="submit">
        Search
      </button>
    </form>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/TransactionHash.tsx
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import CopyToClipboard from "react-copy-to-clipboard";
import { CheckCircleIcon, DocumentDuplicateIcon } from "@heroicons/react/24/outline";

export const TransactionHash = ({ hash }: { hash: string }) => {
  const [addressCopied, setAddressCopied] = useState(false);

  return (
    <div className="flex items-center">
      <Link href={`/blockexplorer/transaction/${hash}`}>
        {hash?.substring(0, 6)}...{hash?.substring(hash.length - 4)}
      </Link>
      {addressCopied ? (
        <CheckCircleIcon
          className="ml-1.5 text-xl font-normal text-base-content h-5 w-5 cursor-pointer"
          aria-hidden="true"
        />
      ) : (
        <CopyToClipboard
          text={hash as string}
          onCopy={() => {
            setAddressCopied(true);
            setTimeout(() => {
              setAddressCopied(false);
            }, 800);
          }}
        >
          <DocumentDuplicateIcon className="ml-1.5 text-xl font-normal h-5 w-5 cursor-pointer" aria-hidden="true" />
        </CopyToClipboard>
      )}
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/TransactionsTable.tsx
================================================
import { TransactionHash } from "./TransactionHash";
import { formatEther } from "viem";
import { Address } from "~~/components/scaffold-eth";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { TransactionWithFunction } from "~~/utils/scaffold-eth";
import { TransactionsTableProps } from "~~/utils/scaffold-eth/";

export const TransactionsTable = ({ blocks, transactionReceipts }: TransactionsTableProps) => {
  const { targetNetwork } = useTargetNetwork();

  return (
    <div className="flex justify-center px-4 md:px-0">
      <div className="overflow-x-auto w-full shadow-2xl rounded-xl">
        <table className="table text-xl bg-base-100 table-zebra w-full md:table-md table-sm">
          <thead>
            <tr className="rounded-xl text-sm text-base-content">
              <th className="bg-primary">Transaction Hash</th>
              <th className="bg-primary">Function Called</th>
              <th className="bg-primary">Block Number</th>
              <th className="bg-primary">Time Mined</th>
              <th className="bg-primary">From</th>
              <th className="bg-primary">To</th>
              <th className="bg-primary text-end">Value ({targetNetwork.nativeCurrency.symbol})</th>
            </tr>
          </thead>
          <tbody>
            {blocks.map(block =>
              (block.transactions as TransactionWithFunction[]).map(tx => {
                const receipt = transactionReceipts[tx.hash];
                const timeMined = new Date(Number(block.timestamp) * 1000).toLocaleString();
                const functionCalled = tx.input.substring(0, 10);

                return (
                  <tr key={tx.hash} className="hover text-sm">
                    <td className="w-1/12 md:py-4">
                      <TransactionHash hash={tx.hash} />
                    </td>
                    <td className="w-2/12 md:py-4">
                      {tx.functionName === "0x" ? "" : <span className="mr-1">{tx.functionName}</span>}
                      {functionCalled !== "0x" && (
                        <span className="badge badge-primary font-bold text-xs">{functionCalled}</span>
                      )}
                    </td>
                    <td className="w-1/12 md:py-4">{block.number?.toString()}</td>
                    <td className="w-2/1 md:py-4">{timeMined}</td>
                    <td className="w-2/12 md:py-4">
                      <Address address={tx.from} size="sm" onlyEnsOrAddress />
                    </td>
                    <td className="w-2/12 md:py-4">
                      {!receipt?.contractAddress ? (
                        tx.to && <Address address={tx.to} size="sm" onlyEnsOrAddress />
                      ) : (
                        <div className="relative">
                          <Address address={receipt.contractAddress} size="sm" onlyEnsOrAddress />
                          <small className="absolute top-4 left-4">(Contract Creation)</small>
                        </div>
                      )}
                    </td>
                    <td className="text-right md:py-4">
                      {formatEther(tx.value)} {targetNetwork.nativeCurrency.symbol}
                    </td>
                  </tr>
                );
              }),
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/_components/index.tsx
================================================
export * from "./SearchBar";
export * from "./BackButton";
export * from "./AddressCodeTab";
export * from "./TransactionHash";
export * from "./ContractTabs";
export * from "./PaginationButton";
export * from "./TransactionsTable";


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/address/[address]/page.tsx
================================================
import fs from "fs";
import path from "path";
import { foundry } from "viem/chains";
import { AddressComponent } from "~~/app/blockexplorer/_components/AddressComponent";
import deployedContracts from "~~/contracts/deployedContracts";
import { isZeroAddress } from "~~/utils/scaffold-eth/common";
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

type PageProps = {
  params: { address: string };
};

async function fetchByteCodeAndAssembly(buildInfoDirectory: string, contractPath: string) {
  const buildInfoFiles = fs.readdirSync(buildInfoDirectory);
  let bytecode = "";
  let assembly = "";

  for (let i = 0; i < buildInfoFiles.length; i++) {
    const filePath = path.join(buildInfoDirectory, buildInfoFiles[i]);

    const buildInfo = JSON.parse(fs.readFileSync(filePath, "utf8"));

    if (buildInfo.output.contracts[contractPath]) {
      for (const contract in buildInfo.output.contracts[contractPath]) {
        bytecode = buildInfo.output.contracts[contractPath][contract].evm.bytecode.object;
        assembly = buildInfo.output.contracts[contractPath][contract].evm.bytecode.opcodes;
        break;
      }
    }

    if (bytecode && assembly) {
      break;
    }
  }

  return { bytecode, assembly };
}

const getContractData = async (address: string) => {
  const contracts = deployedContracts as GenericContractsDeclaration | null;
  const chainId = foundry.id;
  let contractPath = "";

  const buildInfoDirectory = path.join(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "..",
    "..",
    "..",
    "foundry",
    "out",
    "build-info",
  );

  if (!fs.existsSync(buildInfoDirectory)) {
    throw new Error(`Directory ${buildInfoDirectory} not found.`);
  }

  const deployedContractsOnChain = contracts ? contracts[chainId] : {};
  for (const [contractName, contractInfo] of Object.entries(deployedContractsOnChain)) {
    if (contractInfo.address.toLowerCase() === address.toLowerCase()) {
      contractPath = `contracts/${contractName}.sol`;
      break;
    }
  }

  if (!contractPath) {
    // No contract found at this address
    return null;
  }

  const { bytecode, assembly } = await fetchByteCodeAndAssembly(buildInfoDirectory, contractPath);

  return { bytecode, assembly };
};

export function generateStaticParams() {
  // An workaround to enable static exports in Next.js, generating single dummy page.
  return [{ address: "0x0000000000000000000000000000000000000000" }];
}

const AddressPage = async ({ params }: PageProps) => {
  const address = params?.address as string;

  if (isZeroAddress(address)) return null;

  const contractData: { bytecode: string; assembly: string } | null = await getContractData(address);
  return <AddressComponent address={address} contractData={contractData} />;
};

export default AddressPage;


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/transaction/[txHash]/page.tsx
================================================
import TransactionComp from "../_components/TransactionComp";
import type { NextPage } from "next";
import { Hash } from "viem";
import { isZeroAddress } from "~~/utils/scaffold-eth/common";

type PageProps = {
  params: { txHash?: Hash };
};

export function generateStaticParams() {
  // An workaround to enable static exports in Next.js, generating single dummy page.
  return [{ txHash: "0x0000000000000000000000000000000000000000" }];
}
const TransactionPage: NextPage<PageProps> = ({ params }: PageProps) => {
  const txHash = params?.txHash as Hash;

  if (isZeroAddress(txHash)) return null;

  return <TransactionComp txHash={txHash} />;
};

export default TransactionPage;


================================================
File: web-nfc/packages/nextjs/app/blockexplorer/transaction/_components/TransactionComp.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Hash, Transaction, TransactionReceipt, formatEther, formatUnits } from "viem";
import { hardhat } from "viem/chains";
import { usePublicClient } from "wagmi";
import { Address } from "~~/components/scaffold-eth";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { decodeTransactionData, getFunctionDetails } from "~~/utils/scaffold-eth";
import { replacer } from "~~/utils/scaffold-eth/common";

const TransactionComp = ({ txHash }: { txHash: Hash }) => {
  const client = usePublicClient({ chainId: hardhat.id });
  const router = useRouter();
  const [transaction, setTransaction] = useState<Transaction>();
  const [receipt, setReceipt] = useState<TransactionReceipt>();
  const [functionCalled, setFunctionCalled] = useState<string>();

  const { targetNetwork } = useTargetNetwork();

  useEffect(() => {
    if (txHash && client) {
      const fetchTransaction = async () => {
        const tx = await client.getTransaction({ hash: txHash });
        const receipt = await client.getTransactionReceipt({ hash: txHash });

        const transactionWithDecodedData = decodeTransactionData(tx);
        setTransaction(transactionWithDecodedData);
        setReceipt(receipt);

        const functionCalled = transactionWithDecodedData.input.substring(0, 10);
        setFunctionCalled(functionCalled);
      };

      fetchTransaction();
    }
  }, [client, txHash]);

  return (
    <div className="container mx-auto mt-10 mb-20 px-10 md:px-0">
      <button className="btn btn-sm btn-primary" onClick={() => router.back()}>
        Back
      </button>
      {transaction ? (
        <div className="overflow-x-auto">
          <h2 className="text-3xl font-bold mb-4 text-center text-primary-content">Transaction Details</h2>{" "}
          <table className="table rounded-lg bg-base-100 w-full shadow-lg md:table-lg table-md">
            <tbody>
              <tr>
                <td>
                  <strong>Transaction Hash:</strong>
                </td>
                <td>{transaction.hash}</td>
              </tr>
              <tr>
                <td>
                  <strong>Block Number:</strong>
                </td>
                <td>{Number(transaction.blockNumber)}</td>
              </tr>
              <tr>
                <td>
                  <strong>From:</strong>
                </td>
                <td>
                  <Address address={transaction.from} format="long" onlyEnsOrAddress />
                </td>
              </tr>
              <tr>
                <td>
                  <strong>To:</strong>
                </td>
                <td>
                  {!receipt?.contractAddress ? (
                    transaction.to && <Address address={transaction.to} format="long" onlyEnsOrAddress />
                  ) : (
                    <span>
                      Contract Creation:
                      <Address address={receipt.contractAddress} format="long" onlyEnsOrAddress />
                    </span>
                  )}
                </td>
              </tr>
              <tr>
                <td>
                  <strong>Value:</strong>
                </td>
                <td>
                  {formatEther(transaction.value)} {targetNetwork.nativeCurrency.symbol}
                </td>
              </tr>
              <tr>
                <td>
                  <strong>Function called:</strong>
                </td>
                <td>
                  <div className="w-full md:max-w-[600px] lg:max-w-[800px] overflow-x-auto whitespace-nowrap">
                    {functionCalled === "0x" ? (
                      "This transaction did not call any function."
                    ) : (
                      <>
                        <span className="mr-2">{getFunctionDetails(transaction)}</span>
                        <span className="badge badge-primary font-bold">{functionCalled}</span>
                      </>
                    )}
                  </div>
                </td>
              </tr>
              <tr>
                <td>
                  <strong>Gas Price:</strong>
                </td>
                <td>{formatUnits(transaction.gasPrice || 0n, 9)} Gwei</td>
              </tr>
              <tr>
                <td>
                  <strong>Data:</strong>
                </td>
                <td className="form-control">
                  <textarea readOnly value={transaction.input} className="p-0 textarea-primary bg-inherit h-[150px]" />
                </td>
              </tr>
              <tr>
                <td>
                  <strong>Logs:</strong>
                </td>
                <td>
                  <ul>
                    {receipt?.logs?.map((log, i) => (
                      <li key={i}>
                        <strong>Log {i} topics:</strong> {JSON.stringify(log.topics, replacer, 2)}
                      </li>
                    ))}
                  </ul>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      ) : (
        <p className="text-2xl text-base-content">Loading...</p>
      )}
    </div>
  );
};

export default TransactionComp;


================================================
File: web-nfc/packages/nextjs/app/digilocker/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import revealSelectors from "./reveal-selectors.json";
import { generateInput } from "@anon-digilocker/core/src/input-generator";
import { highlight, languages } from "prismjs/components/prism-core";
import Editor from "react-simple-code-editor";
import { groth16 } from "snarkjs";

const artifactsUrl = process.env.NEXT_PUBLIC_ARTIFACTS_URL;

export default function App() {
  const [xmlContent, setXmlContent] = useState("");
  const [status, setStatus] = useState("");
  const [proof, setProof] = useState();

  function handleXMLChange(newXml) {
    setXmlContent(newXml);

    const hasMatch = revealSelectors.some(selector => {
      const searchKey = `<CertificateData><${selector.documentType}`;

      if (!newXml.includes(searchKey)) {
        return false;
      }

      return true;
    });
  }

  async function handleSubmit(e) {
    e.preventDefault();
    document.getElementsByClassName("btn-submit")[0].disabled = true;

    try {
      const nullifierSeed = parseInt(e.target.nullifierSeed.value.trim());
      const signalStr = e.target.signal.value.trim();
      const signal = [...new TextEncoder().encode(signalStr)].reduce(
        (acc, byte, i) => acc + BigInt(byte) * BigInt(256) ** BigInt(i),
        BigInt(0),
      );

      setStatus("Generating input...");

      const cleanXml = xmlContent.replace("\n", "").trim();
      const inputs = await generateInput(cleanXml, {
        nullifierSeed,
        signal,
      });

      setStatus("Generating proof...");

      const startTime = performance.now();
      const fullProof = await groth16.fullProve(
        inputs,
        `${artifactsUrl}digilocker-verifier.wasm`,
        `${artifactsUrl}circuit_final.zkey`,
        console,
      );
      const result = await groth16.verify(
        await fetch(`${artifactsUrl}vkey.json`).then(res => res.json()),
        fullProof.publicSignals,
        fullProof.proof,
      );
      const endTime = performance.now();
      const duration = Math.round((endTime - startTime) / 1000);

      setStatus(result ? `Proof generated and verified in ${duration}s` : "Proof failed");

      if (result) {
        setProof(fullProof);
      }
    } catch (e) {
      setStatus(`Error: ${e.message}`);
    } finally {
      document.getElementsByClassName("btn-submit")[0].disabled = false;
    }
  }

  return (
    // eslint-disable-next-line react/jsx-filename-extension
    <div className="container pb-5 mb-12">
      <div className="box" style={{ maxWidth: "800px", margin: "0 auto" }}>
        <h1 className="mt-3 mb-3">Anon DigiLocker</h1>
        <hr />

        <div className="mb-3">
          <ul>
            <li>
              Open DigiLocker app and go to the <code>Issued</code> tab.
            </li>
            <li>
              Click the three dot menu icon against the document you want to prove and select <code>Download XML</code>.
            </li>
            <li>Copy the XMl content and paste in the form below.</li>
          </ul>
        </div>

        <hr />

        <form onSubmit={handleSubmit}>
          <label htmlFor="xml">DigiLocker XML (Paste below)</label>
          <Editor
            value={xmlContent}
            onValueChange={code => handleXMLChange(code)}
            highlight={code => highlight(code, languages.text)}
            padding={10}
            style={{
              backgroundColor: "#f5f5f5",
              fontFamily: '"Fira code", "Fira Mono", monospace',
              fontSize: 12,
              height: "400px",
              overflowY: "scroll",
              marginTop: "10px",
            }}
          />

          <hr />

          <div className="form-row row">
            <div>
              <h5>Selective Disclosure</h5>
              <p>
                You can reveal some data from the <code>{"<CertificateData />"}</code> node of the XML, as part of the
                proof. Type of the Document (PAN, DirivingLicense, etc.) will always be revealed.
              </p>
              <p>
                Enter the text from which the reveal should start and end. For example, in a PAN Verification Record XML
                you can reveal your PAN number which is between <code>num="</code> and <code>"</code> in the XML
              </p>
            </div>
          </div>

          <hr />

          <div className="form-group mb-3">
            <label htmlFor="nullifierSeed">Nullifier Seed (a random number for generating unique nullifier)</label>
            <input
              type="number"
              defaultValue="1"
              maxLength={30}
              className="form-control"
              name="nullifierSeed"
              id="nullifierSeed"
            />
          </div>

          <div className="form-group mb-3">
            <label htmlFor="signal">Signal (any message you want to sign as part of the proof)</label>
            <input type="text" className="form-control" name="signal" id="signal" />
          </div>

          <button disabled={!xmlContent} className="btn btn-submit btn-primary mt-4" type="submit">
            Submit
          </button>
        </form>

        {status.length > 0 && <div className="alert alert-light mt-4">{status}</div>}

        {proof && (
          <div className="alert alert-light">
            <code>
              <pre>{JSON.stringify(proof, null, 2)}</pre>
            </code>
          </div>
        )}
      </div>
    </div>
  );
}


================================================
File: web-nfc/packages/nextjs/app/digilocker/reveal-selectors.json
================================================
[
  {
    "documentType": "PAN",
    "revealStart": "num=\"",
    "revealEnd": "\""
  },
  {
    "documentType": "DrivingLicense",
    "revealStart": "abbreviation=\"",
    "revealEnd": "\""
  }
]


================================================
File: web-nfc/packages/nextjs/app/fastags/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { Poppins } from "next/font/google";
import Link from "next/link";
import { usePathname } from "next/navigation";
import FastagCard from "./components/FastagCard";
import { useAnonAadhaar } from "@anon-aadhaar/react";
import type { NextPage } from "next";
import { stringToBytes, stringToHex, toBytes } from "viem";
import { useBalance, useReadContracts } from "wagmi";
import { useScaffoldReadContract, useTransactor } from "~~/hooks/scaffold-eth";
import { getMetadata } from "~~/utils/scaffold-eth/getMetadata";

const poppins = Poppins({ subsets: ["latin"], weight: ["400"] });
const metadata = getMetadata({
  title: "FASTag Profiles",
  description: "View and manage your FASTag accounts",
});

const FASTagProfile: NextPage = () => {
  const [anonAadhaar] = useAnonAadhaar();
  // const { data } = useScaffoldReadContract({
  //   contractName: "walletManager",
  //   functionName: "getWalletForCar",
  //   args: ["MJ03SM2536"],
  // });

  // const { data: userCars } = useScaffoldReadContract({
  //   contractName: "walletManager",
  //   functionName: "getUserCars",
  //   args: [stringToHex(anonAadhaar)],
  // });

  const pcd = (anonAadhaar as any)?.anonAadhaarProofs
    ? (anonAadhaar as any)?.anonAadhaarProofs[0]?.pcd
    : '{ "proof": {}}';

  const { data: userCars } = useScaffoldReadContract({
    contractName: "walletManager",
    functionName: "getUserCars",
    args: [stringToHex(JSON.parse(pcd).proof.nullifier || "")],
  });

  console.log(userCars);

  // const wallets = userCars?.map((carId: any) => {
  //   const { data } = useScaffoldReadContract({
  //     contractName: "walletManager",
  //     functionName: "getWalletForCar",
  //     args: [carId],
  //   });
  //   return data;
  // });

  // console.log(anonAadhaar);
  // console.log(userCars, wallets);

  // const contracts: any = userCars?.map((car: any) => ({
  //   functionName: "getWalletForCar",
  //   args: [car],
  // }));

  // const result = useReadContracts({
  //   contracts: contracts,
  // });
  const transactor = useTransactor();

  const transferEth = async () => {
    try {
      // if (!address) return;
      const tx = await transactor({
        to: "0x15E41209168cC2cfac67983DF6a480dCC9343113", // to address
        value: 1000000000000000000n,
      });
      console.log(tx);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <>
      <div className="bg-black text-white h-screen flex flex-col items-center py-8">
        <div className="w-11/12 max-w-md">
          <Link href="/add" passHref>
            <button className="text-white" style={{ marginBottom: "20px", marginLeft: "320px", fontSize: "40px" }}>
              +
            </button>
          </Link>
          {userCars?.map((carId: any) => {
            return <FastagCard carId={carId} />;
          })}
        </div>
      </div>
    </>
  );
};

export default FASTagProfile;


================================================
File: web-nfc/packages/nextjs/app/fastags/[carId]/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import TransactionCard from "./TransactionCard";
import { timeStamp } from "console";
import type { NextPage } from "next";
import { useBalance } from "wagmi";
import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";

const formatCarId = (carId: string) => {
  return carId.slice(0, 2) + " " + carId.slice(2, 4) + " " + carId.slice(4, 10);
};

const formatAddress = (address: string | undefined) => {
  return address ? address?.slice(0, 6) + "..." + address?.slice(-4) : "...";
};

const Page: NextPage = ({ params }: { params: { carId: string } }) => {
  const { carId } = params;
  const [txs, setTxs] = useState([]);

  const { data: fastWalletAddress } = useScaffoldReadContract({
    contractName: "walletManager",
    functionName: "getWalletForCar",
    args: [carId],
  });

  const { data: balance } = useBalance({
    address: fastWalletAddress,
  });

  console.log(balance, fastWalletAddress);

  useEffect(() => {
    if (fastWalletAddress) {
      const fetchData = async () => {
        const testAddress = "0x74bbf4b2223496C4547c44268242A5196E3c6499";
        const res = await fetch(
          `https://base-sepolia.blockscout.com/api/v2/addresses/${testAddress}/transactions?filter=from`,
        );
        const data = await res.json();
        console.log(data);
        const finalData = data.items.map((item: any) => ({
          from: item.from?.hash,
          to: item.to?.hash,
          value: item.value,
          txHash: item.hash,
          timestamp: item.timestamp,
        }));

        setTxs([...finalData]);
      };
      fetchData();
    }
  }, [fastWalletAddress]);

  console.log(txs);

  return (
    <>
      <div className="bg-black text-white h-screen flex flex-col items-center py-8">
        <div className="w-11/12 max-w-md">
          <div className="bg-[url('/bg.png')] flex justify-between gap-4 bg-cover bg-center rounded-lg p-6 mb-6">
            <div className={"flex flex-col gap-2"}>
              <div style={{ marginLeft: "3px", color: "#5D5F69", fontSize: "12px" }}>
                {formatAddress(fastWalletAddress)}
              </div>
              <div style={{ marginLeft: "3px", color: "black", fontSize: "24px", fontWeight: "strong" }}>
                {formatCarId(carId)}
              </div>
            </div>
            <div
              className="bg-black flex"
              style={{ flexDirection: "column", padding: "15px", borderRadius: "10px", width: "45%", marginTop: "4px" }}
            >
              <span style={{ fontSize: "10px", marginBottom: "4px" }}>Total Balance</span>
              <span style={{ fontSize: "25px", color: "#F9CB29", fontWeight: "bold" }}>
                {balance?.formatted} {balance?.symbol}
              </span>
            </div>
          </div>

          <div className="w-full">
            <h2 className="text-xl font-semibold mb-4">Transactions</h2>
            {txs.length > 0 ? (
              txs.map((tx: any, index: number) => <TransactionCard tx={tx} key={index} />)
            ) : (
              <p>No transactions found</p>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Page;


================================================
File: web-nfc/packages/nextjs/app/fastags/[carId]/TransactionCard/index.tsx
================================================
"use client";

const TransactionCard = ({ tx }: { tx: any }) => {
  return (
    <div className="p-4 mb-4" style={{ borderBottom: "1px solid gray" }}>
      <span style={{ fontSize: "20px" }}> -&gt; {formatAddress(tx.txHash)}</span> <br />
      <span style={{ fontSize: "12px", marginLeft: "28px" }}>{timestampToTime(tx.timestamp)}</span>
      <span style={{ fontSize: "12px", marginLeft: "28px" }}> {timestampToDate(tx.timestamp)}</span>
      <span style={{ position: "absolute", fontSize: "17px", left: "280px", color: "#00CA1D" }}>
        {" "}
        {convertAmountToEther(tx.value)} ETH
      </span>
    </div>
  );
};

function formatAddress(address: any) {
  return address.slice(0, 6) + "..." + address.slice(-4);
}

function convertAmountToEther(amount: any) {
  return amount / 1000000000000000000;
}

function timestampToDateTime(timestamp: any) {
  var date = new Date(timestamp * 1000);
  var hours = date.getHours();
  var minutes = "0" + date.getMinutes();
  var seconds = "0" + date.getSeconds();
  var formattedTime = hours + ":" + minutes.substr(-2) + ":" + seconds.substr(-2);
  return formattedTime;
}

// function timestampToDate(timestamp: any) {
//   var date = new Date(timestamp * 1000);
//   var year = date.getFullYear();
//   var month = "0" + (date.getMonth() + 1);
//   var day = "0" + date.getDate();
//   var formattedDate = year + "-" + month.substr(-2) + "-" + day.substr(-2);
//   return formattedDate;
// }

//timestamp === "2024-10-19T11:28:48.000000Z"

function timestampToDate(timestamp: any) {
  var date = new Date(timestamp);
  var year = date.getFullYear();
  var month = "0" + (date.getMonth() + 1);
  var day = "0" + date.getDate();
  var formattedDate = year + "-" + month.substr(-2) + "-" + day.substr(-2);
  return formattedDate;
}

function timestampToTime(timestamp: any) {
  var date = new Date(timestamp);
  var hours = date.getHours();
  var minutes = "0" + date.getMinutes();
  var seconds = "0" + date.getSeconds();
  var formattedTime = hours + ":" + minutes.substr(-2) + ":" + seconds.substr(-2);
  return formattedTime;
}

export default TransactionCard;


================================================
File: web-nfc/packages/nextjs/app/fastags/components/FastagCard.tsx
================================================
"use client";

import Link from "next/link";
import { useBalance } from "wagmi";
import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";

const formatCarId = (carId: string) => {
  return carId.slice(0, 2) + " " + carId.slice(2, 4) + " " + carId.slice(4, 10);
};

const formatAddress = (address: string | undefined) => {
  return address ? address?.slice(0, 6) + "..." + address?.slice(-4) : "...";
};

const FastagCard = ({ carId }: { carId: string }) => {
  const { data } = useScaffoldReadContract({
    contractName: "walletManager",
    functionName: "getWalletForCar",
    args: [carId],
  });

  const { data: balance } = useBalance({
    address: data,
  });

  console.log(balance, data);
  return (
    <Link
      href={"/fastags/" + carId}
      className="bg-[url('/bg.png')] flex justify-between gap-4 bg-cover bg-center rounded-lg p-6 mb-6"
    >
      <div className={"flex flex-col gap-2"}>
        <div style={{ marginLeft: "3px", color: "#5D5F69", fontSize: "12px" }}>{formatAddress(data)}</div>
        <div style={{ marginLeft: "3px", color: "black", fontSize: "24px", fontWeight: "strong" }}>
          {formatCarId(carId)}
        </div>
      </div>
      <div
        className="bg-black flex"
        style={{ flexDirection: "column", padding: "15px", borderRadius: "10px", width: "45%", marginTop: "4px" }}
      >
        <span style={{ fontSize: "10px", marginBottom: "4px" }}>Total Balance</span>
        <span style={{ fontSize: "25px", color: "#F9CB29", fontWeight: "bold" }}>
          {balance?.formatted} {balance?.symbol}
        </span>
      </div>
    </Link>
  );
};

export default FastagCard;


================================================
File: web-nfc/packages/nextjs/app/home/page.tsx
================================================
"use client";

import { useState } from "react";
import { useAnonAadhaar } from "@anon-aadhaar/react";
import { groth16 } from "snarkjs";
import { stringToHex } from "viem";
import { useScaffoldWriteContract, useScaffoldReadContract } from "~~/hooks/scaffold-eth";
import { Poppins } from "next/font/google";

const poppins = Poppins({ subsets: ["latin"], weight: ["400"] });

const VehicleProfile = () => {
  const [xmlContent, setXmlContent] = useState("");
  const [vehicleId, setVehicleId] = useState("MH20CA1343");
  const [status, setStatus] = useState("Create Wallet");
  const [anonAadhaar] = useAnonAadhaar();

  const { writeContractAsync } = useScaffoldWriteContract("walletManager");

  const { data: walletData } = useScaffoldReadContract({
    contractName: "walletManager",
    functionName: "getWalletForCar",
    args: [vehicleId],
  });

  const generateProof = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("Generating proof...");

    try {
      const nullifierSeed = Number(process.env.NEXT_PUBLIC_SEED) || 1234;
      const cleanXml = xmlContent.replace("\n", "").trim();

      // Assuming generateInput is imported and available
      const inputs = await generateInput(cleanXml, { nullifierSeed });
      const fullProof = await groth16.fullProve(
        inputs,
        `${process.env.NEXT_PUBLIC_ARTIFACTS_URL}digilocker-verifier.wasm`,
        `${process.env.NEXT_PUBLIC_ARTIFACTS_URL}circuit_final.zkey`
      );

      const isValid = await groth16.verify(
        await fetch(`${process.env.NEXT_PUBLIC_ARTIFACTS_URL}vkey.json`).then((res) => res.json()),
        fullProof.publicSignals,
        fullProof.proof
      );

      setStatus(isValid ? "Proof Verified!" : "Proof Verification Failed");
      return isValid ? fullProof : null;
    } catch (error) {
      console.error("Proof Generation Error:", error.message);
      setStatus("Error Generating Proof");
      return null;
    }
  };

  const createWallet = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("Creating Wallet...");
    try {
      const nullifier = JSON.parse(anonAadhaar?.anonAadhaarProofs?.[0]?.pcd)?.proof?.nullifier;

      if (nullifier) {
        await writeContractAsync({
          functionName: "createWalletForCar",
          args: [stringToHex(nullifier), vehicleId],
        });
        setStatus("Wallet Created Successfully!");
      } else {
        setStatus("Proof Invalid. Wallet Creation Failed.");
      }
    } catch (error) {
      console.error("Wallet Creation Error:", error.message);
      setStatus("Error Creating Wallet");
    }
  };

  return (
    <div className="bg-black text-white min-h-screen flex flex-col items-center py-8">
      <div className="w-11/12 max-w-xl">
        {/* Vehicle Details Section */}
        <div className="bg-[url('/bg.png')] bg-cover bg-center rounded-xl p-6 mb-6 relative">
          <div className={`${poppins.className} text-gray-500 text-sm`}>Volkswagen Polo :</div>
          <div className={`${poppins.className} text-black text-2xl font-bold`}>{vehicleId}</div>
          <div className="bg-black text-yellow-500 rounded-lg p-4 mt-4 w-1/2">
            <div className={`${poppins.className} text-sm mb-1`}>Total Balance</div>
            <div className={`${poppins.className} text-lg font-bold`}>$214.920</div>
          </div>
        </div>

        {/* Transactions Section */}
        <div>
          <h2 className="text-xl font-semibold mb-4">Transactions</h2>
          <div className="p-4 mb-4 border-b border-gray-600">
            <span className={`${poppins.className} text-lg`}>→ National Highway - 25</span> <br />
            <span className={`${poppins.className} text-sm text-gray-500`}>02:03 PM, 05 Aug 2022</span>
            <span className={`${poppins.className} text-lg text-green-500 float-right`}>-$180.87</span>
          </div>
          <div className="p-4 mb-4 border-b border-gray-600">
            <span className={`${poppins.className} text-lg`}>→ National Highway - 23</span> <br />
            <span className={`${poppins.className} text-sm text-gray-500`}>02:03 PM, 05 Aug 2022</span>
            <span className={`${poppins.className} text-lg text-green-500 float-right`}>-$201.12</span>
          </div>
          <div className="p-4 mb-4 border-b border-gray-600">
            <span className={`${poppins.className} text-lg`}>→ National Highway - 21</span> <br />
            <span className={`${poppins.className} text-sm text-gray-500`}>02:10 PM, 07 Aug 2022</span>
            <span className={`${poppins.className} text-lg text-green-500 float-right`}>-$190.23</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VehicleProfile;


================================================
File: web-nfc/packages/nextjs/app/profile/page.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { convertRevealBigIntToString } from "@anon-aadhaar/core";
import { useAnonAadhaar, useProver } from "@anon-aadhaar/react";
import type { NextPage } from "next";
import { stringToHex } from "viem";
import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";
import { getMetadata } from "~~/utils/scaffold-eth/getMetadata";

const metadata = getMetadata({
  title: "User Profile",
  description: "View and manage user profile details",
});

const UserProfile: NextPage = () => {
  const [anonAadhaar] = useAnonAadhaar();
  const [, LatestProof] = useProver();
  const [profile, setProfile] = useState({
    state: "",
    pincode: "",
    gender: "",
  });

  console.log(anonAadhaar);

  useEffect(() => {
    if (anonAadhaar.status === "logged-in" && LatestProof) {
      const { pincode, state, gender } = LatestProof.proof;
      console.log(LatestProof.proof);
      setProfile({
        state,
        pincode,
        gender: gender === "77" ? "Male" : "Female",
      });
    }
  }, [anonAadhaar.status, LatestProof]);

  console.log(profile);

  return (
    <>
      <div
        className="bg-black text-white flex flex-col items-center justify-center"
      >
        <div className="w-11/12 max-w-md">
          <div
            className="bg-[url('/dp.jpeg')] bg-cover bg-center w-24 h-24 rounded-full mx-auto mb-6"
          ></div>
          <h1
            className="text-center text-2xl font-semibold mb-6"
            style={{ fontFamily: "Poppins, sans-serif" }}
          >
            Alpha Dose
          </h1>
          <div className="space-y-6">
            <div>
              <label
                className="block text-white text-l"
                style={{ fontFamily: "Poppins, sans-serif", marginBottom: "10px" }}
              >
                State
              </label>
              <input
                type="text"
                value={convertRevealBigIntToString(profile.state)}
                className="w-full text-white py-2 px-4 rounded"
                style={{
                  backgroundColor: "#191919",
                  color: "gray",
                  fontFamily: "Poppins, sans-serif",
                }}
                disabled
              />
            </div>
            <div className="flex space-x-4">
              <div className="flex-1">
                <label
                  className="block text-white text-l"
                  style={{ fontFamily: "Poppins, sans-serif", marginBottom: "10px" }}
                >
                  Pin Code
                </label>
                <input
                  type="text"
                  value={profile.pincode}
                  className="w-full text-white py-2 px-4 rounded"
                  style={{
                    backgroundColor: "#191919",
                    color: "gray",
                    fontFamily: "Poppins, sans-serif",
                  }}
                  disabled
                />
              </div>
              <div className="flex-1">
                <label
                  className="block text-white text-l"
                  style={{ fontFamily: "Poppins, sans-serif", marginBottom: "10px" }}
                >
                  Gender
                </label>
                <input
                  type="text"
                  value={profile.gender === "77" ? "Male" : "Female"}
                  className="w-full text-white py-2 px-4 rounded"
                  style={{
                    backgroundColor: "#191919",
                    color: "gray",
                    fontFamily: "Poppins, sans-serif",
                  }}
                  disabled
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default UserProfile;


================================================
File: web-nfc/packages/nextjs/app/scanner/page.tsx
================================================
"use client";

import React, { useEffect, useState } from "react";
import Image from "next/image";
import NFCReader from "~~/components/NFCReader";
import { userWallet } from "~~/constants";
import { callContractFunction } from "~~/utils/contractwagmi";

interface Profile {
  user: {
    name: string;
    avatar: {
      fullUrl: string;
    };
  };
}

const privateKey = process.env.NEXT_PUBLIC_PRIVATE_KEY;
const destinationAddress = "0x4590e901091b3Add6e99235c02C4BD8F496B2CaB";

export default function Reader() {
  // const [urlRecord, setUrlRecord] = useState("");
  const [profile, setProfile] = useState<string>(null);
  const [serialNumber, setSerialNumber] = useState("");
  const [data, setData] = useState("");
  const [isDataRead, setIsDataRead] = useState(false);
  const [error, setError] = useState("");

  const handleNFCData = ({ message, serialNumber }: { message: any; serialNumber: string }) => {
    setSerialNumber(serialNumber);
    const textDecoder = new TextDecoder();
    for (const record of message.records) {
      setData(textDecoder.decode(record.data));
    }
    setIsDataRead(true);
  };

  const executeOnFastagWallet = async () => {
    try {
      const receipt = await callContractFunction({
        to: data,
        destinationAddress,
        value: "50000000000000",
        functionData: "0x",
      });
      setProfile(receipt);
    } catch (error) {
      setError(error?.message);
    }
  };

  useEffect(() => {
    if (isDataRead) {
      executeOnFastagWallet();
    }
  }, [isDataRead]);

  return (
    <div className="flex items-center justify-center mt-40">
      <div style={{ marginLeft: "14px" }}>
        <NFCReader onChange={handleNFCData} />
      </div>
      {profile && <p>Transaction Hash: {profile}</p>}
      {isDataRead.toString()}
      {data && <p>Data: {data}</p>}
      {error && <p>Error: {error}</p>}
    </div>
  );
}


================================================
File: web-nfc/packages/nextjs/components/Footer.tsx
================================================
import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";

type HeaderMenuLink = {
  label: string;
  href: string;
  icon?: React.ReactNode;
};

export const menuLinks: HeaderMenuLink[] = [
  {
    icon: "/home.svg",
    label: "Home",
    href: "/home",
  },
  {
    icon: "/wallet.svg",
    label: "Fastags",
    href: "/fastags",
  },
  {
    icon: "/scanner.svg",
    label: "Scanner",
    href: "/scanner",

  },
  {
    icon: "/profile.svg",
    label: "Profile",
    href: "/profile",

  },
];

export const HeaderMenuLinks = () => {
  const pathname = usePathname();

  return (
    <>
      {menuLinks.map(({ label, href, icon }) => {
        const isActive = pathname === href;
        return (
          <button key={href}>
            <Link
              href={href}
              passHref
              className={`${isActive ? "bg-gray-1200 shadow-md" : ""
                } hover:bg-secondary color:white hover:shadow-md focus:bg-secondary active:text-neutral py-1.5 px-3 text-sm rounded-10 gap-2 grid grid-flow-col`}
            >
              <span><img src={icon} /></span>
            </Link>
          </button>
        );
      })}
    </>
  );
};

export const Footer = () => {

  return (
    <div className="fixed bottom-0 w-full py-4 flex justify-around" style={{opacity:"100"}}>
      <HeaderMenuLinks />
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/Header.tsx
================================================
"use client";

import React, { useState } from "react";
import { Poppins } from "next/font/google";
import { RainbowKitCustomConnectButton } from "./scaffold-eth";
import { LogInWithAnonAadhaar } from "@anon-aadhaar/react";

const poppins = Poppins({ subsets: ["latin"], weight: ["600"] });

export const Header = () => {
  const [menuOpen, setMenuOpen] = useState(false);

  const toggleMenu = () => setMenuOpen(!menuOpen);

  return (
    <div className="sticky bg-black lg:static top-0 navbar min-h-0 flex-row z-30">
      <div className="navbar-start w-full flex justify-between items-center px-6 py-4">
        {/* Logo */}
        <span className={poppins.className} style={{ gap: "12px", display: "flex", alignItems: "center" }}>
          <img src="/logo.svg" style={{ width: "40px" }} alt="Logo" />
          Toll Chain
        </span>

        {/* Hamburger Icon for Mobile */}
        <button
          className="lg:hidden text-white focus:outline-none"
          onClick={toggleMenu}
          aria-label="Toggle Menu"
        >
          {menuOpen ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          )}
        </button>

        {/* Menu for Desktop */}
        <div className="hidden lg:flex items-center space-x-6">
          <RainbowKitCustomConnectButton />
          <LogInWithAnonAadhaar />
        </div>
      </div>

      {/* Mobile Menu */}
      {menuOpen && (
        <div className="bg-black w-full lg:hidden px-6 py-4">
          <div className="flex flex-col space-y-4">
            <RainbowKitCustomConnectButton />
            <LogInWithAnonAadhaar />
          </div>
        </div>
      )}
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/NFCReader.tsx
================================================
"use client";

import React, { useCallback, useEffect, useState } from "react";

const Scan = ({ onChange }: { onChange: (event: NDEFReadingEvent) => any }) => {
  const [nfcAvailable, setNfcAvailable] = useState(false);
  const [scanning, setScanning] = useState(false);

  const startScanner = async () => {
    try {
      const ndef = new NDEFReader();
      console.log("Starting scanner...", ndef.scan);
      await ndef.scan();

      console.log("Scan started successfully.");
      ndef.onreadingerror = () => {
        console.log("Cannot read data from the NFC tag. Try another one?");
      };

      ndef.onreading = event => {
        console.log("NDEF message read.");
        onChange(event);
      };

      setScanning(true);
    } catch (error) {
      console.log(`Error! Scan failed to start: ${error}.`);
    }
  };

  const scan = useCallback(async () => {
    if ("NDEFReader" in window) {
      try {
        new NDEFReader();
        setNfcAvailable(true);
      } catch (error) {
        console.log(`Error! Scan failed to start: ${error}.`);
      }
    }
  }, []);

  useEffect(() => {
    scan();
  }, [scan]);

  return (
    <div>
      {nfcAvailable && (
        <button
          className={`btn w-64 h-60 flex flex-row align-middle mt-24 text-xl rounded-2xl ${
            scanning ? "disabled btn-secondary" : "btn-primary"
          }`}
          onClick={startScanner}
        >
          <div>
            <svg
              fill="#fff"
              width="200px"
              height="150px"
              viewBox="0 -24.98 122.88 122.88"
              version="1.1"
              id="Layer_1"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g>
                <path d="M45.45,72.81C30.81,71.53,17.88,66.1,9.47,57.69c-4.8-4.79-7.71-9.99-9.02-16.12c-0.6-2.79-0.6-7.41,0.01-10.23 c1.83-8.52,7.33-15.97,16-21.66C36.23-3.28,66.52-3.22,86.11,9.83c2.6,1.73,4.28,3.11,6.64,5.43c2.97,2.93,5.06,5.85,7.26,10.13 c0.08,0.16,0.49,0.36,0.9,0.44c1.39,0.29,3.24,1.37,4.73,2.76c1.16,1.08,2.05,2.26,4.26,5.6c2.23,3.37,12.31,18.93,12.92,19.95 c0.24,0.4-0.23,1.03-0.76,1.03c-0.38,0-0.64-0.25-1.2-1.13c-0.39-0.62-2.96-4.61-5.71-8.87c-9.73-15.06-10.25-15.76-12.96-17.12 l-1.42-0.71l-4.18,0c-4.18,0-4.18,0-4.28,0.44c-0.55,2.41-0.66,3-0.54,3.11c0.08,0.07,2.45,1.42,5.27,3l5.13,2.87l-0.32,0.67 c-0.18,0.37-0.38,0.67-0.45,0.67s-4.39-2.39-9.6-5.32c-5.21-2.92-9.78-5.4-10.15-5.5c-1.48-0.41-3.76,1.23-3.76,2.71 c0,1.5,0.44,1.93,9.6,9.43c5.71,4.68,8.98,7.49,9.48,8.15c0.91,1.21,1.83,2.99,2.67,5.18c1.49,3.86,3.91,6.01,7.88,7.01l1.31,0.33 l-0.11,0.71c-0.06,0.39-0.14,0.75-0.19,0.8c-0.17,0.19-2.8-0.65-4.32-1.38c-2.38-1.14-4.02-2.77-5.63-5.61 c-0.01-0.02-0.95,0.3-2.07,0.71c-2,0.73-2.1,0.79-3.99,2.64c-8.07,7.88-19.65,12.91-33.62,14.62 C56.61,72.9,47.87,73.03,45.45,72.81L45.45,72.81L45.45,72.81z M59.36,70.39c6.41-0.85,11.39-2.12,16.59-4.25 c5.46-2.24,10.62-5.45,14.22-8.87l1.42-1.35l-3.58-1.71c-3.82-1.83-4.2-2.13-4.69-3.76c-0.31-1.03,0.04-2.13,1.02-3.18l0.76-0.83 l-1.66-1.26c-1.31-1-1.72-1.43-1.98-2.09c-0.41-1.07-0.26-2.23,0.4-3.16l0.5-0.71l-5.24-0.92c-2.88-0.51-5.57-1.02-5.97-1.14 c-0.79-0.23-1.58-1.13-1.79-2c-0.11-0.47,2.46-13.01,3.03-14.8c0.26-0.8,1.35-1.77,2.18-1.92c0.87-0.16,16.31,2.55,17.08,3 c1.22,0.71,1.6,1.85,1.22,3.61l-0.16,0.73l0.85,0c0.47,0,1.58-0.06,2.47-0.13l1.62-0.13l-0.8-1.49C94.44,19.54,90.05,15,84.64,11.4 c-2.53-1.68-7.92-4.34-11.17-5.5c-4.62-1.65-10.21-2.89-15.58-3.45c-2.95-0.31-10.66-0.3-13.52,0.01 C37.52,3.2,31.3,4.75,25.86,7.07C13.26,12.44,4.79,21.34,2.62,31.48c-0.57,2.65-0.61,7.29-0.09,9.7c1.15,5.33,3.65,9.94,7.72,14.23 c8.3,8.74,20.98,14.12,36.18,15.33C48.47,70.9,57.29,70.66,59.36,70.39L59.36,70.39z M56.59,60.85c-0.78-0.23-1.58-1.16-1.75-2.05 c-0.11-0.58,0.02-0.98,0.85-2.59c3.36-6.5,4.82-12.48,4.82-19.73c0-7.01-1.29-12.47-4.5-19.01c-0.69-1.4-1.25-2.71-1.25-2.9 c0-0.7,0.58-1.71,1.21-2.1c0.86-0.54,2.31-0.44,3.01,0.21c0.27,0.25,0.96,1.39,1.54,2.53c2.3,4.51,3.87,9.46,4.65,14.61 c0.48,3.19,0.58,9.23,0.19,12.15c-0.71,5.38-2.13,10.19-4.41,14.89c-1.38,2.84-2.24,4.01-2.96,4.01c-0.14,0-0.38,0.04-0.52,0.08 C57.33,60.99,56.93,60.95,56.59,60.85L56.59,60.85L56.59,60.85z M47.24,55.96c-1.2-0.35-2.07-1.83-1.72-2.93 c0.08-0.27,0.65-1.5,1.26-2.74c2.57-5.25,3.64-10.87,3.12-16.39c-0.43-4.54-1.24-7.4-3.29-11.58c-1.37-2.81-1.44-3.24-0.64-4.38 c0.76-1.08,2.66-1.25,3.65-0.34c0.69,0.63,2.84,5.12,3.67,7.66c2.74,8.4,2.32,17.43-1.19,25.68 C50.29,55.17,49.02,56.48,47.24,55.96L47.24,55.96z M37.6,51c-0.74-0.33-1.38-1.12-1.56-1.91c-0.11-0.48,0.08-1.02,0.96-2.8 c3.24-6.56,3.27-12.87,0.11-19.28c-1.39-2.81-1.42-3.37-0.25-4.48c0.58-0.55,0.83-0.64,1.64-0.64c1.37,0,2.08,0.69,3.3,3.2 c1.88,3.86,2.65,7.21,2.64,11.5c-0.01,4.41-0.73,7.44-2.73,11.51c-1.15,2.33-1.72,2.95-2.87,3.1C38.49,51.23,37.93,51.15,37.6,51 L37.6,51L37.6,51z M28.6,46.38c-0.59-0.24-1.26-1.04-1.46-1.74c-0.22-0.78-0.04-1.4,0.84-2.85c1.14-1.87,1.4-2.87,1.4-5.31 c0-2.44-0.26-3.45-1.4-5.31c-0.39-0.63-0.77-1.39-0.86-1.69c-0.37-1.23,0.66-2.74,2.04-3c1.17-0.22,1.97,0.3,3.05,1.98 c3.11,4.86,3.11,11.34,0,16.16C31.11,46.31,29.89,46.91,28.6,46.38L28.6,46.38L28.6,46.38z M95.63,53.92 c1.04-0.37,1.94-0.72,2-0.78c0.06-0.06-0.14-0.72-0.45-1.48c-0.62-1.55-0.52-1.51-2.74-1.09c-2.39,0.46-3.78,0.05-6.4-1.88 c-0.71-0.53-1.45-0.96-1.63-0.96c-0.19,0-0.59,0.27-0.91,0.61c-0.67,0.72-0.77,1.84-0.23,2.51c0.48,0.58,7.05,3.71,7.83,3.73 C93.45,54.59,94.58,54.29,95.63,53.92L95.63,53.92L95.63,53.92z M94.59,48.89c0.97-0.2,1.08-0.26,0.91-0.58 c-0.19-0.35-9.28-7.89-10.07-8.36c-0.65-0.38-1.18-0.29-1.72,0.29c-1.58,1.69-1.39,2.05,2.7,5.18 C91.35,49.21,91.88,49.43,94.59,48.89L94.59,48.89z M82.39,37.46c0-0.05-1.03-0.94-2.29-1.97c-3.11-2.56-3.78-3.52-3.78-5.42 c0-1.58,1.06-3.11,2.76-3.99c0.84-0.44,2.35-0.57,3.2-0.29c0.6,0.2,3.32,1.67,7.08,3.83l0.79,0.46l0.65-3.1 c0.67-3.17,0.68-4.01,0.06-4.2c-0.19-0.06-3.82-0.72-8.06-1.47c-7.54-1.33-8.37-1.41-8.72-0.84c-0.19,0.3-3.06,13.6-3.06,14.16 c0,0.28,0.14,0.63,0.32,0.78c0.17,0.15,2.62,0.68,5.44,1.18C82.22,37.57,82.39,37.6,82.39,37.46L82.39,37.46z" />
              </g>
            </svg>
          </div>
          <div className="pb-4">{scanning ? "Scanning..." : "Start scanning"}</div>
        </button>
      )}
      {!nfcAvailable && (
        <div style={{display:'flex', justifyContent:'center', flexDirection:'column', alignItems:'center'}}>
          <button className="btn disabled btn-primary w-64 rounded-md">NFC not available on this device</button>
          <div className="text-sm my-2">
            Requires Chrome on Android (
            <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_NFC_API#browser_compatibility">more info</a>)
          </div>
        </div>
      )}
    </div>
  );
};

export default Scan;


================================================
File: web-nfc/packages/nextjs/components/ScaffoldEthAppWithProviders.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import { AnonAadhaarProvider } from "@anon-aadhaar/react";
import { RainbowKitProvider, darkTheme, lightTheme } from "@rainbow-me/rainbowkit";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { AppProgressBar as ProgressBar } from "next-nprogress-bar";
import { useTheme } from "next-themes";
import { Toaster } from "react-hot-toast";
import { WagmiProvider } from "wagmi";
import { Footer } from "~~/components/Footer";
import { Header } from "~~/components/Header";
import { BlockieAvatar } from "~~/components/scaffold-eth";
import { useInitializeNativeCurrencyPrice } from "~~/hooks/scaffold-eth";
import { wagmiConfig } from "~~/services/web3/wagmiConfig";

// Import the usePathname hook

const ScaffoldEthApp = ({ children }: { children: React.ReactNode }) => {
  useInitializeNativeCurrencyPrice();
  const pathname = usePathname(); // Get the current pathname

  // Only show header and footer if the pathname is not "/"
  const showHeaderFooter = pathname !== "/"; // Hide header/footer on '/' page

  return (
    <>
      {showHeaderFooter && (
        <div className={`flex flex-col min-h-screen`}>
          <Header />
          <main className="relative flex flex-col flex-1">{children}</main>
          <Footer />
        </div>
      )}
      {!showHeaderFooter && <main className="relative flex flex-col flex-1">{children}</main>}
      <Toaster />
    </>
  );
};

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
    },
  },
});

export const ScaffoldEthAppWithProviders = ({ children }: { children: React.ReactNode }) => {
  const { resolvedTheme } = useTheme();
  const isDarkMode = resolvedTheme === "dark";
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <WagmiProvider config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        <AnonAadhaarProvider _useTestAadhaar>
          <ProgressBar height="3px" color="#2299dd" />
          <RainbowKitProvider
            avatar={BlockieAvatar}
            theme={mounted ? (isDarkMode ? darkTheme() : lightTheme()) : lightTheme()}
          >
            <ScaffoldEthApp>{children}</ScaffoldEthApp>
          </RainbowKitProvider>
        </AnonAadhaarProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
};


================================================
File: web-nfc/packages/nextjs/components/SwitchTheme.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { useTheme } from "next-themes";
import { MoonIcon, SunIcon } from "@heroicons/react/24/outline";

export const SwitchTheme = ({ className }: { className?: string }) => {
  const { setTheme, resolvedTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  const isDarkMode = resolvedTheme === "dark";

  const handleToggle = () => {
    if (isDarkMode) {
      setTheme("light");
      return;
    }
    setTheme("dark");
  };

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <div className={`flex space-x-2 h-8 items-center justify-center text-sm ${className}`}>
      <input
        id="theme-toggle"
        type="checkbox"
        className="toggle toggle-primary bg-primary hover:bg-primary border-primary"
        onChange={handleToggle}
        checked={isDarkMode}
      />
      <label htmlFor="theme-toggle" className={`swap swap-rotate ${!isDarkMode ? "swap-active" : ""}`}>
        <SunIcon className="swap-on h-5 w-5" />
        <MoonIcon className="swap-off h-5 w-5" />
      </label>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/ThemeProvider.tsx
================================================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export const ThemeProvider = ({ children, ...props }: ThemeProviderProps) => {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
};


================================================
File: web-nfc/packages/nextjs/components/assets/BuidlGuidlLogo.tsx
================================================
export const BuidlGuidlLogo = ({ className }: { className: string }) => {
  return (
    <svg
      className={className}
      width="53"
      height="72"
      viewBox="0 0 53 72"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        d="M25.9 17.434v15.638h3.927v9.04h9.718v-9.04h6.745v18.08l-10.607 19.88-12.11-.182-12.11.183L.856 51.152v-18.08h6.713v9.04h9.75v-9.04h4.329V2.46a2.126 2.126 0 0 1 4.047-.914c1.074.412 2.157 1.5 3.276 2.626 1.33 1.337 2.711 2.726 4.193 3.095 1.496.373 2.605-.026 3.855-.475 1.31-.47 2.776-.997 5.005-.747 1.67.197 2.557 1.289 3.548 2.509 1.317 1.623 2.82 3.473 6.599 3.752l-.024.017c-2.42 1.709-5.726 4.043-10.86 3.587-1.605-.139-2.736-.656-3.82-1.153-1.546-.707-2.997-1.37-5.59-.832-2.809.563-4.227 1.892-5.306 2.903-.236.221-.456.427-.67.606Z"
        clipRule="evenodd"
      />
    </svg>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Balance.tsx
================================================
"use client";

import { Address, formatEther } from "viem";
import { useDisplayUsdMode } from "~~/hooks/scaffold-eth/useDisplayUsdMode";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { useWatchBalance } from "~~/hooks/scaffold-eth/useWatchBalance";
import { useGlobalState } from "~~/services/store/store";

type BalanceProps = {
  address?: Address;
  className?: string;
  usdMode?: boolean;
};

/**
 * Display (ETH & USD) balance of an ETH address.
 */
export const Balance = ({ address, className = "", usdMode }: BalanceProps) => {
  const { targetNetwork } = useTargetNetwork();
  const nativeCurrencyPrice = useGlobalState(state => state.nativeCurrency.price);
  const isNativeCurrencyPriceFetching = useGlobalState(state => state.nativeCurrency.isFetching);

  const {
    data: balance,
    isError,
    isLoading,
  } = useWatchBalance({
    address,
  });

  const { displayUsdMode, toggleDisplayUsdMode } = useDisplayUsdMode({ defaultUsdMode: usdMode });

  if (!address || isLoading || balance === null || (isNativeCurrencyPriceFetching && nativeCurrencyPrice === 0)) {
    return (
      <div className="animate-pulse flex space-x-4">
        <div className="rounded-md bg-slate-300 h-6 w-6"></div>
        <div className="flex items-center space-y-6">
          <div className="h-2 w-28 bg-slate-300 rounded"></div>
        </div>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="border-2 border-base-content/30 rounded-md px-2 flex flex-col items-center max-w-fit cursor-pointer">
        <div className="text-warning">Error</div>
      </div>
    );
  }

  const formattedBalance = balance ? Number(formatEther(balance.value)) : 0;

  return (
    <button
      className={`btn btn-sm btn-ghost flex flex-col font-normal items-center hover:bg-transparent ${className}`}
      onClick={toggleDisplayUsdMode}
      type="button"
    >
      <div className="w-full flex items-center justify-center">
        {displayUsdMode ? (
          <>
            <span className="text-[0.8em] font-bold mr-1">$</span>
            <span>{(formattedBalance * nativeCurrencyPrice).toFixed(2)}</span>
          </>
        ) : (
          <>
            <span>{formattedBalance.toFixed(4)}</span>
            <span className="text-[0.8em] font-bold ml-1">{targetNetwork.nativeCurrency.symbol}</span>
          </>
        )}
      </div>
    </button>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/BlockieAvatar.tsx
================================================
"use client";

import { AvatarComponent } from "@rainbow-me/rainbowkit";
import { blo } from "blo";

// Custom Avatar for RainbowKit
export const BlockieAvatar: AvatarComponent = ({ address, ensImage, size }) => (
  // Don't want to use nextJS Image here (and adding remote patterns for the URL)
  // eslint-disable-next-line @next/next/no-img-element
  <img
    className="rounded-full"
    src={ensImage || blo(address as `0x${string}`)}
    width={size}
    height={size}
    alt={`${address} avatar`}
  />
);


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Faucet.tsx
================================================
"use client";

import { useEffect, useState } from "react";
import { Address as AddressType, createWalletClient, http, parseEther } from "viem";
import { hardhat } from "viem/chains";
import { useAccount } from "wagmi";
import { BanknotesIcon } from "@heroicons/react/24/outline";
import { Address, AddressInput, Balance, EtherInput } from "~~/components/scaffold-eth";
import { useTransactor } from "~~/hooks/scaffold-eth";
import { notification } from "~~/utils/scaffold-eth";

// Account index to use from generated hardhat accounts.
const FAUCET_ACCOUNT_INDEX = 0;

const localWalletClient = createWalletClient({
  chain: hardhat,
  transport: http(),
});

/**
 * Faucet modal which lets you send ETH to any address.
 */
export const Faucet = () => {
  const [loading, setLoading] = useState(false);
  const [inputAddress, setInputAddress] = useState<AddressType>();
  const [faucetAddress, setFaucetAddress] = useState<AddressType>();
  const [sendValue, setSendValue] = useState("");

  const { chain: ConnectedChain } = useAccount();

  const faucetTxn = useTransactor(localWalletClient);

  useEffect(() => {
    const getFaucetAddress = async () => {
      try {
        const accounts = await localWalletClient.getAddresses();
        setFaucetAddress(accounts[FAUCET_ACCOUNT_INDEX]);
      } catch (error) {
        notification.error(
          <>
            <p className="font-bold mt-0 mb-1">Cannot connect to local provider</p>
            <p className="m-0">
              - Did you forget to run <code className="italic bg-base-300 text-base font-bold">yarn chain</code> ?
            </p>
            <p className="mt-1 break-normal">
              - Or you can change <code className="italic bg-base-300 text-base font-bold">targetNetwork</code> in{" "}
              <code className="italic bg-base-300 text-base font-bold">scaffold.config.ts</code>
            </p>
          </>,
        );
        console.error("⚡️ ~ file: Faucet.tsx:getFaucetAddress ~ error", error);
      }
    };
    getFaucetAddress();
  }, []);

  const sendETH = async () => {
    if (!faucetAddress || !inputAddress) {
      return;
    }
    try {
      setLoading(true);
      await faucetTxn({
        to: inputAddress,
        value: parseEther(sendValue as `${number}`),
        account: faucetAddress,
      });
      setLoading(false);
      setInputAddress(undefined);
      setSendValue("");
    } catch (error) {
      console.error("⚡️ ~ file: Faucet.tsx:sendETH ~ error", error);
      setLoading(false);
    }
  };

  // Render only on local chain
  if (ConnectedChain?.id !== hardhat.id) {
    return null;
  }

  return (
    <div>
      <label htmlFor="faucet-modal" className="btn btn-primary btn-sm font-normal gap-1">
        <BanknotesIcon className="h-4 w-4" />
        <span>Faucet</span>
      </label>
      <input type="checkbox" id="faucet-modal" className="modal-toggle" />
      <label htmlFor="faucet-modal" className="modal cursor-pointer">
        <label className="modal-box relative">
          {/* dummy input to capture event onclick on modal box */}
          <input className="h-0 w-0 absolute top-0 left-0" />
          <h3 className="text-xl font-bold mb-3">Local Faucet</h3>
          <label htmlFor="faucet-modal" className="btn btn-ghost btn-sm btn-circle absolute right-3 top-3">
            ✕
          </label>
          <div className="space-y-3">
            <div className="flex space-x-4">
              <div>
                <span className="text-sm font-bold">From:</span>
                <Address address={faucetAddress} onlyEnsOrAddress />
              </div>
              <div>
                <span className="text-sm font-bold pl-3">Available:</span>
                <Balance address={faucetAddress} />
              </div>
            </div>
            <div className="flex flex-col space-y-3">
              <AddressInput
                placeholder="Destination Address"
                value={inputAddress ?? ""}
                onChange={value => setInputAddress(value as AddressType)}
              />
              <EtherInput placeholder="Amount to send" value={sendValue} onChange={value => setSendValue(value)} />
              <button className="h-10 btn btn-primary btn-sm px-2 rounded-full" onClick={sendETH} disabled={loading}>
                {!loading ? (
                  <BanknotesIcon className="h-6 w-6" />
                ) : (
                  <span className="loading loading-spinner loading-sm"></span>
                )}
                <span>Send</span>
              </button>
            </div>
          </div>
        </label>
      </label>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/FaucetButton.tsx
================================================
"use client";

import { useState } from "react";
import { createWalletClient, http, parseEther } from "viem";
import { hardhat } from "viem/chains";
import { useAccount } from "wagmi";
import { BanknotesIcon } from "@heroicons/react/24/outline";
import { useTransactor } from "~~/hooks/scaffold-eth";
import { useWatchBalance } from "~~/hooks/scaffold-eth/useWatchBalance";

// Number of ETH faucet sends to an address
const NUM_OF_ETH = "1";
const FAUCET_ADDRESS = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";

const localWalletClient = createWalletClient({
  chain: hardhat,
  transport: http(),
});

/**
 * FaucetButton button which lets you grab eth.
 */
export const FaucetButton = () => {
  const { address, chain: ConnectedChain } = useAccount();

  const { data: balance } = useWatchBalance({ address });

  const [loading, setLoading] = useState(false);

  const faucetTxn = useTransactor(localWalletClient);

  const sendETH = async () => {
    if (!address) return;
    try {
      setLoading(true);
      await faucetTxn({
        account: FAUCET_ADDRESS,
        to: address,
        value: parseEther(NUM_OF_ETH),
      });
      setLoading(false);
    } catch (error) {
      console.error("⚡️ ~ file: FaucetButton.tsx:sendETH ~ error", error);
      setLoading(false);
    }
  };

  // Render only on local chain
  if (ConnectedChain?.id !== hardhat.id) {
    return null;
  }

  const isBalanceZero = balance && balance.value === 0n;

  return (
    <div
      className={
        !isBalanceZero
          ? "ml-1"
          : "ml-1 tooltip tooltip-bottom tooltip-secondary tooltip-open font-bold before:left-auto before:transform-none before:content-[attr(data-tip)] before:right-0"
      }
      data-tip="Grab funds from faucet"
    >
      <button className="btn btn-secondary btn-sm px-2 rounded-full" onClick={sendETH} disabled={loading}>
        {!loading ? (
          <BanknotesIcon className="h-4 w-4" />
        ) : (
          <span className="loading loading-spinner loading-xs"></span>
        )}
      </button>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/index.tsx
================================================
export * from "./Address/Address";
export * from "./Balance";
export * from "./BlockieAvatar";
export * from "./Faucet";
export * from "./FaucetButton";
export * from "./Input";
export * from "./RainbowKitCustomConnectButton";


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Address/Address.tsx
================================================
"use client";

import { AddressCopyIcon } from "./AddressCopyIcon";
import { AddressLinkWrapper } from "./AddressLinkWrapper";
import { Address as AddressType, getAddress, isAddress } from "viem";
import { normalize } from "viem/ens";
import { useEnsAvatar, useEnsName } from "wagmi";
import { BlockieAvatar } from "~~/components/scaffold-eth";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { getBlockExplorerAddressLink } from "~~/utils/scaffold-eth";

const textSizeMap = {
  "3xs": "text-[10px]",
  "2xs": "text-[11px]",
  xs: "text-xs",
  sm: "text-sm",
  base: "text-base",
  lg: "text-lg",
  xl: "text-xl",
  "2xl": "text-2xl",
  "3xl": "text-3xl",
  "4xl": "text-4xl",
} as const;

const blockieSizeMap = {
  "3xs": 4,
  "2xs": 5,
  xs: 6,
  sm: 7,
  base: 8,
  lg: 9,
  xl: 10,
  "2xl": 12,
  "3xl": 15,
  "4xl": 17,
  "5xl": 19,
  "6xl": 21,
  "7xl": 23,
} as const;

const copyIconSizeMap = {
  "3xs": "h-2.5 w-2.5",
  "2xs": "h-3 w-3",
  xs: "h-3.5 w-3.5",
  sm: "h-4 w-4",
  base: "h-[18px] w-[18px]",
  lg: "h-5 w-5",
  xl: "h-[22px] w-[22px]",
  "2xl": "h-6 w-6",
  "3xl": "h-[26px] w-[26px]",
  "4xl": "h-7 w-7",
} as const;

type SizeMap = typeof textSizeMap | typeof blockieSizeMap;

const getNextSize = <T extends SizeMap>(sizeMap: T, currentSize: keyof T, step = 1): keyof T => {
  const sizes = Object.keys(sizeMap) as Array<keyof T>;
  const currentIndex = sizes.indexOf(currentSize);
  const nextIndex = Math.min(currentIndex + step, sizes.length - 1);
  return sizes[nextIndex];
};

const getPrevSize = <T extends SizeMap>(sizeMap: T, currentSize: keyof T, step = 1): keyof T => {
  const sizes = Object.keys(sizeMap) as Array<keyof T>;
  const currentIndex = sizes.indexOf(currentSize);
  const prevIndex = Math.max(currentIndex - step, 0);
  return sizes[prevIndex];
};

type AddressProps = {
  address?: AddressType;
  disableAddressLink?: boolean;
  format?: "short" | "long";
  size?: "xs" | "sm" | "base" | "lg" | "xl" | "2xl" | "3xl";
  onlyEnsOrAddress?: boolean;
};

export const Address = ({
  address,
  disableAddressLink,
  format,
  size = "base",
  onlyEnsOrAddress = false,
}: AddressProps) => {
  const checkSumAddress = address ? getAddress(address) : undefined;

  const { targetNetwork } = useTargetNetwork();

  const { data: ens, isLoading: isEnsNameLoading } = useEnsName({
    address: checkSumAddress,
    chainId: 1,
    query: {
      enabled: isAddress(checkSumAddress ?? ""),
    },
  });
  const { data: ensAvatar } = useEnsAvatar({
    name: ens ? normalize(ens) : undefined,
    chainId: 1,
    query: {
      enabled: Boolean(ens),
      gcTime: 30_000,
    },
  });

  const shortAddress = checkSumAddress?.slice(0, 6) + "..." + checkSumAddress?.slice(-4);
  const displayAddress = format === "long" ? checkSumAddress : shortAddress;
  const displayEnsOrAddress = ens || displayAddress;

  const showSkeleton = !checkSumAddress || (!onlyEnsOrAddress && (ens || isEnsNameLoading));

  const addressSize = showSkeleton && !onlyEnsOrAddress ? getPrevSize(textSizeMap, size, 2) : size;
  const ensSize = getNextSize(textSizeMap, addressSize);
  const blockieSize = showSkeleton && !onlyEnsOrAddress ? getNextSize(blockieSizeMap, addressSize, 4) : addressSize;

  if (!checkSumAddress) {
    return (
      <div className="flex items-center">
        <div
          className="flex-shrink-0 skeleton rounded-full"
          style={{
            width: (blockieSizeMap[blockieSize] * 24) / blockieSizeMap["base"],
            height: (blockieSizeMap[blockieSize] * 24) / blockieSizeMap["base"],
          }}
        ></div>
        <div className="flex flex-col space-y-1">
          {!onlyEnsOrAddress && (
            <div className={`ml-1.5 skeleton rounded-lg font-bold ${textSizeMap[ensSize]}`}>
              <span className="invisible">0x1234...56789</span>
            </div>
          )}
          <div className={`ml-1.5 skeleton rounded-lg ${textSizeMap[addressSize]}`}>
            <span className="invisible">0x1234...56789</span>
          </div>
        </div>
      </div>
    );
  }

  if (!isAddress(checkSumAddress)) {
    return <span className="text-error">Wrong address</span>;
  }

  const blockExplorerAddressLink = getBlockExplorerAddressLink(targetNetwork, checkSumAddress);

  return (
    <div className="flex items-center flex-shrink-0">
      <div className="flex-shrink-0">
        <BlockieAvatar
          address={checkSumAddress}
          ensImage={ensAvatar}
          size={(blockieSizeMap[blockieSize] * 24) / blockieSizeMap["base"]}
        />
      </div>
      <div className="flex flex-col">
        {showSkeleton &&
          (isEnsNameLoading ? (
            <div className={`ml-1.5 skeleton rounded-lg font-bold ${textSizeMap[ensSize]}`}>
              <span className="invisible">{shortAddress}</span>
            </div>
          ) : (
            <span className={`ml-1.5 ${textSizeMap[ensSize]} font-bold`}>
              <AddressLinkWrapper
                disableAddressLink={disableAddressLink}
                blockExplorerAddressLink={blockExplorerAddressLink}
              >
                {ens}
              </AddressLinkWrapper>
            </span>
          ))}
        <div className="flex">
          <span className={`ml-1.5 ${textSizeMap[addressSize]} font-normal`}>
            <AddressLinkWrapper
              disableAddressLink={disableAddressLink}
              blockExplorerAddressLink={blockExplorerAddressLink}
            >
              {onlyEnsOrAddress ? displayEnsOrAddress : displayAddress}
            </AddressLinkWrapper>
          </span>
          <AddressCopyIcon
            className={`ml-1 ${copyIconSizeMap[addressSize]} cursor-pointer`}
            address={checkSumAddress}
          />
        </div>
      </div>
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Address/AddressCopyIcon.tsx
================================================
import { useState } from "react";
import CopyToClipboard from "react-copy-to-clipboard";
import { CheckCircleIcon, DocumentDuplicateIcon } from "@heroicons/react/24/outline";

export const AddressCopyIcon = ({ className, address }: { className?: string; address: string }) => {
  const [addressCopied, setAddressCopied] = useState(false);
  return (
    <CopyToClipboard
      text={address}
      onCopy={() => {
        setAddressCopied(true);
        setTimeout(() => {
          setAddressCopied(false);
        }, 800);
      }}
    >
      <button onClick={e => e.stopPropagation()} type="button">
        {addressCopied ? (
          <CheckCircleIcon className={className} aria-hidden="true" />
        ) : (
          <DocumentDuplicateIcon className={className} aria-hidden="true" />
        )}
      </button>
    </CopyToClipboard>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Address/AddressLinkWrapper.tsx
================================================
import Link from "next/link";
import { hardhat } from "viem/chains";
import { useTargetNetwork } from "~~/hooks/scaffold-eth";

type AddressLinkWrapperProps = {
  children: React.ReactNode;
  disableAddressLink?: boolean;
  blockExplorerAddressLink: string;
};

export const AddressLinkWrapper = ({
  children,
  disableAddressLink,
  blockExplorerAddressLink,
}: AddressLinkWrapperProps) => {
  const { targetNetwork } = useTargetNetwork();

  return disableAddressLink ? (
    <>{children}</>
  ) : (
    <Link
      href={blockExplorerAddressLink}
      target={targetNetwork.id === hardhat.id ? undefined : "_blank"}
      rel={targetNetwork.id === hardhat.id ? undefined : "noopener noreferrer"}
    >
      {children}
    </Link>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/AddressInput.tsx
================================================
import { useEffect, useState } from "react";
import { blo } from "blo";
import { useDebounceValue } from "usehooks-ts";
import { Address, isAddress } from "viem";
import { normalize } from "viem/ens";
import { useEnsAddress, useEnsAvatar, useEnsName } from "wagmi";
import { CommonInputProps, InputBase, isENS } from "~~/components/scaffold-eth";

/**
 * Address input with ENS name resolution
 */
export const AddressInput = ({ value, name, placeholder, onChange, disabled }: CommonInputProps<Address | string>) => {
  // Debounce the input to keep clean RPC calls when resolving ENS names
  // If the input is an address, we don't need to debounce it
  const [_debouncedValue] = useDebounceValue(value, 500);
  const debouncedValue = isAddress(value) ? value : _debouncedValue;
  const isDebouncedValueLive = debouncedValue === value;

  // If the user changes the input after an ENS name is already resolved, we want to remove the stale result
  const settledValue = isDebouncedValueLive ? debouncedValue : undefined;

  const {
    data: ensAddress,
    isLoading: isEnsAddressLoading,
    isError: isEnsAddressError,
    isSuccess: isEnsAddressSuccess,
  } = useEnsAddress({
    name: settledValue,
    chainId: 1,
    query: {
      gcTime: 30_000,
      enabled: isDebouncedValueLive && isENS(debouncedValue),
    },
  });

  const [enteredEnsName, setEnteredEnsName] = useState<string>();
  const {
    data: ensName,
    isLoading: isEnsNameLoading,
    isError: isEnsNameError,
    isSuccess: isEnsNameSuccess,
  } = useEnsName({
    address: settledValue as Address,
    chainId: 1,
    query: {
      enabled: isAddress(debouncedValue),
      gcTime: 30_000,
    },
  });

  const { data: ensAvatar, isLoading: isEnsAvatarLoading } = useEnsAvatar({
    name: ensName ? normalize(ensName) : undefined,
    chainId: 1,
    query: {
      enabled: Boolean(ensName),
      gcTime: 30_000,
    },
  });

  // ens => address
  useEffect(() => {
    if (!ensAddress) return;

    // ENS resolved successfully
    setEnteredEnsName(debouncedValue);
    onChange(ensAddress);
  }, [ensAddress, onChange, debouncedValue]);

  useEffect(() => {
    setEnteredEnsName(undefined);
  }, [value]);

  const reFocus =
    isEnsAddressError ||
    isEnsNameError ||
    isEnsNameSuccess ||
    isEnsAddressSuccess ||
    ensName === null ||
    ensAddress === null;

  return (
    <InputBase<Address>
      name={name}
      placeholder={placeholder}
      error={ensAddress === null}
      value={value as Address}
      onChange={onChange}
      disabled={isEnsAddressLoading || isEnsNameLoading || disabled}
      reFocus={reFocus}
      prefix={
        ensName ? (
          <div className="flex bg-base-300 rounded-l-full items-center">
            {isEnsAvatarLoading && <div className="skeleton bg-base-200 w-[35px] h-[35px] rounded-full shrink-0"></div>}
            {ensAvatar ? (
              <span className="w-[35px]">
                {
                  // eslint-disable-next-line
                  <img className="w-full rounded-full" src={ensAvatar} alt={`${ensAddress} avatar`} />
                }
              </span>
            ) : null}
            <span className="text-accent px-2">{enteredEnsName ?? ensName}</span>
          </div>
        ) : (
          (isEnsNameLoading || isEnsAddressLoading) && (
            <div className="flex bg-base-300 rounded-l-full items-center gap-2 pr-2">
              <div className="skeleton bg-base-200 w-[35px] h-[35px] rounded-full shrink-0"></div>
              <div className="skeleton bg-base-200 h-3 w-20"></div>
            </div>
          )
        )
      }
      suffix={
        // Don't want to use nextJS Image here (and adding remote patterns for the URL)
        // eslint-disable-next-line @next/next/no-img-element
        value && <img alt="" className="!rounded-full" src={blo(value as `0x${string}`)} width="35" height="35" />
      }
    />
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/Bytes32Input.tsx
================================================
import { useCallback } from "react";
import { hexToString, isHex, stringToHex } from "viem";
import { CommonInputProps, InputBase } from "~~/components/scaffold-eth";

export const Bytes32Input = ({ value, onChange, name, placeholder, disabled }: CommonInputProps) => {
  const convertStringToBytes32 = useCallback(() => {
    if (!value) {
      return;
    }
    onChange(isHex(value) ? hexToString(value, { size: 32 }) : stringToHex(value, { size: 32 }));
  }, [onChange, value]);

  return (
    <InputBase
      name={name}
      value={value}
      placeholder={placeholder}
      onChange={onChange}
      disabled={disabled}
      suffix={
        <button
          className="self-center cursor-pointer text-xl font-semibold px-4 text-accent"
          onClick={convertStringToBytes32}
          type="button"
        >
          #
        </button>
      }
    />
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/BytesInput.tsx
================================================
import { useCallback } from "react";
import { bytesToString, isHex, toBytes, toHex } from "viem";
import { CommonInputProps, InputBase } from "~~/components/scaffold-eth";

export const BytesInput = ({ value, onChange, name, placeholder, disabled }: CommonInputProps) => {
  const convertStringToBytes = useCallback(() => {
    onChange(isHex(value) ? bytesToString(toBytes(value)) : toHex(toBytes(value)));
  }, [onChange, value]);

  return (
    <InputBase
      name={name}
      value={value}
      placeholder={placeholder}
      onChange={onChange}
      disabled={disabled}
      suffix={
        <button
          className="self-center cursor-pointer text-xl font-semibold px-4 text-accent"
          onClick={convertStringToBytes}
          type="button"
        >
          #
        </button>
      }
    />
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/EtherInput.tsx
================================================
import { useMemo, useState } from "react";
import { ArrowsRightLeftIcon } from "@heroicons/react/24/outline";
import { CommonInputProps, InputBase, SIGNED_NUMBER_REGEX } from "~~/components/scaffold-eth";
import { useDisplayUsdMode } from "~~/hooks/scaffold-eth/useDisplayUsdMode";
import { useGlobalState } from "~~/services/store/store";

const MAX_DECIMALS_USD = 2;

function etherValueToDisplayValue(usdMode: boolean, etherValue: string, nativeCurrencyPrice: number) {
  if (usdMode && nativeCurrencyPrice) {
    const parsedEthValue = parseFloat(etherValue);
    if (Number.isNaN(parsedEthValue)) {
      return etherValue;
    } else {
      // We need to round the value rather than use toFixed,
      // since otherwise a user would not be able to modify the decimal value
      return (
        Math.round(parsedEthValue * nativeCurrencyPrice * 10 ** MAX_DECIMALS_USD) /
        10 ** MAX_DECIMALS_USD
      ).toString();
    }
  } else {
    return etherValue;
  }
}

function displayValueToEtherValue(usdMode: boolean, displayValue: string, nativeCurrencyPrice: number) {
  if (usdMode && nativeCurrencyPrice) {
    const parsedDisplayValue = parseFloat(displayValue);
    if (Number.isNaN(parsedDisplayValue)) {
      // Invalid number.
      return displayValue;
    } else {
      // Compute the ETH value if a valid number.
      return (parsedDisplayValue / nativeCurrencyPrice).toString();
    }
  } else {
    return displayValue;
  }
}

/**
 * Input for ETH amount with USD conversion.
 *
 * onChange will always be called with the value in ETH
 */
export const EtherInput = ({
  value,
  name,
  placeholder,
  onChange,
  disabled,
  usdMode,
}: CommonInputProps & { usdMode?: boolean }) => {
  const [transitoryDisplayValue, setTransitoryDisplayValue] = useState<string>();
  const nativeCurrencyPrice = useGlobalState(state => state.nativeCurrency.price);
  const isNativeCurrencyPriceFetching = useGlobalState(state => state.nativeCurrency.isFetching);

  const { displayUsdMode, toggleDisplayUsdMode } = useDisplayUsdMode({ defaultUsdMode: usdMode });

  // The displayValue is derived from the ether value that is controlled outside of the component
  // In usdMode, it is converted to its usd value, in regular mode it is unaltered
  const displayValue = useMemo(() => {
    const newDisplayValue = etherValueToDisplayValue(displayUsdMode, value, nativeCurrencyPrice || 0);
    if (transitoryDisplayValue && parseFloat(newDisplayValue) === parseFloat(transitoryDisplayValue)) {
      return transitoryDisplayValue;
    }
    // Clear any transitory display values that might be set
    setTransitoryDisplayValue(undefined);
    return newDisplayValue;
  }, [nativeCurrencyPrice, transitoryDisplayValue, displayUsdMode, value]);

  const handleChangeNumber = (newValue: string) => {
    if (newValue && !SIGNED_NUMBER_REGEX.test(newValue)) {
      return;
    }

    // Following condition is a fix to prevent usdMode from experiencing different display values
    // than what the user entered. This can happen due to floating point rounding errors that are introduced in the back and forth conversion
    if (displayUsdMode) {
      const decimals = newValue.split(".")[1];
      if (decimals && decimals.length > MAX_DECIMALS_USD) {
        return;
      }
    }

    // Since the display value is a derived state (calculated from the ether value), usdMode would not allow introducing a decimal point.
    // This condition handles a transitory state for a display value with a trailing decimal sign
    if (newValue.endsWith(".") || newValue.endsWith(".0")) {
      setTransitoryDisplayValue(newValue);
    } else {
      setTransitoryDisplayValue(undefined);
    }

    const newEthValue = displayValueToEtherValue(displayUsdMode, newValue, nativeCurrencyPrice || 0);
    onChange(newEthValue);
  };

  return (
    <InputBase
      name={name}
      value={displayValue}
      placeholder={placeholder}
      onChange={handleChangeNumber}
      disabled={disabled}
      prefix={<span className="pl-4 -mr-2 text-accent self-center">{displayUsdMode ? "$" : "Ξ"}</span>}
      suffix={
        <div
          className={`${
            nativeCurrencyPrice > 0
              ? ""
              : "tooltip tooltip-secondary before:content-[attr(data-tip)] before:right-[-10px] before:left-auto before:transform-none"
          }`}
          data-tip={isNativeCurrencyPriceFetching ? "Fetching price" : "Unable to fetch price"}
        >
          <button
            className="btn btn-primary h-[2.2rem] min-h-[2.2rem]"
            onClick={toggleDisplayUsdMode}
            disabled={!displayUsdMode && !nativeCurrencyPrice}
            type="button"
          >
            <ArrowsRightLeftIcon className="h-3 w-3 cursor-pointer" aria-hidden="true" />
          </button>
        </div>
      }
    />
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/InputBase.tsx
================================================
import { ChangeEvent, FocusEvent, ReactNode, useCallback, useEffect, useRef } from "react";
import { CommonInputProps } from "~~/components/scaffold-eth";

type InputBaseProps<T> = CommonInputProps<T> & {
  error?: boolean;
  prefix?: ReactNode;
  suffix?: ReactNode;
  reFocus?: boolean;
};

export const InputBase = <T extends { toString: () => string } | undefined = string>({
  name,
  value,
  onChange,
  placeholder,
  error,
  disabled,
  prefix,
  suffix,
  reFocus,
}: InputBaseProps<T>) => {
  const inputReft = useRef<HTMLInputElement>(null);

  let modifier = "";
  if (error) {
    modifier = "border-error";
  } else if (disabled) {
    modifier = "border-disabled bg-base-300";
  }

  const handleChange = useCallback(
    (e: ChangeEvent<HTMLInputElement>) => {
      onChange(e.target.value as unknown as T);
    },
    [onChange],
  );

  // Runs only when reFocus prop is passed, useful for setting the cursor
  // at the end of the input. Example AddressInput
  const onFocus = (e: FocusEvent<HTMLInputElement, Element>) => {
    if (reFocus !== undefined) {
      e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
    }
  };
  useEffect(() => {
    if (reFocus !== undefined && reFocus === true) inputReft.current?.focus();
  }, [reFocus]);

  return (
    <div className={`flex border-2 border-base-300 bg-base-200 rounded-full text-accent ${modifier}`}>
      {prefix}
      <input
        className="input input-ghost focus-within:border-transparent focus:outline-none focus:bg-transparent h-[2.2rem] min-h-[2.2rem] px-4 border w-full font-medium placeholder:text-accent/70 text-base-content/70 focus:text-base-content/70"
        placeholder={placeholder}
        name={name}
        value={value?.toString()}
        onChange={handleChange}
        disabled={disabled}
        autoComplete="off"
        ref={inputReft}
        onFocus={onFocus}
      />
      {suffix}
    </div>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/IntegerInput.tsx
================================================
import { useCallback, useEffect, useState } from "react";
import { parseEther } from "viem";
import { CommonInputProps, InputBase, IntegerVariant, isValidInteger } from "~~/components/scaffold-eth";

type IntegerInputProps = CommonInputProps<string> & {
  variant?: IntegerVariant;
  disableMultiplyBy1e18?: boolean;
};

export const IntegerInput = ({
  value,
  onChange,
  name,
  placeholder,
  disabled,
  variant = IntegerVariant.UINT256,
  disableMultiplyBy1e18 = false,
}: IntegerInputProps) => {
  const [inputError, setInputError] = useState(false);
  const multiplyBy1e18 = useCallback(() => {
    if (!value) {
      return;
    }
    return onChange(parseEther(value).toString());
  }, [onChange, value]);

  useEffect(() => {
    if (isValidInteger(variant, value)) {
      setInputError(false);
    } else {
      setInputError(true);
    }
  }, [value, variant]);

  return (
    <InputBase
      name={name}
      value={value}
      placeholder={placeholder}
      error={inputError}
      onChange={onChange}
      disabled={disabled}
      suffix={
        !inputError &&
        !disableMultiplyBy1e18 && (
          <div
            className="space-x-4 flex tooltip tooltip-top tooltip-secondary before:content-[attr(data-tip)] before:right-[-10px] before:left-auto before:transform-none"
            data-tip="Multiply by 1e18 (wei)"
          >
            <button
              className={`${disabled ? "cursor-not-allowed" : "cursor-pointer"} font-semibold px-4 text-accent`}
              onClick={multiplyBy1e18}
              disabled={disabled}
              type="button"
            >
              ∗
            </button>
          </div>
        )
      }
    />
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/index.ts
================================================
"use client";

export * from "./AddressInput";
export * from "./Bytes32Input";
export * from "./BytesInput";
export * from "./EtherInput";
export * from "./InputBase";
export * from "./IntegerInput";
export * from "./utils";


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/Input/utils.ts
================================================
export type CommonInputProps<T = string> = {
  value: T;
  onChange: (newValue: T) => void;
  name?: string;
  placeholder?: string;
  disabled?: boolean;
};

export enum IntegerVariant {
  UINT8 = "uint8",
  UINT16 = "uint16",
  UINT24 = "uint24",
  UINT32 = "uint32",
  UINT40 = "uint40",
  UINT48 = "uint48",
  UINT56 = "uint56",
  UINT64 = "uint64",
  UINT72 = "uint72",
  UINT80 = "uint80",
  UINT88 = "uint88",
  UINT96 = "uint96",
  UINT104 = "uint104",
  UINT112 = "uint112",
  UINT120 = "uint120",
  UINT128 = "uint128",
  UINT136 = "uint136",
  UINT144 = "uint144",
  UINT152 = "uint152",
  UINT160 = "uint160",
  UINT168 = "uint168",
  UINT176 = "uint176",
  UINT184 = "uint184",
  UINT192 = "uint192",
  UINT200 = "uint200",
  UINT208 = "uint208",
  UINT216 = "uint216",
  UINT224 = "uint224",
  UINT232 = "uint232",
  UINT240 = "uint240",
  UINT248 = "uint248",
  UINT256 = "uint256",
  INT8 = "int8",
  INT16 = "int16",
  INT24 = "int24",
  INT32 = "int32",
  INT40 = "int40",
  INT48 = "int48",
  INT56 = "int56",
  INT64 = "int64",
  INT72 = "int72",
  INT80 = "int80",
  INT88 = "int88",
  INT96 = "int96",
  INT104 = "int104",
  INT112 = "int112",
  INT120 = "int120",
  INT128 = "int128",
  INT136 = "int136",
  INT144 = "int144",
  INT152 = "int152",
  INT160 = "int160",
  INT168 = "int168",
  INT176 = "int176",
  INT184 = "int184",
  INT192 = "int192",
  INT200 = "int200",
  INT208 = "int208",
  INT216 = "int216",
  INT224 = "int224",
  INT232 = "int232",
  INT240 = "int240",
  INT248 = "int248",
  INT256 = "int256",
}

export const SIGNED_NUMBER_REGEX = /^-?\d+\.?\d*$/;
export const UNSIGNED_NUMBER_REGEX = /^\.?\d+\.?\d*$/;

export const isValidInteger = (dataType: IntegerVariant, value: string) => {
  const isSigned = dataType.startsWith("i");
  const bitcount = Number(dataType.substring(isSigned ? 3 : 4));

  let valueAsBigInt;
  try {
    valueAsBigInt = BigInt(value);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  } catch (e) {}
  if (typeof valueAsBigInt !== "bigint") {
    if (!value || typeof value !== "string") {
      return true;
    }
    return isSigned ? SIGNED_NUMBER_REGEX.test(value) || value === "-" : UNSIGNED_NUMBER_REGEX.test(value);
  } else if (!isSigned && valueAsBigInt < 0) {
    return false;
  }
  const hexString = valueAsBigInt.toString(16);
  const significantHexDigits = hexString.match(/.*x0*(.*)$/)?.[1] ?? "";
  if (
    significantHexDigits.length * 4 > bitcount ||
    (isSigned && significantHexDigits.length * 4 === bitcount && parseInt(significantHexDigits.slice(-1)?.[0], 16) < 8)
  ) {
    return false;
  }
  return true;
};

// Treat any dot-separated string as a potential ENS name
const ensRegex = /.+\..+/;
export const isENS = (address = "") => ensRegex.test(address);


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/RainbowKitCustomConnectButton/AddressInfoDropdown.tsx
================================================
import { useRef, useState } from "react";
import { NetworkOptions } from "./NetworkOptions";
import CopyToClipboard from "react-copy-to-clipboard";
import { getAddress } from "viem";
import { Address } from "viem";
import { useDisconnect } from "wagmi";
import {
  ArrowLeftOnRectangleIcon,
  ArrowTopRightOnSquareIcon,
  ArrowsRightLeftIcon,
  CheckCircleIcon,
  ChevronDownIcon,
  DocumentDuplicateIcon,
  QrCodeIcon,
} from "@heroicons/react/24/outline";
import { BlockieAvatar, isENS } from "~~/components/scaffold-eth";
import { useOutsideClick } from "~~/hooks/scaffold-eth";
import { getTargetNetworks } from "~~/utils/scaffold-eth";

const allowedNetworks = getTargetNetworks();

type AddressInfoDropdownProps = {
  address: Address;
  blockExplorerAddressLink: string | undefined;
  displayName: string;
  ensAvatar?: string;
};

export const AddressInfoDropdown = ({
  address,
  ensAvatar,
  displayName,
  blockExplorerAddressLink,
}: AddressInfoDropdownProps) => {
  const { disconnect } = useDisconnect();
  const checkSumAddress = getAddress(address);

  const [addressCopied, setAddressCopied] = useState(false);

  const [selectingNetwork, setSelectingNetwork] = useState(false);
  const dropdownRef = useRef<HTMLDetailsElement>(null);
  const closeDropdown = () => {
    setSelectingNetwork(false);
    dropdownRef.current?.removeAttribute("open");
  };
  useOutsideClick(dropdownRef, closeDropdown);

  return (
    <>
      <details ref={dropdownRef} className="dropdown dropdown-end leading-3">
        <summary tabIndex={0} className="btn btn-secondary btn-sm pl-0 pr-2 shadow-md dropdown-toggle gap-0 !h-auto">
          <BlockieAvatar address={checkSumAddress} size={30} ensImage={ensAvatar} />
          <span className="ml-2 mr-1">
            {isENS(displayName) ? displayName : checkSumAddress?.slice(0, 6) + "..." + checkSumAddress?.slice(-4)}
          </span>
          <ChevronDownIcon className="h-6 w-4 ml-2 sm:ml-0" />
        </summary>
        <ul
          tabIndex={0}
          className="dropdown-content menu z-[2] p-2 mt-2 shadow-center shadow-accent bg-base-200 rounded-box gap-1"
        >
          <NetworkOptions hidden={!selectingNetwork} />
          <li className={selectingNetwork ? "hidden" : ""}>
            {addressCopied ? (
              <div className="btn-sm !rounded-xl flex gap-3 py-3">
                <CheckCircleIcon
                  className="text-xl font-normal h-6 w-4 cursor-pointer ml-2 sm:ml-0"
                  aria-hidden="true"
                />
                <span className=" whitespace-nowrap">Copy address</span>
              </div>
            ) : (
              <CopyToClipboard
                text={checkSumAddress}
                onCopy={() => {
                  setAddressCopied(true);
                  setTimeout(() => {
                    setAddressCopied(false);
                  }, 800);
                }}
              >
                <div className="btn-sm !rounded-xl flex gap-3 py-3">
                  <DocumentDuplicateIcon
                    className="text-xl font-normal h-6 w-4 cursor-pointer ml-2 sm:ml-0"
                    aria-hidden="true"
                  />
                  <span className=" whitespace-nowrap">Copy address</span>
                </div>
              </CopyToClipboard>
            )}
          </li>
          <li className={selectingNetwork ? "hidden" : ""}>
            <label htmlFor="qrcode-modal" className="btn-sm !rounded-xl flex gap-3 py-3">
              <QrCodeIcon className="h-6 w-4 ml-2 sm:ml-0" />
              <span className="whitespace-nowrap">View QR Code</span>
            </label>
          </li>
          <li className={selectingNetwork ? "hidden" : ""}>
            <button className="menu-item btn-sm !rounded-xl flex gap-3 py-3" type="button">
              <ArrowTopRightOnSquareIcon className="h-6 w-4 ml-2 sm:ml-0" />
              <a
                target="_blank"
                href={blockExplorerAddressLink}
                rel="noopener noreferrer"
                className="whitespace-nowrap"
              >
                View on Block Explorer
              </a>
            </button>
          </li>
          {allowedNetworks.length > 1 ? (
            <li className={selectingNetwork ? "hidden" : ""}>
              <button
                className="btn-sm !rounded-xl flex gap-3 py-3"
                type="button"
                onClick={() => {
                  setSelectingNetwork(true);
                }}
              >
                <ArrowsRightLeftIcon className="h-6 w-4 ml-2 sm:ml-0" /> <span>Switch Network</span>
              </button>
            </li>
          ) : null}
          <li className={selectingNetwork ? "hidden" : ""}>
            <button
              className="menu-item text-error btn-sm !rounded-xl flex gap-3 py-3"
              type="button"
              onClick={() => disconnect()}
            >
              <ArrowLeftOnRectangleIcon className="h-6 w-4 ml-2 sm:ml-0" /> <span>Disconnect</span>
            </button>
          </li>
        </ul>
      </details>
    </>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/RainbowKitCustomConnectButton/AddressQRCodeModal.tsx
================================================
import { QRCodeSVG } from "qrcode.react";
import { Address as AddressType } from "viem";
import { Address } from "~~/components/scaffold-eth";

type AddressQRCodeModalProps = {
  address: AddressType;
  modalId: string;
};

export const AddressQRCodeModal = ({ address, modalId }: AddressQRCodeModalProps) => {
  return (
    <>
      <div>
        <input type="checkbox" id={`${modalId}`} className="modal-toggle" />
        <label htmlFor={`${modalId}`} className="modal cursor-pointer">
          <label className="modal-box relative">
            {/* dummy input to capture event onclick on modal box */}
            <input className="h-0 w-0 absolute top-0 left-0" />
            <label htmlFor={`${modalId}`} className="btn btn-ghost btn-sm btn-circle absolute right-3 top-3">
              ✕
            </label>
            <div className="space-y-3 py-6">
              <div className="flex flex-col items-center gap-6">
                <QRCodeSVG value={address} size={256} />
                <Address address={address} format="long" disableAddressLink onlyEnsOrAddress />
              </div>
            </div>
          </label>
        </label>
      </div>
    </>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/RainbowKitCustomConnectButton/NetworkOptions.tsx
================================================
import { useTheme } from "next-themes";
import { useAccount, useSwitchChain } from "wagmi";
import { ArrowsRightLeftIcon } from "@heroicons/react/24/solid";
import { getNetworkColor } from "~~/hooks/scaffold-eth";
import { getTargetNetworks } from "~~/utils/scaffold-eth";

const allowedNetworks = getTargetNetworks();

type NetworkOptionsProps = {
  hidden?: boolean;
};

export const NetworkOptions = ({ hidden = false }: NetworkOptionsProps) => {
  const { switchChain } = useSwitchChain();
  const { chain } = useAccount();
  const { resolvedTheme } = useTheme();
  const isDarkMode = resolvedTheme === "dark";

  return (
    <>
      {allowedNetworks
        .filter(allowedNetwork => allowedNetwork.id !== chain?.id)
        .map(allowedNetwork => (
          <li key={allowedNetwork.id} className={hidden ? "hidden" : ""}>
            <button
              className="menu-item btn-sm !rounded-xl flex gap-3 py-3 whitespace-nowrap"
              type="button"
              onClick={() => {
                switchChain?.({ chainId: allowedNetwork.id });
              }}
            >
              <ArrowsRightLeftIcon className="h-6 w-4 ml-2 sm:ml-0" />
              <span>
                Switch to{" "}
                <span
                  style={{
                    color: getNetworkColor(allowedNetwork, isDarkMode),
                  }}
                >
                  {allowedNetwork.name}
                </span>
              </span>
            </button>
          </li>
        ))}
    </>
  );
};


================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/RainbowKitCustomConnectButton/WrongNetworkDropdown.tsx
================================================
import { NetworkOptions } from "./NetworkOptions";
import { useDisconnect } from "wagmi";
import { ArrowLeftOnRectangleIcon, ChevronDownIcon } from "@heroicons/react/24/outline";

export const WrongNetworkDropdown = () => {
  const { disconnect } = useDisconnect();

  return (
    <div className="dropdown dropdown-end mr-2">
      <label tabIndex={0} className="btn btn-error btn-sm dropdown-toggle gap-1">
        <span>Wrong network</span>
        <ChevronDownIcon className="h-6 w-4 ml-2 sm:ml-0" />
      </label>
      <ul
        tabIndex={0}
        className="dropdown-content menu p-2 mt-1 shadow-center shadow-accent bg-base-200 rounded-box gap-1"
      >
        <NetworkOptions />
        <li>
          <button
            className="menu-item text-error btn-sm !rounded-xl flex gap-3 py-3"
            type="button"
            onClick={() => disconnect()}
          >
            <ArrowLeftOnRectangleIcon className="h-6 w-4 ml-2 sm:ml-0" />
            <span>Disconnect</span>
          </button>
        </li>
      </ul>
    </div>
  );
};

================================================
File: web-nfc/packages/nextjs/components/scaffold-eth/RainbowKitCustomConnectButton/index.tsx
================================================
"use client";

// @refresh reset
import { Balance } from "../Balance";
import { AddressInfoDropdown } from "./AddressInfoDropdown";
import { AddressQRCodeModal } from "./AddressQRCodeModal";
import { WrongNetworkDropdown } from "./WrongNetworkDropdown";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { Address } from "viem";
import { useNetworkColor } from "~~/hooks/scaffold-eth";
import { useTargetNetwork } from "~~/hooks/scaffold-eth/useTargetNetwork";
import { getBlockExplorerAddressLink } from "~~/utils/scaffold-eth";

/**
 * Custom Wagmi Connect Button (watch balance + custom design)
 */
export const RainbowKitCustomConnectButton = () => {
  const networkColor = useNetworkColor();
  const { targetNetwork } = useTargetNetwork();

  return (
    <ConnectButton.Custom>
      {({ account, chain, openConnectModal, mounted }) => {
        const connected = mounted && account && chain;
        const blockExplorerAddressLink = account
          ? getBlockExplorerAddressLink(targetNetwork, account.address)
          : undefined;

        return (
          <>
            {(() => {
              if (!connected) {
                return (
                  <button className="btn btn-primary btn-sm" onClick={openConnectModal} type="button">
                    Connect Wallet
                  </button>
                );
              }

              if (chain.unsupported || chain.id !== targetNetwork.id) {
                return <WrongNetworkDropdown />;
              }

              return (
                <>
                  <div className="flex flex-col items-center mr-1">
                    <Balance address={account.address as Address} className="min-h-0 h-auto" />
                    <span className="text-xs" style={{ color: networkColor }}>
                      {chain.name}
                    </span>
                  </div>
                  <AddressInfoDropdown
                    address={account.address as Address}
                    displayName={account.displayName}
                    ensAvatar={account.ensAvatar}
                    blockExplorerAddressLink={blockExplorerAddressLink}
                  />
                  <AddressQRCodeModal address={account.address as Address} modalId="qrcode-modal" />
                </>
              );
            })()}
          </>
        );
      }}
    </ConnectButton.Custom>
  );
};


================================================
File: web-nfc/packages/nextjs/constants/index.ts
================================================
export const userWallet = {
  abi: [
    {
      inputs: [
        {
          internalType: "address",
          name: "entryPoint",
          type: "address",
        },
      ],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [],
      name: "ECDSAInvalidSignature",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "length",
          type: "uint256",
        },
      ],
      name: "ECDSAInvalidSignatureLength",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "bytes32",
          name: "s",
          type: "bytes32",
        },
      ],
      name: "ECDSAInvalidSignatureS",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
      ],
      name: "OwnableInvalidOwner",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address",
        },
      ],
      name: "OwnableUnauthorizedAccount",
      type: "error",
    },
    {
      inputs: [
        {
          internalType: "bytes",
          name: "",
          type: "bytes",
        },
      ],
      name: "UserWallet__CallFailed",
      type: "error",
    },
    {
      inputs: [],
      name: "UserWallet__OnlyEntryPointAllowed",
      type: "error",
    },
    {
      inputs: [],
      name: "UserWallet__OnlyEntryPointOrOwnerAllowed",
      type: "error",
    },
    {
      inputs: [],
      name: "UserWallet__OnlyOwnerAllowed",
      type: "error",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "previousOwner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "OwnershipTransferred",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "_add",
          type: "address",
        },
      ],
      name: "addToWhitelist",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "dest",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "functionData",
          type: "bytes",
        },
      ],
      name: "execute",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "_add",
          type: "address",
        },
      ],
      name: "isWhitelisted",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "owner",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "renounceOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "newOwner",
          type: "address",
        },
      ],
      name: "transferOwnership",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          components: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes",
            },
            {
              internalType: "bytes32",
              name: "accountGasLimits",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "preVerificationGas",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "gasFees",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "paymasterAndData",
              type: "bytes",
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes",
            },
          ],
          internalType: "struct PackedUserOperation",
          name: "userOp",
          type: "tuple",
        },
        {
          internalType: "bytes32",
          name: "userOpHash",
          type: "bytes32",
        },
        {
          internalType: "uint256",
          name: "missingAccountFunds",
          type: "uint256",
        },
      ],
      name: "validateUserOp",
      outputs: [
        {
          internalType: "uint256",
          name: "validationData",
          type: "uint256",
        },
      ],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256",
        },
      ],
      name: "withdrawToll",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      stateMutability: "payable",
      type: "receive",
    },
  ],
};


================================================
File: web-nfc/packages/nextjs/contexts/actions.ts
================================================
import { createContext } from "react";

type Actions = {
  scan: string | null;
  write: string | null;
  setActions: (actions: { scan: string | null; write: string | null }) => void;
};

export const ActionsContext = createContext<Actions>({
  scan: null,
  write: null,
  setActions: () => {},
});


================================================
File: web-nfc/packages/nextjs/contracts/deployedContracts.ts
================================================
/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { walletManager } from "~~/app/constants";
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  84532: {
    walletManager: {
      address: "0xE6680264108EC3c9D386b145142Cd56672eE8aE1",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_entryPoint",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "WalletManager__NotOwner",
          type: "error",
        },
        {
          inputs: [],
          name: "WalletManager__WalletAlreadyExists",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes",
              name: "user",
              type: "bytes",
            },
            {
              indexed: true,
              internalType: "string",
              name: "carId",
              type: "string",
            },
            {
              indexed: false,
              internalType: "address",
              name: "wallet",
              type: "address",
            },
          ],
          name: "WalletCreated",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "addresses",
              type: "address[]",
            },
            {
              internalType: "string",
              name: "carId",
              type: "string",
            },
          ],
          name: "addToWhitelist_UserWallet",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "userProof",
              type: "bytes",
            },
            {
              internalType: "string",
              name: "carId",
              type: "string",
            },
          ],
          name: "createWalletForCar",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "userProof",
              type: "bytes",
            },
          ],
          name: "getProfile",
          outputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "gender",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "city",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "pincode",
                  type: "uint256",
                },
              ],
              internalType: "struct WalletManager.Person",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "user",
              type: "bytes",
            },
          ],
          name: "getUserCars",
          outputs: [
            {
              internalType: "string[]",
              name: "",
              type: "string[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "carId",
              type: "string",
            },
          ],
          name: "getWalletForCar",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "userProof",
              type: "bytes",
            },
            {
              internalType: "string",
              name: "_name",
              type: "string",
            },
            {
              internalType: "string",
              name: "_gender",
              type: "string",
            },
            {
              internalType: "string",
              name: "_city",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "_pincode",
              type: "uint256",
            },
          ],
          name: "setProfile",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;


================================================
File: web-nfc/packages/nextjs/contracts/externalContracts.ts
================================================
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

/**
 * @example
 * const externalContracts = {
 *   1: {
 *     DAI: {
 *       address: "0x...",
 *       abi: [...],
 *     },
 *   },
 * } as const;
 */
const externalContracts = {} as const;

export default externalContracts satisfies GenericContractsDeclaration;


================================================
File: web-nfc/packages/nextjs/hooks/nfc/useNFC.ts
================================================
import { useScaffoldReadContract, useScaffoldWriteContract } from "../scaffold-eth";

const useNFC = () => {};

export default useNFC;


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/index.ts
================================================
"use client";
export * from "./useAnimationConfig";
export * from "./useContractLogs";
export * from "./useDeployedContractInfo";
export * from "./useFetchBlocks";
export * from "./useInitializeNativeCurrencyPrice";
export * from "./useNetworkColor";
export * from "./useOutsideClick";
export * from "./useScaffoldContract";
export * from "./useScaffoldEventHistory";
export * from "./useScaffoldReadContract";
export * from "./useScaffoldWatchContractEvent";
export * from "./useScaffoldWriteContract";
export * from "./useTargetNetwork";
export * from "./useTransactor";
export * from "./useWatchBalance";


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useAnimationConfig.ts
================================================
import { useEffect, useState } from "react";

const ANIMATION_TIME = 2000;

export function useAnimationConfig(data: any) {
  const [showAnimation, setShowAnimation] = useState(false);
  const [prevData, setPrevData] = useState();

  useEffect(() => {
    if (prevData !== undefined && prevData !== data) {
      setShowAnimation(true);
      setTimeout(() => setShowAnimation(false), ANIMATION_TIME);
    }
    setPrevData(data);
  }, [data, prevData]);

  return {
    showAnimation,
  };
}


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useContractLogs.ts
================================================
import { useEffect, useState } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { Address, Log } from "viem";
import { usePublicClient } from "wagmi";

export const useContractLogs = (address: Address) => {
  const [logs, setLogs] = useState<Log[]>([]);
  const { targetNetwork } = useTargetNetwork();
  const client = usePublicClient({ chainId: targetNetwork.id });

  useEffect(() => {
    const fetchLogs = async () => {
      if (!client) return console.error("Client not found");
      try {
        const existingLogs = await client.getLogs({
          address: address,
          fromBlock: 0n,
          toBlock: "latest",
        });
        setLogs(existingLogs);
      } catch (error) {
        console.error("Failed to fetch logs:", error);
      }
    };
    fetchLogs();

    return client?.watchBlockNumber({
      onBlockNumber: async (_blockNumber, prevBlockNumber) => {
        const newLogs = await client.getLogs({
          address: address,
          fromBlock: prevBlockNumber,
          toBlock: "latest",
        });
        setLogs(prevLogs => [...prevLogs, ...newLogs]);
      },
    });
  }, [address, client]);

  return logs;
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useDeployedContractInfo.ts
================================================
import { useEffect, useState } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { useIsMounted } from "usehooks-ts";
import { usePublicClient } from "wagmi";
import { Contract, ContractCodeStatus, ContractName, contracts } from "~~/utils/scaffold-eth/contract";

/**
 * Gets the matching contract info for the provided contract name from the contracts present in deployedContracts.ts
 * and externalContracts.ts corresponding to targetNetworks configured in scaffold.config.ts
 */
export const useDeployedContractInfo = <TContractName extends ContractName>(contractName: TContractName) => {
  const isMounted = useIsMounted();
  const { targetNetwork } = useTargetNetwork();
  const deployedContract = contracts?.[targetNetwork.id]?.[contractName as ContractName] as Contract<TContractName>;
  const [status, setStatus] = useState<ContractCodeStatus>(ContractCodeStatus.LOADING);
  const publicClient = usePublicClient({ chainId: targetNetwork.id });

  useEffect(() => {
    const checkContractDeployment = async () => {
      try {
        if (!isMounted() || !publicClient) return;

        if (!deployedContract) {
          setStatus(ContractCodeStatus.NOT_FOUND);
          return;
        }

        const code = await publicClient.getBytecode({
          address: deployedContract.address,
        });

        // If contract code is `0x` => no contract deployed on that address
        if (code === "0x") {
          setStatus(ContractCodeStatus.NOT_FOUND);
          return;
        }
        setStatus(ContractCodeStatus.DEPLOYED);
      } catch (e) {
        console.error(e);
        setStatus(ContractCodeStatus.NOT_FOUND);
      }
    };

    checkContractDeployment();
  }, [isMounted, contractName, deployedContract, publicClient]);

  return {
    data: status === ContractCodeStatus.DEPLOYED ? deployedContract : undefined,
    isLoading: status === ContractCodeStatus.LOADING,
  };
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useDisplayUsdMode.ts
================================================
import { useCallback, useEffect, useState } from "react";
import { useGlobalState } from "~~/services/store/store";

export const useDisplayUsdMode = ({ defaultUsdMode = false }: { defaultUsdMode?: boolean }) => {
  const nativeCurrencyPrice = useGlobalState(state => state.nativeCurrency.price);
  const isPriceFetched = nativeCurrencyPrice > 0;
  const predefinedUsdMode = isPriceFetched ? Boolean(defaultUsdMode) : false;
  const [displayUsdMode, setDisplayUsdMode] = useState(predefinedUsdMode);

  useEffect(() => {
    setDisplayUsdMode(predefinedUsdMode);
  }, [predefinedUsdMode]);

  const toggleDisplayUsdMode = useCallback(() => {
    if (isPriceFetched) {
      setDisplayUsdMode(!displayUsdMode);
    }
  }, [displayUsdMode, isPriceFetched]);

  return { displayUsdMode, toggleDisplayUsdMode };
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useFetchBlocks.ts
================================================
import { useCallback, useEffect, useState } from "react";
import {
  Block,
  Hash,
  Transaction,
  TransactionReceipt,
  createTestClient,
  publicActions,
  walletActions,
  webSocket,
} from "viem";
import { hardhat } from "viem/chains";
import { decodeTransactionData } from "~~/utils/scaffold-eth";

const BLOCKS_PER_PAGE = 20;

export const testClient = createTestClient({
  chain: hardhat,
  mode: "hardhat",
  transport: webSocket("ws://127.0.0.1:8545"),
})
  .extend(publicActions)
  .extend(walletActions);

export const useFetchBlocks = () => {
  const [blocks, setBlocks] = useState<Block[]>([]);
  const [transactionReceipts, setTransactionReceipts] = useState<{
    [key: string]: TransactionReceipt;
  }>({});
  const [currentPage, setCurrentPage] = useState(0);
  const [totalBlocks, setTotalBlocks] = useState(0n);
  const [error, setError] = useState<Error | null>(null);

  const fetchBlocks = useCallback(async () => {
    setError(null);

    try {
      const blockNumber = await testClient.getBlockNumber();
      setTotalBlocks(blockNumber);

      const startingBlock = blockNumber - BigInt(currentPage * BLOCKS_PER_PAGE);
      const blockNumbersToFetch = Array.from(
        { length: Number(BLOCKS_PER_PAGE < startingBlock + 1n ? BLOCKS_PER_PAGE : startingBlock + 1n) },
        (_, i) => startingBlock - BigInt(i),
      );

      const blocksWithTransactions = blockNumbersToFetch.map(async blockNumber => {
        try {
          return testClient.getBlock({ blockNumber, includeTransactions: true });
        } catch (err) {
          setError(err instanceof Error ? err : new Error("An error occurred."));
          throw err;
        }
      });
      const fetchedBlocks = await Promise.all(blocksWithTransactions);

      fetchedBlocks.forEach(block => {
        block.transactions.forEach(tx => decodeTransactionData(tx as Transaction));
      });

      const txReceipts = await Promise.all(
        fetchedBlocks.flatMap(block =>
          block.transactions.map(async tx => {
            try {
              const receipt = await testClient.getTransactionReceipt({ hash: (tx as Transaction).hash });
              return { [(tx as Transaction).hash]: receipt };
            } catch (err) {
              setError(err instanceof Error ? err : new Error("An error occurred."));
              throw err;
            }
          }),
        ),
      );

      setBlocks(fetchedBlocks);
      setTransactionReceipts(prevReceipts => ({ ...prevReceipts, ...Object.assign({}, ...txReceipts) }));
    } catch (err) {
      setError(err instanceof Error ? err : new Error("An error occurred."));
    }
  }, [currentPage]);

  useEffect(() => {
    fetchBlocks();
  }, [fetchBlocks]);

  useEffect(() => {
    const handleNewBlock = async (newBlock: any) => {
      try {
        if (currentPage === 0) {
          if (newBlock.transactions.length > 0) {
            const transactionsDetails = await Promise.all(
              newBlock.transactions.map((txHash: string) => testClient.getTransaction({ hash: txHash as Hash })),
            );
            newBlock.transactions = transactionsDetails;
          }

          newBlock.transactions.forEach((tx: Transaction) => decodeTransactionData(tx as Transaction));

          const receipts = await Promise.all(
            newBlock.transactions.map(async (tx: Transaction) => {
              try {
                const receipt = await testClient.getTransactionReceipt({ hash: (tx as Transaction).hash });
                return { [(tx as Transaction).hash]: receipt };
              } catch (err) {
                setError(err instanceof Error ? err : new Error("An error occurred fetching receipt."));
                throw err;
              }
            }),
          );

          setBlocks(prevBlocks => [newBlock, ...prevBlocks.slice(0, BLOCKS_PER_PAGE - 1)]);
          setTransactionReceipts(prevReceipts => ({ ...prevReceipts, ...Object.assign({}, ...receipts) }));
        }
        if (newBlock.number) {
          setTotalBlocks(newBlock.number);
        }
      } catch (err) {
        setError(err instanceof Error ? err : new Error("An error occurred."));
      }
    };

    return testClient.watchBlocks({ onBlock: handleNewBlock, includeTransactions: true });
  }, [currentPage]);

  return {
    blocks,
    transactionReceipts,
    currentPage,
    totalBlocks,
    setCurrentPage,
    error,
  };
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useInitializeNativeCurrencyPrice.ts
================================================
import { useCallback, useEffect } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { useInterval } from "usehooks-ts";
import scaffoldConfig from "~~/scaffold.config";
import { useGlobalState } from "~~/services/store/store";
import { fetchPriceFromUniswap } from "~~/utils/scaffold-eth";

const enablePolling = false;

/**
 * Get the price of Native Currency based on Native Token/DAI trading pair from Uniswap SDK
 */
export const useInitializeNativeCurrencyPrice = () => {
  const setNativeCurrencyPrice = useGlobalState(state => state.setNativeCurrencyPrice);
  const setIsNativeCurrencyFetching = useGlobalState(state => state.setIsNativeCurrencyFetching);
  const { targetNetwork } = useTargetNetwork();

  const fetchPrice = useCallback(async () => {
    setIsNativeCurrencyFetching(true);
    const price = await fetchPriceFromUniswap(targetNetwork);
    setNativeCurrencyPrice(price);
    setIsNativeCurrencyFetching(false);
  }, [setIsNativeCurrencyFetching, setNativeCurrencyPrice, targetNetwork]);

  // Get the price of ETH from Uniswap on mount
  useEffect(() => {
    fetchPrice();
  }, [fetchPrice]);

  // Get the price of ETH from Uniswap at a given interval
  useInterval(fetchPrice, enablePolling ? scaffoldConfig.pollingInterval : null);
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useNetworkColor.ts
================================================
import { useTargetNetwork } from "./useTargetNetwork";
import { useTheme } from "next-themes";
import { ChainWithAttributes } from "~~/utils/scaffold-eth";

export const DEFAULT_NETWORK_COLOR: [string, string] = ["#666666", "#bbbbbb"];

export function getNetworkColor(network: ChainWithAttributes, isDarkMode: boolean) {
  const colorConfig = network.color ?? DEFAULT_NETWORK_COLOR;
  return Array.isArray(colorConfig) ? (isDarkMode ? colorConfig[1] : colorConfig[0]) : colorConfig;
}

/**
 * Gets the color of the target network
 */
export const useNetworkColor = () => {
  const { resolvedTheme } = useTheme();
  const { targetNetwork } = useTargetNetwork();

  const isDarkMode = resolvedTheme === "dark";

  return getNetworkColor(targetNetwork, isDarkMode);
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useOutsideClick.ts
================================================
import React, { useEffect } from "react";

/**
 * Handles clicks outside of passed ref element
 * @param ref - react ref of the element
 * @param callback - callback function to call when clicked outside
 */
export const useOutsideClick = (ref: React.RefObject<HTMLElement>, callback: { (): void }) => {
  useEffect(() => {
    function handleOutsideClick(event: MouseEvent) {
      if (!(event.target instanceof Element)) {
        return;
      }

      if (ref.current && !ref.current.contains(event.target)) {
        callback();
      }
    }

    document.addEventListener("click", handleOutsideClick);
    return () => document.removeEventListener("click", handleOutsideClick);
  }, [ref, callback]);
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useScaffoldContract.ts
================================================
import { useTargetNetwork } from "./useTargetNetwork";
import { Account, Address, Chain, Client, Transport, getContract } from "viem";
import { usePublicClient } from "wagmi";
import { GetWalletClientReturnType } from "wagmi/actions";
import { useDeployedContractInfo } from "~~/hooks/scaffold-eth";
import { Contract, ContractName } from "~~/utils/scaffold-eth/contract";

/**
 * Gets a viem instance of the contract present in deployedContracts.ts or externalContracts.ts corresponding to
 * targetNetworks configured in scaffold.config.ts. Optional walletClient can be passed for doing write transactions.
 * @param config - The config settings for the hook
 * @param config.contractName - deployed contract name
 * @param config.walletClient - optional walletClient from wagmi useWalletClient hook can be passed for doing write transactions
 */
export const useScaffoldContract = <
  TContractName extends ContractName,
  TWalletClient extends Exclude<GetWalletClientReturnType, null> | undefined,
>({
  contractName,
  walletClient,
}: {
  contractName: TContractName;
  walletClient?: TWalletClient | null;
}) => {
  const { data: deployedContractData, isLoading: deployedContractLoading } = useDeployedContractInfo(contractName);
  const { targetNetwork } = useTargetNetwork();
  const publicClient = usePublicClient({ chainId: targetNetwork.id });

  let contract = undefined;
  if (deployedContractData && publicClient) {
    contract = getContract<
      Transport,
      Address,
      Contract<TContractName>["abi"],
      TWalletClient extends Exclude<GetWalletClientReturnType, null>
        ? {
            public: Client<Transport, Chain>;
            wallet: TWalletClient;
          }
        : { public: Client<Transport, Chain> },
      Chain,
      Account
    >({
      address: deployedContractData.address,
      abi: deployedContractData.abi as Contract<TContractName>["abi"],
      client: {
        public: publicClient,
        wallet: walletClient ? walletClient : undefined,
      } as any,
    });
  }

  return {
    data: contract,
    isLoading: deployedContractLoading,
  };
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useScaffoldEventHistory.ts
================================================
import { useEffect, useState } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { useInfiniteQuery } from "@tanstack/react-query";
import { Abi, AbiEvent, ExtractAbiEventNames } from "abitype";
import { BlockNumber, GetLogsParameters } from "viem";
import { Config, UsePublicClientReturnType, useBlockNumber, usePublicClient } from "wagmi";
import { useDeployedContractInfo } from "~~/hooks/scaffold-eth";
import { replacer } from "~~/utils/scaffold-eth/common";
import {
  ContractAbi,
  ContractName,
  UseScaffoldEventHistoryConfig,
  UseScaffoldEventHistoryData,
} from "~~/utils/scaffold-eth/contract";

const getEvents = async (
  getLogsParams: GetLogsParameters<AbiEvent | undefined, AbiEvent[] | undefined, boolean, BlockNumber, BlockNumber>,
  publicClient?: UsePublicClientReturnType<Config, number>,
  Options?: {
    blockData?: boolean;
    transactionData?: boolean;
    receiptData?: boolean;
  },
) => {
  const logs = await publicClient?.getLogs({
    address: getLogsParams.address,
    fromBlock: getLogsParams.fromBlock,
    args: getLogsParams.args,
    event: getLogsParams.event,
  });
  if (!logs) return undefined;

  const finalEvents = await Promise.all(
    logs.map(async log => {
      return {
        ...log,
        blockData:
          Options?.blockData && log.blockHash ? await publicClient?.getBlock({ blockHash: log.blockHash }) : null,
        transactionData:
          Options?.transactionData && log.transactionHash
            ? await publicClient?.getTransaction({ hash: log.transactionHash })
            : null,
        receiptData:
          Options?.receiptData && log.transactionHash
            ? await publicClient?.getTransactionReceipt({ hash: log.transactionHash })
            : null,
      };
    }),
  );

  return finalEvents;
};

/**
 * Reads events from a deployed contract
 * @param config - The config settings
 * @param config.contractName - deployed contract name
 * @param config.eventName - name of the event to listen for
 * @param config.fromBlock - the block number to start reading events from
 * @param config.filters - filters to be applied to the event (parameterName: value)
 * @param config.blockData - if set to true it will return the block data for each event (default: false)
 * @param config.transactionData - if set to true it will return the transaction data for each event (default: false)
 * @param config.receiptData - if set to true it will return the receipt data for each event (default: false)
 * @param config.watch - if set to true, the events will be updated every pollingInterval milliseconds set at scaffoldConfig (default: false)
 * @param config.enabled - set this to false to disable the hook from running (default: true)
 */
export const useScaffoldEventHistory = <
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
  TBlockData extends boolean = false,
  TTransactionData extends boolean = false,
  TReceiptData extends boolean = false,
>({
  contractName,
  eventName,
  fromBlock,
  filters,
  blockData,
  transactionData,
  receiptData,
  watch,
  enabled = true,
}: UseScaffoldEventHistoryConfig<TContractName, TEventName, TBlockData, TTransactionData, TReceiptData>) => {
  const { targetNetwork } = useTargetNetwork();
  const publicClient = usePublicClient({
    chainId: targetNetwork.id,
  });
  const [isFirstRender, setIsFirstRender] = useState(true);

  const { data: blockNumber } = useBlockNumber({ watch: watch, chainId: targetNetwork.id });

  const { data: deployedContractData } = useDeployedContractInfo(contractName);

  const event =
    deployedContractData &&
    ((deployedContractData.abi as Abi).find(part => part.type === "event" && part.name === eventName) as AbiEvent);

  const isContractAddressAndClientReady = Boolean(deployedContractData?.address) && Boolean(publicClient);

  const query = useInfiniteQuery({
    queryKey: [
      "eventHistory",
      {
        contractName,
        address: deployedContractData?.address,
        eventName,
        fromBlock: fromBlock.toString(),
        chainId: targetNetwork.id,
        filters: JSON.stringify(filters, replacer),
      },
    ],
    queryFn: async ({ pageParam }) => {
      if (!isContractAddressAndClientReady) return undefined;
      const data = await getEvents(
        { address: deployedContractData?.address, event, fromBlock: pageParam, args: filters },
        publicClient,
        { blockData, transactionData, receiptData },
      );

      return data;
    },
    enabled: enabled && isContractAddressAndClientReady,
    initialPageParam: fromBlock,
    getNextPageParam: () => {
      return blockNumber;
    },
    select: data => {
      const events = data.pages.flat();
      const eventHistoryData = events?.map(addIndexedArgsToEvent) as UseScaffoldEventHistoryData<
        TContractName,
        TEventName,
        TBlockData,
        TTransactionData,
        TReceiptData
      >;
      return {
        pages: eventHistoryData?.reverse(),
        pageParams: data.pageParams,
      };
    },
  });

  useEffect(() => {
    const shouldSkipEffect = !blockNumber || !watch || isFirstRender;
    if (shouldSkipEffect) {
      // skipping on first render, since on first render we should call queryFn with
      // fromBlock value, not blockNumber
      if (isFirstRender) setIsFirstRender(false);
      return;
    }

    query.fetchNextPage();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [blockNumber, watch]);

  return {
    data: query.data?.pages,
    status: query.status,
    error: query.error,
    isLoading: query.isLoading,
    isFetchingNewEvent: query.isFetchingNextPage,
    refetch: query.refetch,
  };
};

export const addIndexedArgsToEvent = (event: any) => {
  if (event.args && !Array.isArray(event.args)) {
    return { ...event, args: { ...event.args, ...Object.values(event.args) } };
  }

  return event;
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useScaffoldReadContract.ts
================================================
import { useEffect } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { QueryObserverResult, RefetchOptions, useQueryClient } from "@tanstack/react-query";
import type { ExtractAbiFunctionNames } from "abitype";
import { ReadContractErrorType } from "viem";
import { useBlockNumber, useReadContract } from "wagmi";
import { useDeployedContractInfo } from "~~/hooks/scaffold-eth";
import {
  AbiFunctionReturnType,
  ContractAbi,
  ContractName,
  UseScaffoldReadConfig,
} from "~~/utils/scaffold-eth/contract";

/**
 * Wrapper around wagmi's useContractRead hook which automatically loads (by name) the contract ABI and address from
 * the contracts present in deployedContracts.ts & externalContracts.ts corresponding to targetNetworks configured in scaffold.config.ts
 * @param config - The config settings, including extra wagmi configuration
 * @param config.contractName - deployed contract name
 * @param config.functionName - name of the function to be called
 * @param config.args - args to be passed to the function call
 */
export const useScaffoldReadContract = <
  TContractName extends ContractName,
  TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>, "pure" | "view">,
>({
  contractName,
  functionName,
  args,
  ...readConfig
}: UseScaffoldReadConfig<TContractName, TFunctionName>) => {
  const { data: deployedContract } = useDeployedContractInfo(contractName);
  const { targetNetwork } = useTargetNetwork();
  const { query: queryOptions, watch, ...readContractConfig } = readConfig;
  // set watch to true by default
  const defaultWatch = watch ?? true;

  const readContractHookRes = useReadContract({
    chainId: targetNetwork.id,
    functionName,
    address: deployedContract?.address,
    abi: deployedContract?.abi,
    args,
    ...(readContractConfig as any),
    query: {
      enabled: !Array.isArray(args) || !args.some(arg => arg === undefined),
      ...queryOptions,
    },
  }) as Omit<ReturnType<typeof useReadContract>, "data" | "refetch"> & {
    data: AbiFunctionReturnType<ContractAbi, TFunctionName> | undefined;
    refetch: (
      options?: RefetchOptions | undefined,
    ) => Promise<QueryObserverResult<AbiFunctionReturnType<ContractAbi, TFunctionName>, ReadContractErrorType>>;
  };

  const queryClient = useQueryClient();
  const { data: blockNumber } = useBlockNumber({
    watch: defaultWatch,
    chainId: targetNetwork.id,
    query: {
      enabled: defaultWatch,
    },
  });

  useEffect(() => {
    if (defaultWatch) {
      queryClient.invalidateQueries({ queryKey: readContractHookRes.queryKey });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [blockNumber]);

  return readContractHookRes;
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useScaffoldWatchContractEvent.ts
================================================
import { useTargetNetwork } from "./useTargetNetwork";
import { Abi, ExtractAbiEventNames } from "abitype";
import { Log } from "viem";
import { useWatchContractEvent } from "wagmi";
import { addIndexedArgsToEvent, useDeployedContractInfo } from "~~/hooks/scaffold-eth";
import { ContractAbi, ContractName, UseScaffoldEventConfig } from "~~/utils/scaffold-eth/contract";

/**
 * Wrapper around wagmi's useEventSubscriber hook which automatically loads (by name) the contract ABI and
 * address from the contracts present in deployedContracts.ts & externalContracts.ts
 * @param config - The config settings
 * @param config.contractName - deployed contract name
 * @param config.eventName - name of the event to listen for
 * @param config.onLogs - the callback that receives events.
 */
export const useScaffoldWatchContractEvent = <
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
>({
  contractName,
  eventName,
  onLogs,
}: UseScaffoldEventConfig<TContractName, TEventName>) => {
  const { data: deployedContractData } = useDeployedContractInfo(contractName);
  const { targetNetwork } = useTargetNetwork();

  const addIndexedArgsToLogs = (logs: Log[]) => logs.map(addIndexedArgsToEvent);
  const listenerWithIndexedArgs = (logs: Log[]) => onLogs(addIndexedArgsToLogs(logs) as Parameters<typeof onLogs>[0]);

  return useWatchContractEvent({
    address: deployedContractData?.address,
    abi: deployedContractData?.abi as Abi,
    chainId: targetNetwork.id,
    onLogs: listenerWithIndexedArgs,
    eventName,
  });
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useScaffoldWriteContract.ts
================================================
import { useState } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { MutateOptions } from "@tanstack/react-query";
import { Abi, ExtractAbiFunctionNames } from "abitype";
import { Config, UseWriteContractParameters, useAccount, useWriteContract } from "wagmi";
import { WriteContractErrorType, WriteContractReturnType } from "wagmi/actions";
import { WriteContractVariables } from "wagmi/query";
import { useDeployedContractInfo, useTransactor } from "~~/hooks/scaffold-eth";
import { notification } from "~~/utils/scaffold-eth";
import {
  ContractAbi,
  ContractName,
  ScaffoldWriteContractOptions,
  ScaffoldWriteContractVariables,
} from "~~/utils/scaffold-eth/contract";

/**
 * Wrapper around wagmi's useWriteContract hook which automatically loads (by name) the contract ABI and address from
 * the contracts present in deployedContracts.ts & externalContracts.ts corresponding to targetNetworks configured in scaffold.config.ts
 * @param contractName - name of the contract to be written to
 * @param writeContractParams - wagmi's useWriteContract parameters
 */
export const useScaffoldWriteContract = <TContractName extends ContractName>(
  contractName: TContractName,
  writeContractParams?: UseWriteContractParameters,
) => {
  const { chain } = useAccount();
  const writeTx = useTransactor();
  const [isMining, setIsMining] = useState(false);
  const { targetNetwork } = useTargetNetwork();

  const wagmiContractWrite = useWriteContract(writeContractParams);

  const { data: deployedContractData } = useDeployedContractInfo(contractName);

  const sendContractWriteAsyncTx = async <
    TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>, "nonpayable" | "payable">,
  >(
    variables: ScaffoldWriteContractVariables<TContractName, TFunctionName>,
    options?: ScaffoldWriteContractOptions,
  ) => {
    if (!deployedContractData) {
      notification.error("Target Contract is not deployed, did you forget to run `yarn deploy`?");
      return;
    }

    if (!chain?.id) {
      notification.error("Please connect your wallet");
      return;
    }
    if (chain?.id !== targetNetwork.id) {
      notification.error("You are on the wrong network");
      return;
    }

    try {
      setIsMining(true);
      const { blockConfirmations, onBlockConfirmation, ...mutateOptions } = options || {};
      const makeWriteWithParams = () =>
        wagmiContractWrite.writeContractAsync(
          {
            abi: deployedContractData.abi as Abi,
            address: deployedContractData.address,
            ...variables,
          } as WriteContractVariables<Abi, string, any[], Config, number>,
          mutateOptions as
            | MutateOptions<
                WriteContractReturnType,
                WriteContractErrorType,
                WriteContractVariables<Abi, string, any[], Config, number>,
                unknown
              >
            | undefined,
        );
      const writeTxResult = await writeTx(makeWriteWithParams, { blockConfirmations, onBlockConfirmation });

      return writeTxResult;
    } catch (e: any) {
      throw e;
    } finally {
      setIsMining(false);
    }
  };

  const sendContractWriteTx = <
    TContractName extends ContractName,
    TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>, "nonpayable" | "payable">,
  >(
    variables: ScaffoldWriteContractVariables<TContractName, TFunctionName>,
    options?: Omit<ScaffoldWriteContractOptions, "onBlockConfirmation" | "blockConfirmations">,
  ) => {
    if (!deployedContractData) {
      notification.error("Target Contract is not deployed, did you forget to run `yarn deploy`?");
      return;
    }
    if (!chain?.id) {
      notification.error("Please connect your wallet");
      return;
    }
    if (chain?.id !== targetNetwork.id) {
      notification.error("You are on the wrong network");
      return;
    }

    wagmiContractWrite.writeContract(
      {
        abi: deployedContractData.abi as Abi,
        address: deployedContractData.address,
        ...variables,
      } as WriteContractVariables<Abi, string, any[], Config, number>,
      options as
        | MutateOptions<
            WriteContractReturnType,
            WriteContractErrorType,
            WriteContractVariables<Abi, string, any[], Config, number>,
            unknown
          >
        | undefined,
    );
  };

  return {
    ...wagmiContractWrite,
    isMining,
    // Overwrite wagmi's writeContactAsync
    writeContractAsync: sendContractWriteAsyncTx,
    // Overwrite wagmi's writeContract
    writeContract: sendContractWriteTx,
  };
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useTargetNetwork.ts
================================================
import { useEffect, useMemo } from "react";
import { useAccount } from "wagmi";
import scaffoldConfig from "~~/scaffold.config";
import { useGlobalState } from "~~/services/store/store";
import { ChainWithAttributes } from "~~/utils/scaffold-eth";
import { NETWORKS_EXTRA_DATA } from "~~/utils/scaffold-eth";

/**
 * Retrieves the connected wallet's network from scaffold.config or defaults to the 0th network in the list if the wallet is not connected.
 */
export function useTargetNetwork(): { targetNetwork: ChainWithAttributes } {
  const { chain } = useAccount();
  const targetNetwork = useGlobalState(({ targetNetwork }) => targetNetwork);
  const setTargetNetwork = useGlobalState(({ setTargetNetwork }) => setTargetNetwork);

  useEffect(() => {
    const newSelectedNetwork = scaffoldConfig.targetNetworks.find(targetNetwork => targetNetwork.id === chain?.id);
    if (newSelectedNetwork && newSelectedNetwork.id !== targetNetwork.id) {
      setTargetNetwork(newSelectedNetwork);
    }
  }, [chain?.id, setTargetNetwork, targetNetwork.id]);

  return useMemo(
    () => ({
      targetNetwork: {
        ...targetNetwork,
        ...NETWORKS_EXTRA_DATA[targetNetwork.id],
      },
    }),
    [targetNetwork],
  );
}


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useTransactor.tsx
================================================
import { getPublicClient } from "@wagmi/core";
import { Hash, SendTransactionParameters, TransactionReceipt, WalletClient } from "viem";
import { Config, useWalletClient } from "wagmi";
import { SendTransactionMutate } from "wagmi/query";
import { wagmiConfig } from "~~/services/web3/wagmiConfig";
import { getBlockExplorerTxLink, getParsedError, notification } from "~~/utils/scaffold-eth";
import { TransactorFuncOptions } from "~~/utils/scaffold-eth/contract";

type TransactionFunc = (
  tx: (() => Promise<Hash>) | Parameters<SendTransactionMutate<Config, undefined>>[0],
  options?: TransactorFuncOptions,
) => Promise<Hash | undefined>;

/**
 * Custom notification content for TXs.
 */
const TxnNotification = ({ message, blockExplorerLink }: { message: string; blockExplorerLink?: string }) => {
  return (
    <div className={`flex flex-col ml-1 cursor-default`}>
      <p className="my-0">{message}</p>
      {blockExplorerLink && blockExplorerLink.length > 0 ? (
        <a href={blockExplorerLink} target="_blank" rel="noreferrer" className="block link text-md">
          check out transaction
        </a>
      ) : null}
    </div>
  );
};

/**
 * Runs Transaction passed in to returned function showing UI feedback.
 * @param _walletClient - Optional wallet client to use. If not provided, will use the one from useWalletClient.
 * @returns function that takes in transaction function as callback, shows UI feedback for transaction and returns a promise of the transaction hash
 */
export const useTransactor = (_walletClient?: WalletClient): TransactionFunc => {
  let walletClient = _walletClient;
  const { data } = useWalletClient();
  if (walletClient === undefined && data) {
    walletClient = data;
  }

  const result: TransactionFunc = async (tx, options) => {
    if (!walletClient) {
      notification.error("Cannot access account");
      console.error("⚡️ ~ file: useTransactor.tsx ~ error");
      return;
    }

    let notificationId = null;
    let transactionHash: Hash | undefined = undefined;
    let transactionReceipt: TransactionReceipt | undefined;
    let blockExplorerTxURL = "";
    try {
      const network = await walletClient.getChainId();
      // Get full transaction from public client
      const publicClient = getPublicClient(wagmiConfig);

      notificationId = notification.loading(<TxnNotification message="Awaiting for user confirmation" />);
      if (typeof tx === "function") {
        // Tx is already prepared by the caller
        const result = await tx();
        transactionHash = result;
      } else if (tx != null) {
        transactionHash = await walletClient.sendTransaction(tx as SendTransactionParameters);
      } else {
        throw new Error("Incorrect transaction passed to transactor");
      }
      notification.remove(notificationId);

      blockExplorerTxURL = network ? getBlockExplorerTxLink(network, transactionHash) : "";

      notificationId = notification.loading(
        <TxnNotification message="Waiting for transaction to complete." blockExplorerLink={blockExplorerTxURL} />,
      );

      transactionReceipt = await publicClient.waitForTransactionReceipt({
        hash: transactionHash,
        confirmations: options?.blockConfirmations,
      });
      notification.remove(notificationId);

      if (transactionReceipt.status === "reverted") throw new Error("Transaction reverted");

      notification.success(
        <TxnNotification message="Transaction completed successfully!" blockExplorerLink={blockExplorerTxURL} />,
        {
          icon: "🎉",
        },
      );

      if (options?.onBlockConfirmation) options.onBlockConfirmation(transactionReceipt);
    } catch (error: any) {
      if (notificationId) {
        notification.remove(notificationId);
      }
      console.error("⚡️ ~ file: useTransactor.ts ~ error", error);
      const message = getParsedError(error);

      // if receipt was reverted, show notification with block explorer link and return error
      if (transactionReceipt?.status === "reverted") {
        notification.error(<TxnNotification message={message} blockExplorerLink={blockExplorerTxURL} />);
        throw error;
      }

      notification.error(message);
      throw error;
    }

    return transactionHash;
  };

  return result;
};


================================================
File: web-nfc/packages/nextjs/hooks/scaffold-eth/useWatchBalance.ts
================================================
import { useEffect } from "react";
import { useTargetNetwork } from "./useTargetNetwork";
import { useQueryClient } from "@tanstack/react-query";
import { UseBalanceParameters, useBalance, useBlockNumber } from "wagmi";

/**
 * Wrapper around wagmi's useBalance hook. Updates data on every block change.
 */
export const useWatchBalance = (useBalanceParameters: UseBalanceParameters) => {
  const { targetNetwork } = useTargetNetwork();
  const queryClient = useQueryClient();
  const { data: blockNumber } = useBlockNumber({ watch: true, chainId: targetNetwork.id });
  const { queryKey, ...restUseBalanceReturn } = useBalance(useBalanceParameters);

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [blockNumber]);

  return restUseBalanceReturn;
};


================================================
File: web-nfc/packages/nextjs/services/store/store.ts
================================================
import { create } from "zustand";
import scaffoldConfig from "~~/scaffold.config";
import { ChainWithAttributes } from "~~/utils/scaffold-eth";

/**
 * Zustand Store
 *
 * You can add global state to the app using this useGlobalState, to get & set
 * values from anywhere in the app.
 *
 * Think about it as a global useState.
 */

type GlobalState = {
  nativeCurrency: {
    price: number;
    isFetching: boolean;
  };
  setNativeCurrencyPrice: (newNativeCurrencyPriceState: number) => void;
  setIsNativeCurrencyFetching: (newIsNativeCurrencyFetching: boolean) => void;
  targetNetwork: ChainWithAttributes;
  setTargetNetwork: (newTargetNetwork: ChainWithAttributes) => void;
};

export const useGlobalState = create<GlobalState>(set => ({
  nativeCurrency: {
    price: 0,
    isFetching: true,
  },
  setNativeCurrencyPrice: (newValue: number): void =>
    set(state => ({ nativeCurrency: { ...state.nativeCurrency, price: newValue } })),
  setIsNativeCurrencyFetching: (newValue: boolean): void =>
    set(state => ({ nativeCurrency: { ...state.nativeCurrency, isFetching: newValue } })),
  targetNetwork: scaffoldConfig.targetNetworks[0],
  setTargetNetwork: (newTargetNetwork: ChainWithAttributes) => set(() => ({ targetNetwork: newTargetNetwork })),
}));


================================================
File: web-nfc/packages/nextjs/services/web3/wagmiConfig.tsx
================================================
import { wagmiConnectors } from "./wagmiConnectors";
import { Chain, createClient, fallback, http } from "viem";
import { hardhat, mainnet } from "viem/chains";
import { createConfig } from "wagmi";
import scaffoldConfig from "~~/scaffold.config";
import { getAlchemyHttpUrl } from "~~/utils/scaffold-eth";

const { targetNetworks } = scaffoldConfig;

// We always want to have mainnet enabled (ENS resolution, ETH price, etc). But only once.
export const enabledChains = targetNetworks.find((network: Chain) => network.id === 1)
  ? targetNetworks
  : ([...targetNetworks, mainnet] as const);

export const wagmiConfig = createConfig({
  chains: enabledChains,
  connectors: wagmiConnectors,
  ssr: true,
  client({ chain }) {
    const alchemyHttpUrl = getAlchemyHttpUrl(chain.id);
    const rpcFallbacks = alchemyHttpUrl ? [http(), http(alchemyHttpUrl)] : [http()];

    return createClient({
      chain,
      transport: fallback(rpcFallbacks),
      ...(chain.id !== (hardhat as Chain).id
        ? {
            pollingInterval: scaffoldConfig.pollingInterval,
          }
        : {}),
    });
  },
});


================================================
File: web-nfc/packages/nextjs/services/web3/wagmiConnectors.tsx
================================================
import { connectorsForWallets } from "@rainbow-me/rainbowkit";
import {
  coinbaseWallet,
  ledgerWallet,
  metaMaskWallet,
  rainbowWallet,
  safeWallet,
  walletConnectWallet,
} from "@rainbow-me/rainbowkit/wallets";
import { rainbowkitBurnerWallet } from "burner-connector";
import * as chains from "viem/chains";
import scaffoldConfig from "~~/scaffold.config";

const { onlyLocalBurnerWallet, targetNetworks } = scaffoldConfig;

const wallets = [
  metaMaskWallet,
  walletConnectWallet,
  ledgerWallet,
  coinbaseWallet,
  rainbowWallet,
  safeWallet,
  ...(!targetNetworks.some(network => network.id !== (chains.hardhat as chains.Chain).id) || !onlyLocalBurnerWallet
    ? [rainbowkitBurnerWallet]
    : []),
];

/**
 * wagmi connectors for the wagmi context
 */
export const wagmiConnectors = connectorsForWallets(
  [
    {
      groupName: "Supported Wallets",
      wallets,
    },
  ],

  {
    appName: "scaffold-eth-2",
    projectId: scaffoldConfig.walletConnectProjectId,
  },
);


================================================
File: web-nfc/packages/nextjs/styles/globals.css
================================================
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

:root,
[data-theme] {
  background: oklch(var(--b2));
}

body {
  min-height: 100vh;
}

h1,
h2,
h3,
h4 {
  margin-bottom: 0.5rem;
  line-height: 1;
}

p {
  margin: 1rem 0;
}

.btn {
  @apply shadow-md;
}

.btn.btn-ghost {
  @apply shadow-none;
}


================================================
File: web-nfc/packages/nextjs/types/abitype/abi.d.ts
================================================
import "abitype";
import "~~/node_modules/viem/node_modules/abitype";

type AddressType = string;

declare module "abitype" {
  export interface Register {
    AddressType: AddressType;
  }
}

declare module "~~/node_modules/viem/node_modules/abitype" {
  export interface Register {
    AddressType: AddressType;
  }
}


================================================
File: web-nfc/packages/nextjs/types/react-copy-to-clipboard/react-copy-to-clipboard.d.ts
================================================
// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/25414#issuecomment-1180518151
declare module "react-copy-to-clipboard" {
  import React from "react";

  interface Options {
    debug: boolean;
    message: string;
  }

  interface Props {
    text: string;
    onCopy?(a: string, b: boolean): void;
    options?: Options;
  }

  class CopyToClipboard extends React.Component<PropsWithChildren<Props>, unknown> {}
  export default CopyToClipboard;
}


================================================
File: web-nfc/packages/nextjs/utils/contracts.js
================================================
import { userWallet } from "../constants/index";
import { ethers } from "ethers";

// Replace with your private key and RPC URL
const PRIVATE_KEY = process.env.NEXT_PUBLIC_OWNER_PRIVATE_KEY;
const RPC_URL = process.env.NEXT_PUBLIC_BASE_URL;

export const callContractFunction = async arg => {
  try {
    // Initialize provider and wallet signer
    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    // Create contract instance
    const contract = new ethers.Contract(arg.to, userWallet.abi, wallet);

    const gasLimit = await contract.estimateGas.execute(arg.destinationAddress, arg.value, arg.functionData);
    // Call the contract function (replace 'yourFunction' with actual function name)
    const tx = await contract.execute(arg.destinationAddress, arg.value, arg.functionData, {
      gasLimit: "100000000000",
    });

    // Wait for the transaction to be mined
    const receipt = await tx.wait();
    return receipt;
  } catch (error) {
    console.error("Error calling contract function:", error);
    throw error;
  }
};


================================================
File: web-nfc/packages/nextjs/utils/contractwagmi.js
================================================
import { userWallet } from "../constants/index";
import { createWalletClient, encodeFunctionData, http, parseEther } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import { baseSepolia, mainnet } from "wagmi/chains";

// Replace with your private key and RPC URL
const PRIVATE_KEY = process.env.NEXT_PUBLIC_OWNER_PRIVATE_KEY;
const RPC_URL = process.env.NEXT_PUBLIC_BASE_URL;

export const callContractFunction = async arg => {
  try {
    // Setup account and wallet client
    const account = privateKeyToAccount(`0x${PRIVATE_KEY}`);
    const walletClient = createWalletClient({
      chain: baseSepolia,
      account,
      transport: http(RPC_URL),
    });

    // // Get gas estimate for the function call
    // const gasEstimate = await walletClient.estimateGas({
    //   to: arg.to,
    //   data: userWallet.abi
    //     .find(({ name }) => name === "execute")
    //     ?.encode([arg.destinationAddress, parseEther(arg.value.toString()), arg.functionData]),
    // });
    const encodedData = encodeFunctionData({
      abi: userWallet.abi,
      functionName: "execute",
      args: [arg.destinationAddress, parseEther(arg.value.toString()), arg.functionData],
    });

    // Send transaction
    const txHash = await walletClient.sendTransaction({
      to: arg.to,
      data: encodedData,
    });

    // Wait for transaction receipt
    const receipt = await walletClient.waitForTransactionReceipt(txHash);
    return receipt;
  } catch (error) {
    console.error("Error calling contract function:", error);
    throw error;
  }
};


================================================
File: web-nfc/packages/nextjs/utils/executeWalletTx.ts
================================================
import { getContract } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import { usePublicClient, useSendTransaction, useWalletClient } from "wagmi";
import { userWallet } from "~~/constants";

const privateKey = process.env.NEXT_PUBLIC_PRIVATE_KEY as string;

export function useExecuteWalletTransaction() {
  const { data: walletClient } = useWalletClient({});
  const publicClient = usePublicClient();

  const executeTransaction = async (
    userWalletAddress: string,
    destinationAddress: string,
    functionData: string,
    value: string,
  ) => {
    try {
      if (!walletClient || !publicClient) {
        throw new Error("Wallet not connected");
      }

      const contract = getContract({
        address: userWalletAddress,
        abi: userWallet.abi,
        publicClient,
        walletClient,
      });

      const tx = await contract?.write.execute([destinationAddress, BigInt(value), functionData]);
      const hash = tx.hash;
      const receipt = await publicClient.waitForTransactionReceipt({ hash });
      return receipt;
    } catch (error) {
      console.error("Error executing wallet transaction:", error);
      throw error;
    }
  };

  return executeTransaction;
}


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/block.ts
================================================
import { Block, Transaction, TransactionReceipt } from "viem";

export type TransactionWithFunction = Transaction & {
  functionName?: string;
  functionArgs?: any[];
  functionArgNames?: string[];
  functionArgTypes?: string[];
};

type TransactionReceipts = {
  [key: string]: TransactionReceipt;
};

export type TransactionsTableProps = {
  blocks: Block[];
  transactionReceipts: TransactionReceipts;
};


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/common.ts
================================================
// To be used in JSON.stringify when a field might be bigint
// https://wagmi.sh/react/faq#bigint-serialization
export const replacer = (_key: string, value: unknown) => (typeof value === "bigint" ? value.toString() : value);

export const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";

export const isZeroAddress = (address: string) => address === ZERO_ADDRESS;


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/contract.ts
================================================
import { MutateOptions } from "@tanstack/react-query";
import {
  Abi,
  AbiParameter,
  AbiParameterToPrimitiveType,
  AbiParametersToPrimitiveTypes,
  ExtractAbiEvent,
  ExtractAbiEventNames,
  ExtractAbiFunction,
} from "abitype";
import type { ExtractAbiFunctionNames } from "abitype";
import type { Simplify } from "type-fest";
import type { MergeDeepRecord } from "type-fest/source/merge-deep";
import {
  Address,
  Block,
  GetEventArgs,
  GetTransactionReceiptReturnType,
  GetTransactionReturnType,
  Log,
  TransactionReceipt,
  WriteContractErrorType,
} from "viem";
import { Config, UseReadContractParameters, UseWatchContractEventParameters } from "wagmi";
import { WriteContractParameters, WriteContractReturnType } from "wagmi/actions";
import { WriteContractVariables } from "wagmi/query";
import deployedContractsData from "~~/contracts/deployedContracts";
import externalContractsData from "~~/contracts/externalContracts";
import scaffoldConfig from "~~/scaffold.config";

type AddExternalFlag<T> = {
  [ChainId in keyof T]: {
    [ContractName in keyof T[ChainId]]: T[ChainId][ContractName] & { external?: true };
  };
};

const deepMergeContracts = <L extends Record<PropertyKey, any>, E extends Record<PropertyKey, any>>(
  local: L,
  external: E,
) => {
  const result: Record<PropertyKey, any> = {};
  const allKeys = Array.from(new Set([...Object.keys(external), ...Object.keys(local)]));
  for (const key of allKeys) {
    if (!external[key]) {
      result[key] = local[key];
      continue;
    }
    const amendedExternal = Object.fromEntries(
      Object.entries(external[key] as Record<string, Record<string, unknown>>).map(([contractName, declaration]) => [
        contractName,
        { ...declaration, external: true },
      ]),
    );
    result[key] = { ...local[key], ...amendedExternal };
  }
  return result as MergeDeepRecord<AddExternalFlag<L>, AddExternalFlag<E>, { arrayMergeMode: "replace" }>;
};

const contractsData = deepMergeContracts(deployedContractsData, externalContractsData);

export type InheritedFunctions = { readonly [key: string]: string };

export type GenericContract = {
  address: Address;
  abi: Abi;
  inheritedFunctions?: InheritedFunctions;
  external?: true;
};

export type GenericContractsDeclaration = {
  [chainId: number]: {
    [contractName: string]: GenericContract;
  };
};

export const contracts = contractsData as GenericContractsDeclaration | null;

type ConfiguredChainId = (typeof scaffoldConfig)["targetNetworks"][0]["id"];

type IsContractDeclarationMissing<TYes, TNo> = typeof contractsData extends { [key in ConfiguredChainId]: any }
  ? TNo
  : TYes;

type ContractsDeclaration = IsContractDeclarationMissing<GenericContractsDeclaration, typeof contractsData>;

type Contracts = ContractsDeclaration[ConfiguredChainId];

export type ContractName = keyof Contracts;

export type Contract<TContractName extends ContractName> = Contracts[TContractName];

type InferContractAbi<TContract> = TContract extends { abi: infer TAbi } ? TAbi : never;

export type ContractAbi<TContractName extends ContractName = ContractName> = InferContractAbi<Contract<TContractName>>;

export type AbiFunctionInputs<TAbi extends Abi, TFunctionName extends string> = ExtractAbiFunction<
  TAbi,
  TFunctionName
>["inputs"];

export type AbiFunctionArguments<TAbi extends Abi, TFunctionName extends string> = AbiParametersToPrimitiveTypes<
  AbiFunctionInputs<TAbi, TFunctionName>
>;

export type AbiFunctionOutputs<TAbi extends Abi, TFunctionName extends string> = ExtractAbiFunction<
  TAbi,
  TFunctionName
>["outputs"];

export type AbiFunctionReturnType<TAbi extends Abi, TFunctionName extends string> = IsContractDeclarationMissing<
  any,
  AbiParametersToPrimitiveTypes<AbiFunctionOutputs<TAbi, TFunctionName>> extends readonly [any]
    ? AbiParametersToPrimitiveTypes<AbiFunctionOutputs<TAbi, TFunctionName>>[0]
    : AbiParametersToPrimitiveTypes<AbiFunctionOutputs<TAbi, TFunctionName>>
>;

export type AbiEventInputs<TAbi extends Abi, TEventName extends ExtractAbiEventNames<TAbi>> = ExtractAbiEvent<
  TAbi,
  TEventName
>["inputs"];

export enum ContractCodeStatus {
  "LOADING",
  "DEPLOYED",
  "NOT_FOUND",
}

type AbiStateMutability = "pure" | "view" | "nonpayable" | "payable";
export type ReadAbiStateMutability = "view" | "pure";
export type WriteAbiStateMutability = "nonpayable" | "payable";

export type FunctionNamesWithInputs<
  TContractName extends ContractName,
  TAbiStateMutability extends AbiStateMutability = AbiStateMutability,
> = Exclude<
  Extract<
    ContractAbi<TContractName>[number],
    {
      type: "function";
      stateMutability: TAbiStateMutability;
    }
  >,
  {
    inputs: readonly [];
  }
>["name"];

type Expand<T> = T extends object ? (T extends infer O ? { [K in keyof O]: O[K] } : never) : T;

type UnionToIntersection<U> = Expand<(U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never>;

type OptionalTuple<T> = T extends readonly [infer H, ...infer R] ? readonly [H | undefined, ...OptionalTuple<R>] : T;

type UseScaffoldArgsParam<
  TContractName extends ContractName,
  TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>>,
> =
  TFunctionName extends FunctionNamesWithInputs<TContractName>
    ? {
        args: OptionalTuple<UnionToIntersection<AbiFunctionArguments<ContractAbi<TContractName>, TFunctionName>>>;
        value?: ExtractAbiFunction<ContractAbi<TContractName>, TFunctionName>["stateMutability"] extends "payable"
          ? bigint | undefined
          : undefined;
      }
    : {
        args?: never;
      };

export type UseScaffoldReadConfig<
  TContractName extends ContractName,
  TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>, ReadAbiStateMutability>,
> = {
  contractName: TContractName;
  watch?: boolean;
} & IsContractDeclarationMissing<
  Partial<UseReadContractParameters>,
  {
    functionName: TFunctionName;
  } & UseScaffoldArgsParam<TContractName, TFunctionName> &
    Omit<UseReadContractParameters, "chainId" | "abi" | "address" | "functionName" | "args">
>;

export type ScaffoldWriteContractVariables<
  TContractName extends ContractName,
  TFunctionName extends ExtractAbiFunctionNames<ContractAbi<TContractName>, WriteAbiStateMutability>,
> = IsContractDeclarationMissing<
  Partial<WriteContractParameters>,
  {
    functionName: TFunctionName;
  } & UseScaffoldArgsParam<TContractName, TFunctionName> &
    Omit<WriteContractParameters, "chainId" | "abi" | "address" | "functionName" | "args">
>;

type WriteVariables = WriteContractVariables<Abi, string, any[], Config, number>;

export type TransactorFuncOptions = {
  onBlockConfirmation?: (txnReceipt: TransactionReceipt) => void;
  blockConfirmations?: number;
};

export type ScaffoldWriteContractOptions = MutateOptions<
  WriteContractReturnType,
  WriteContractErrorType,
  WriteVariables,
  unknown
> &
  TransactorFuncOptions;

export type UseScaffoldEventConfig<
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
  TEvent extends ExtractAbiEvent<ContractAbi<TContractName>, TEventName> = ExtractAbiEvent<
    ContractAbi<TContractName>,
    TEventName
  >,
> = {
  contractName: TContractName;
  eventName: TEventName;
} & IsContractDeclarationMissing<
  Omit<UseWatchContractEventParameters, "onLogs" | "address" | "abi" | "eventName"> & {
    onLogs: (
      logs: Simplify<
        Omit<Log<bigint, number, any>, "args" | "eventName"> & {
          args: Record<string, unknown>;
          eventName: string;
        }
      >[],
    ) => void;
  },
  Omit<UseWatchContractEventParameters<ContractAbi<TContractName>>, "onLogs" | "address" | "abi" | "eventName"> & {
    onLogs: (
      logs: Simplify<
        Omit<Log<bigint, number, false, TEvent, false, [TEvent], TEventName>, "args"> & {
          args: AbiParametersToPrimitiveTypes<TEvent["inputs"]> &
            GetEventArgs<
              ContractAbi<TContractName>,
              TEventName,
              {
                IndexedOnly: false;
              }
            >;
        }
      >[],
    ) => void;
  }
>;

type IndexedEventInputs<
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
> = Extract<AbiEventInputs<ContractAbi<TContractName>, TEventName>[number], { indexed: true }>;

export type EventFilters<
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
> = IsContractDeclarationMissing<
  any,
  IndexedEventInputs<TContractName, TEventName> extends never
    ? never
    : {
        [Key in IsContractDeclarationMissing<
          any,
          IndexedEventInputs<TContractName, TEventName>["name"]
        >]?: AbiParameterToPrimitiveType<Extract<IndexedEventInputs<TContractName, TEventName>, { name: Key }>>;
      }
>;

export type UseScaffoldEventHistoryConfig<
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
  TBlockData extends boolean = false,
  TTransactionData extends boolean = false,
  TReceiptData extends boolean = false,
> = {
  contractName: TContractName;
  eventName: IsContractDeclarationMissing<string, TEventName>;
  fromBlock: bigint;
  filters?: EventFilters<TContractName, TEventName>;
  blockData?: TBlockData;
  transactionData?: TTransactionData;
  receiptData?: TReceiptData;
  watch?: boolean;
  enabled?: boolean;
};

export type UseScaffoldEventHistoryData<
  TContractName extends ContractName,
  TEventName extends ExtractAbiEventNames<ContractAbi<TContractName>>,
  TBlockData extends boolean = false,
  TTransactionData extends boolean = false,
  TReceiptData extends boolean = false,
  TEvent extends ExtractAbiEvent<ContractAbi<TContractName>, TEventName> = ExtractAbiEvent<
    ContractAbi<TContractName>,
    TEventName
  >,
> =
  | IsContractDeclarationMissing<
      any[],
      {
        log: Log<bigint, number, false, TEvent, false, [TEvent], TEventName>;
        args: AbiParametersToPrimitiveTypes<TEvent["inputs"]> &
          GetEventArgs<
            ContractAbi<TContractName>,
            TEventName,
            {
              IndexedOnly: false;
            }
          >;
        blockData: TBlockData extends true ? Block<bigint, true> : null;
        receiptData: TReceiptData extends true ? GetTransactionReturnType : null;
        transactionData: TTransactionData extends true ? GetTransactionReceiptReturnType : null;
      }[]
    >
  | undefined;

export type AbiParameterTuple = Extract<AbiParameter, { type: "tuple" | `tuple[${string}]` }>;


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/contractsData.ts
================================================
import { useTargetNetwork } from "~~/hooks/scaffold-eth";
import { GenericContractsDeclaration, contracts } from "~~/utils/scaffold-eth/contract";

const DEFAULT_ALL_CONTRACTS: GenericContractsDeclaration[number] = {};

export function useAllContracts() {
  const { targetNetwork } = useTargetNetwork();
  const contractsData = contracts?.[targetNetwork.id];
  // using constant to avoid creating a new object on every call
  return contractsData || DEFAULT_ALL_CONTRACTS;
}


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/decodeTxData.ts
================================================
import { TransactionWithFunction } from "./block";
import { GenericContractsDeclaration } from "./contract";
import { Abi, AbiFunction, decodeFunctionData, getAbiItem } from "viem";
import { hardhat } from "viem/chains";
import contractData from "~~/contracts/deployedContracts";

type ContractsInterfaces = Record<string, Abi>;
type TransactionType = TransactionWithFunction | null;

const deployedContracts = contractData as GenericContractsDeclaration | null;
const chainMetaData = deployedContracts?.[hardhat.id];
const interfaces = chainMetaData
  ? Object.entries(chainMetaData).reduce((finalInterfacesObj, [contractName, contract]) => {
      finalInterfacesObj[contractName] = contract.abi;
      return finalInterfacesObj;
    }, {} as ContractsInterfaces)
  : {};

export const decodeTransactionData = (tx: TransactionWithFunction) => {
  if (tx.input.length >= 10 && !tx.input.startsWith("0x60e06040")) {
    let foundInterface = false;
    for (const [, contractAbi] of Object.entries(interfaces)) {
      try {
        const { functionName, args } = decodeFunctionData({
          abi: contractAbi,
          data: tx.input,
        });
        tx.functionName = functionName;
        tx.functionArgs = args as any[];
        tx.functionArgNames = getAbiItem<AbiFunction[], string>({
          abi: contractAbi as AbiFunction[],
          name: functionName,
        })?.inputs?.map((input: any) => input.name);
        tx.functionArgTypes = getAbiItem<AbiFunction[], string>({
          abi: contractAbi as AbiFunction[],
          name: functionName,
        })?.inputs.map((input: any) => input.type);
        foundInterface = true;
        break;
      } catch {
        // do nothing
      }
    }
    if (!foundInterface) {
      tx.functionName = "⚠️ Unknown";
    }
  }
  return tx;
};

export const getFunctionDetails = (transaction: TransactionType) => {
  if (
    transaction &&
    transaction.functionName &&
    transaction.functionArgNames &&
    transaction.functionArgTypes &&
    transaction.functionArgs
  ) {
    const details = transaction.functionArgNames.map(
      (name, i) => `${transaction.functionArgTypes?.[i] || ""} ${name} = ${transaction.functionArgs?.[i] ?? ""}`,
    );
    return `${transaction.functionName}(${details.join(", ")})`;
  }
  return "";
};


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/fetchPriceFromUniswap.ts
================================================
import { ChainWithAttributes, getAlchemyHttpUrl } from "./networks";
import { CurrencyAmount, Token } from "@uniswap/sdk-core";
import { Pair, Route } from "@uniswap/v2-sdk";
import { Address, createPublicClient, fallback, http, parseAbi } from "viem";
import { mainnet } from "viem/chains";

const alchemyHttpUrl = getAlchemyHttpUrl(mainnet.id);
const rpcFallbacks = alchemyHttpUrl ? [http(alchemyHttpUrl), http()] : [http()];
const publicClient = createPublicClient({
  chain: mainnet,
  transport: fallback(rpcFallbacks),
});

const ABI = parseAbi([
  "function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)",
  "function token0() external view returns (address)",
  "function token1() external view returns (address)",
]);

export const fetchPriceFromUniswap = async (targetNetwork: ChainWithAttributes): Promise<number> => {
  if (
    targetNetwork.nativeCurrency.symbol !== "ETH" &&
    targetNetwork.nativeCurrency.symbol !== "SEP" &&
    !targetNetwork.nativeCurrencyTokenAddress
  ) {
    return 0;
  }
  try {
    const DAI = new Token(1, "0x6B175474E89094C44Da98b954EedeAC495271d0F", 18);
    const TOKEN = new Token(
      1,
      targetNetwork.nativeCurrencyTokenAddress || "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      18,
    );
    const pairAddress = Pair.getAddress(TOKEN, DAI) as Address;

    const wagmiConfig = {
      address: pairAddress,
      abi: ABI,
    };

    const reserves = await publicClient.readContract({
      ...wagmiConfig,
      functionName: "getReserves",
    });

    const token0Address = await publicClient.readContract({
      ...wagmiConfig,
      functionName: "token0",
    });

    const token1Address = await publicClient.readContract({
      ...wagmiConfig,
      functionName: "token1",
    });
    const token0 = [TOKEN, DAI].find(token => token.address === token0Address) as Token;
    const token1 = [TOKEN, DAI].find(token => token.address === token1Address) as Token;
    const pair = new Pair(
      CurrencyAmount.fromRawAmount(token0, reserves[0].toString()),
      CurrencyAmount.fromRawAmount(token1, reserves[1].toString()),
    );
    const route = new Route([pair], TOKEN, DAI);
    const price = parseFloat(route.midPrice.toSignificant(6));
    return price;
  } catch (error) {
    console.error(
      `useNativeCurrencyPrice - Error fetching ${targetNetwork.nativeCurrency.symbol} price from Uniswap: `,
      error,
    );
    return 0;
  }
};


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/getMetadata.ts
================================================
import type { Metadata } from "next";

const baseUrl = process.env.VERCEL_PROJECT_PRODUCTION_URL
  ? `https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}`
  : `http://localhost:${process.env.PORT || 3000}`;
const titleTemplate = "%s | Scaffold-ETH 2";

export const getMetadata = ({
  title,
  description,
  imageRelativePath = "/thumbnail.jpg",
}: {
  title: string;
  description: string;
  imageRelativePath?: string;
}): Metadata => {
  const imageUrl = `${baseUrl}${imageRelativePath}`;

  return {
    metadataBase: new URL(baseUrl),
    title: {
      default: title,
      template: titleTemplate,
    },
    description: description,
    openGraph: {
      title: {
        default: title,
        template: titleTemplate,
      },
      description: description,
      images: [
        {
          url: imageUrl,
        },
      ],
    },
    twitter: {
      title: {
        default: title,
        template: titleTemplate,
      },
      description: description,
      images: [imageUrl],
    },
    icons: {
      icon: [{ url: "/favicon.png", sizes: "32x32", type: "image/png" }],
    },
  };
};


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/getParsedError.ts
================================================
import { BaseError as BaseViemError, ContractFunctionRevertedError } from "viem";

/**
 * Parses an viem/wagmi error to get a displayable string
 * @param e - error object
 * @returns parsed error string
 */
export const getParsedError = (error: any): string => {
  const parsedError = error?.walk ? error.walk() : error;

  if (parsedError instanceof BaseViemError) {
    if (parsedError.details) {
      return parsedError.details;
    }

    if (parsedError.shortMessage) {
      if (
        parsedError instanceof ContractFunctionRevertedError &&
        parsedError.data &&
        parsedError.data.errorName !== "Error"
      ) {
        const customErrorArgs = parsedError.data.args?.toString() ?? "";
        return `${parsedError.shortMessage.replace(/reverted\.$/, "reverted with the following reason:")}\n${
          parsedError.data.errorName
        }(${customErrorArgs})`;
      }

      return parsedError.shortMessage;
    }

    return parsedError.message ?? parsedError.name ?? "An unknown error occurred";
  }

  return parsedError?.message ?? "An unknown error occurred";
};


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/index.ts
================================================
export * from "./fetchPriceFromUniswap";
export * from "./networks";
export * from "./notification";
export * from "./block";
export * from "./decodeTxData";
export * from "./getParsedError";


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/networks.ts
================================================
import * as chains from "viem/chains";
import scaffoldConfig from "~~/scaffold.config";

type ChainAttributes = {
  // color | [lightThemeColor, darkThemeColor]
  color: string | [string, string];
  // Used to fetch price by providing mainnet token address
  // for networks having native currency other than ETH
  nativeCurrencyTokenAddress?: string;
};

export type ChainWithAttributes = chains.Chain & Partial<ChainAttributes>;

// Mapping of chainId to RPC chain name an format followed by alchemy and infura
export const RPC_CHAIN_NAMES: Record<number, string> = {
  [chains.mainnet.id]: "eth-mainnet",
  [chains.goerli.id]: "eth-goerli",
  [chains.sepolia.id]: "eth-sepolia",
  [chains.optimism.id]: "opt-mainnet",
  [chains.optimismGoerli.id]: "opt-goerli",
  [chains.optimismSepolia.id]: "opt-sepolia",
  [chains.arbitrum.id]: "arb-mainnet",
  [chains.arbitrumGoerli.id]: "arb-goerli",
  [chains.arbitrumSepolia.id]: "arb-sepolia",
  [chains.polygon.id]: "polygon-mainnet",
  [chains.polygonMumbai.id]: "polygon-mumbai",
  [chains.polygonAmoy.id]: "polygon-amoy",
  [chains.astar.id]: "astar-mainnet",
  [chains.polygonZkEvm.id]: "polygonzkevm-mainnet",
  [chains.polygonZkEvmTestnet.id]: "polygonzkevm-testnet",
  [chains.base.id]: "base-mainnet",
  [chains.baseGoerli.id]: "base-goerli",
  [chains.baseSepolia.id]: "base-sepolia",
  [chains.celo.id]: "celo-mainnet",
  [chains.celoAlfajores.id]: "celo-alfajores",
};

export const getAlchemyHttpUrl = (chainId: number) => {
  return scaffoldConfig.alchemyApiKey && RPC_CHAIN_NAMES[chainId]
    ? `https://${RPC_CHAIN_NAMES[chainId]}.g.alchemy.com/v2/${scaffoldConfig.alchemyApiKey}`
    : undefined;
};

export const NETWORKS_EXTRA_DATA: Record<string, ChainAttributes> = {
  [chains.hardhat.id]: {
    color: "#b8af0c",
  },
  [chains.mainnet.id]: {
    color: "#ff8b9e",
  },
  [chains.sepolia.id]: {
    color: ["#5f4bb6", "#87ff65"],
  },
  [chains.gnosis.id]: {
    color: "#48a9a6",
  },
  [chains.polygon.id]: {
    color: "#2bbdf7",
    nativeCurrencyTokenAddress: "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
  },
  [chains.polygonMumbai.id]: {
    color: "#92D9FA",
    nativeCurrencyTokenAddress: "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
  },
  [chains.optimismSepolia.id]: {
    color: "#f01a37",
  },
  [chains.optimism.id]: {
    color: "#f01a37",
  },
  [chains.arbitrumSepolia.id]: {
    color: "#28a0f0",
  },
  [chains.arbitrum.id]: {
    color: "#28a0f0",
  },
  [chains.fantom.id]: {
    color: "#1969ff",
  },
  [chains.fantomTestnet.id]: {
    color: "#1969ff",
  },
  [chains.scrollSepolia.id]: {
    color: "#fbebd4",
  },
  [chains.celo.id]: {
    color: "#FCFF52",
  },
  [chains.celoAlfajores.id]: {
    color: "#476520",
  },
};

/**
 * Gives the block explorer transaction URL, returns empty string if the network is a local chain
 */
export function getBlockExplorerTxLink(chainId: number, txnHash: string) {
  const chainNames = Object.keys(chains);

  const targetChainArr = chainNames.filter(chainName => {
    const wagmiChain = chains[chainName as keyof typeof chains];
    return wagmiChain.id === chainId;
  });

  if (targetChainArr.length === 0) {
    return "";
  }

  const targetChain = targetChainArr[0] as keyof typeof chains;
  const blockExplorerTxURL = chains[targetChain]?.blockExplorers?.default?.url;

  if (!blockExplorerTxURL) {
    return "";
  }

  return `${blockExplorerTxURL}/tx/${txnHash}`;
}

/**
 * Gives the block explorer URL for a given address.
 * Defaults to Etherscan if no (wagmi) block explorer is configured for the network.
 */
export function getBlockExplorerAddressLink(network: chains.Chain, address: string) {
  const blockExplorerBaseURL = network.blockExplorers?.default?.url;
  if (network.id === chains.hardhat.id) {
    return `/blockexplorer/address/${address}`;
  }

  if (!blockExplorerBaseURL) {
    return `https://etherscan.io/address/${address}`;
  }

  return `${blockExplorerBaseURL}/address/${address}`;
}

/**
 * @returns targetNetworks array containing networks configured in scaffold.config including extra network metadata
 */
export function getTargetNetworks(): ChainWithAttributes[] {
  return scaffoldConfig.targetNetworks.map(targetNetwork => ({
    ...targetNetwork,
    ...NETWORKS_EXTRA_DATA[targetNetwork.id],
  }));
}


================================================
File: web-nfc/packages/nextjs/utils/scaffold-eth/notification.tsx
================================================
import React from "react";
import { ToastPosition, toast } from "react-hot-toast";
import { XMarkIcon } from "@heroicons/react/20/solid";
import {
  CheckCircleIcon,
  ExclamationCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
} from "@heroicons/react/24/solid";

type NotificationProps = {
  content: React.ReactNode;
  status: "success" | "info" | "loading" | "error" | "warning";
  duration?: number;
  icon?: string;
  position?: ToastPosition;
};

type NotificationOptions = {
  duration?: number;
  icon?: string;
  position?: ToastPosition;
};

const ENUM_STATUSES = {
  success: <CheckCircleIcon className="w-7 text-success" />,
  loading: <span className="w-6 loading loading-spinner"></span>,
  error: <ExclamationCircleIcon className="w-7 text-error" />,
  info: <InformationCircleIcon className="w-7 text-info" />,
  warning: <ExclamationTriangleIcon className="w-7 text-warning" />,
};

const DEFAULT_DURATION = 3000;
const DEFAULT_POSITION: ToastPosition = "top-center";

/**
 * Custom Notification
 */
const Notification = ({
  content,
  status,
  duration = DEFAULT_DURATION,
  icon,
  position = DEFAULT_POSITION,
}: NotificationProps) => {
  return toast.custom(
    t => (
      <div
        className={`flex flex-row items-start justify-between max-w-sm rounded-xl shadow-center shadow-accent bg-base-200 p-4 transform-gpu relative transition-all duration-500 ease-in-out space-x-2
        ${
          position.substring(0, 3) == "top"
            ? `hover:translate-y-1 ${t.visible ? "top-0" : "-top-96"}`
            : `hover:-translate-y-1 ${t.visible ? "bottom-0" : "-bottom-96"}`
        }`}
      >
        <div className="leading-[0] self-center">{icon ? icon : ENUM_STATUSES[status]}</div>
        <div className={`overflow-x-hidden break-words whitespace-pre-line ${icon ? "mt-1" : ""}`}>{content}</div>

        <div className={`cursor-pointer text-lg ${icon ? "mt-1" : ""}`} onClick={() => toast.dismiss(t.id)}>
          <XMarkIcon className="w-6 cursor-pointer" onClick={() => toast.remove(t.id)} />
        </div>
      </div>
    ),
    {
      duration: status === "loading" ? Infinity : duration,
      position,
    },
  );
};

export const notification = {
  success: (content: React.ReactNode, options?: NotificationOptions) => {
    return Notification({ content, status: "success", ...options });
  },
  info: (content: React.ReactNode, options?: NotificationOptions) => {
    return Notification({ content, status: "info", ...options });
  },
  warning: (content: React.ReactNode, options?: NotificationOptions) => {
    return Notification({ content, status: "warning", ...options });
  },
  error: (content: React.ReactNode, options?: NotificationOptions) => {
    return Notification({ content, status: "error", ...options });
  },
  loading: (content: React.ReactNode, options?: NotificationOptions) => {
    return Notification({ content, status: "loading", ...options });
  },
  remove: (toastId: string) => {
    toast.remove(toastId);
  },
};

================================================
File: webviews/README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


================================================
File: webviews/next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "export",
  typescript: {
    ignoreBuildErrors: true,
  },
};

export default nextConfig;

================================================
File: webviews/package.json
================================================
{
  "name": "webviews",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@anon-aadhaar/react": "^2.4.2",
    "next": "14.2.13",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "typescript": "^5"
  }
}


================================================
File: webviews/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next.config.js"
  ],
  "exclude": ["node_modules"]
}

================================================
File: webviews/src/app/globals.css
================================================
:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}


================================================
File: webviews/src/app/layout.tsx
================================================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import AnonProvider from "@/components/providers/AnonProvider";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <AnonProvider>{children}</AnonProvider>
      </body>
    </html>
  );
}


================================================
File: webviews/src/app/page.module.css
================================================
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
 
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 180px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


================================================
File: webviews/src/app/page.tsx
================================================
"use client";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import styles from "./page.module.css";
import { LogInWithAnonAadhaar, useAnonAadhaar } from "@anon-aadhaar/react";

export default function Home() {
  const [anonAadhaar] = useAnonAadhaar();
  const router = useRouter();

  console.log(anonAadhaar);

  useEffect(() => {
    if (anonAadhaar.status === "logged-in") {
      console.log(JSON.parse(anonAadhaar?.anonAadhaarProofs[0]?.pcd));
      if (window?.ReactNativeWebView)
        window?.ReactNativeWebView?.postMessage(anonAadhaar);
    }
  }, []);

  function postMessage() {
    if (window?.ReactNativeWebView) {
      window?.ReactNativeWebView?.postMessage("hello");
      router.push("/close");
    }
  }

  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <LogInWithAnonAadhaar nullifierSeed={4354} />
        <h1>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <button onClick={() => postMessage()}>post message</button>
      </main>
    </div>
  );
}


================================================
File: webviews/src/app/close/page.tsx
================================================
export default function Close() {
  return (
    <div>
      <h1>Close</h1>
    </div>
  );
}


================================================
File: webviews/src/components/providers/AnonProvider.tsx
================================================
"use client";
import { AnonAadhaarProvider } from "@anon-aadhaar/react";

interface AnonProviderProps {
  children: React.ReactNode;
}

const AnonProvider = ({ children }: AnonProviderProps) => {
  return (
    <AnonAadhaarProvider _useTestAadhaar={true}>{children}</AnonAadhaarProvider>
  );
};

export default AnonProvider;


